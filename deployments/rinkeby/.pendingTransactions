{
  "0xf0f5f57a1a7ccae7968e10c93478896565661123d57d809f96a56fd65ce27d27": {
    "name": "LUSDAllocator",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "LUSDAllocator",
      "sourceName": "contracts/allocators/LUSDAllocator.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_authority",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lusdTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lqtyTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_stabilityPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_lqtyStaking",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_frontEndAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_wethAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_hopTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_uniswapV3Router",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "contract IOlympusAuthority",
              "name": "authority",
              "type": "address"
            }
          ],
          "name": "AuthorityUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "dst",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Deposit",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "FEE_PRECISION",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "POOL_FEE_MAX",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "authority",
          "outputs": [
            {
              "internalType": "contract IOlympusAuthority",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "deposit",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "ethToLUSDRatio",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "frontEndAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getETHRewards",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getLQTYRewards",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "minETHLUSDRate",
              "type": "uint256"
            }
          ],
          "name": "harvest",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "hopTokenAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lqtyTokenAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lusdTokenAddress",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "poolFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "contract IOlympusAuthority",
              "name": "_newAuthority",
              "type": "address"
            }
          ],
          "name": "setAuthority",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_ethToLUSDRatio",
              "type": "uint256"
            }
          ],
          "name": "setEthToLUSDRatio",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_frontEndAddress",
              "type": "address"
            }
          ],
          "name": "setFrontEndAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_hopTokenAddress",
              "type": "address"
            }
          ],
          "name": "setHopTokenAddress",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_poolFee",
              "type": "uint256"
            }
          ],
          "name": "setPoolFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalAmountDeployed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalValueDeployed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "treasury",
          "outputs": [
            {
              "internalType": "contract ITreasury",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "updateTreasury",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x610140604052600c6101008190526b15539055551213d49256915160a21b6101209081526200003291600091906200031c565b5062050910600355610bb86004553480156200004d57600080fd5b50604051620025e5380380620025e58339810160408190526200007091620003df565b600180546001600160a01b0319166001600160a01b038c169081179091556040518b91907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250600280546001600160a01b03199081166001600160a01b038c81169182179093556007805483168c85161790556008805483168b851617905588831660805287831660a05260068054831688851617905585831660c0819052600580549093168685161790925591831660e052620001429160001962000203602090811b6200183017901c565b6200016d60e05160001960c0516001600160a01b03166200020360201b62001830179092919060201c565b60805160075462000199916001600160a01b039091169060001962000203602090811b6200183017901c565b600254600754620001c6916001600160a01b03918216911660001962000203602090811b6200183017901c565b600254600854620001f3916001600160a01b03918216911660001962000203602090811b6200183017901c565b5050505050505050505062000554565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620002619190620004ae565b6000604051808303816000865af19150503d8060008114620002a0576040519150601f19603f3d011682016040523d82523d6000602084013e620002a5565b606091505b5091509150818015620002d3575080511580620002d3575080806020019051810190620002d39190620004ec565b620003155760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b5050505050565b8280546200032a9062000517565b90600052602060002090601f0160209004810192826200034e576000855562000399565b82601f106200036957805160ff191683800117855562000399565b8280016001018555821562000399579182015b82811115620003995782518255916020019190600101906200037c565b50620003a7929150620003ab565b5090565b5b80821115620003a75760008155600101620003ac565b80516001600160a01b0381168114620003da57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200040057600080fd5b6200040b8b620003c2565b99506200041b60208c01620003c2565b98506200042b60408c01620003c2565b97506200043b60608c01620003c2565b96506200044b60808c01620003c2565b95506200045b60a08c01620003c2565b94506200046b60c08c01620003c2565b93506200047b60e08c01620003c2565b92506200048c6101008c01620003c2565b91506200049d6101208c01620003c2565b90509295989b9194979a5092959850565b6000825160005b81811015620004d15760208186018101518583015201620004b5565b81811115620004e1576000828501525b509190910192915050565b600060208284031215620004ff57600080fd5b815180151581146200051057600080fd5b9392505050565b600181811c908216806200052c57607f821691505b602082108114156200054e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612018620005cd600039600061123b015260008181611053015281816110db015281816111aa01528181611302015261138e015260008181610fe3015261173e0152600081816106780152818161070901528181610ef2015281816115b8015261198201526120186000f3fe6080604052600436106101835760003560e01c8063817f6481116100d6578063bf7e214f1161007f578063e616916a11610059578063e616916a14610438578063e63a391f1461044e578063f3fef3a31461046557600080fd5b8063bf7e214f146103d2578063c901761d146103f2578063ddc632621461040857600080fd5b80639c769787116100b05780639c7697871461037d578063b6b55f2514610392578063b7e78648146103b257600080fd5b8063817f6481146103275780639501dc8714610347578063987f56ff1461036757600080fd5b806361d027b31161013857806378289ed21161011257806378289ed2146102dd57806378767d05146102f25780637a9e5e4b1461030757600080fd5b806361d027b3146102875780636bd0fd0f146102a7578063739a4a37146102c757600080fd5b806310a18de21161016957806310a18de2146102255780631d2528fc146102455780635a762d641461026557600080fd5b806202fcd3146101c4578063089fe6aa1461020157600080fd5b366101bf5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156101d057600080fd5b506007546101e4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020d57600080fd5b5061021760045481565b6040519081526020016101f8565b34801561023157600080fd5b506005546101e4906001600160a01b031681565b34801561025157600080fd5b506006546101e4906001600160a01b031681565b34801561027157600080fd5b50610285610280366004611c4a565b610485565b005b34801561029357600080fd5b506002546101e4906001600160a01b031681565b3480156102b357600080fd5b506102856102c2366004611c6e565b61055c565b3480156102d357600080fd5b5061021761271081565b3480156102e957600080fd5b50610217610660565b3480156102fe57600080fd5b506102176106f1565b34801561031357600080fd5b50610285610322366004611c4a565b610740565b34801561033357600080fd5b506008546101e4906001600160a01b031681565b34801561035357600080fd5b50610285610362366004611c6e565b610836565b34801561037357600080fd5b50610217600a5481565b34801561038957600080fd5b50610285610943565b34801561039e57600080fd5b506102856103ad366004611c6e565b610c19565b3480156103be57600080fd5b506102856103cd366004611c4a565b610d38565b3480156103de57600080fd5b506001546101e4906001600160a01b031681565b3480156103fe57600080fd5b5061021760095481565b34801561041457600080fd5b50610428610423366004611c6e565b610e06565b60405190151581526020016101f8565b34801561044457600080fd5b5061021760035481565b34801561045a57600080fd5b50610217620f424081565b34801561047157600080fd5b50610285610480366004611c87565b611445565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906105395760405162461bcd60e51b81526004016105309190611cd0565b60405180910390fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611cb3565b6001600160a01b0316336001600160a01b0316146000906106075760405162461bcd60e51b81526004016105309190611cd0565b50620f424081111561065b5760405162461bcd60e51b815260206004820152601f60248201527f56616c7565206d757374206265206265747765656e203020616e6420316536006044820152606401610530565b600355565b60405163389e92a560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063389e92a5906024015b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611d78565b905090565b60405163f5f1595d60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5f1595d906024016106ab565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190611cb3565b6001600160a01b0316336001600160a01b0316146000906107eb5760405162461bcd60e51b81526004016105309190611cd0565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611cb3565b6001600160a01b0316336001600160a01b0316146000906108e15760405162461bcd60e51b81526004016105309190611cd0565b5061271081111561093e5760405162461bcd60e51b815260206004820152602160248201527f56616c7565206d757374206265206265747765656e203020616e6420313030306044820152600360fc1b6064820152608401610530565b600455565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cb3565b6001600160a01b0316336001600160a01b0316146000906109ee5760405162461bcd60e51b81526004016105309190611cd0565b506001546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611cb3565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a205661756c74000000000000000000000000006044820152606401610530565b6002546001546040805163fbfa77cf60e01b815290516001600160a01b03938416939092169163fbfa77cf916004808201926020929091908290030181865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611cb3565b6001600160a01b03161415610b805760405162461bcd60e51b815260206004820152600960248201527f4e6f206368616e676500000000000000000000000000000000000000000000006044820152606401610530565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190611cb3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611cb3565b6001600160a01b0316336001600160a01b031614600090610cc45760405162461bcd60e51b81526004016105309190611cd0565b5060025460075460405162b0eee360e41b81526001600160a01b03918216600482015260248101849052911690630b0eee3090604401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050610d3581611959565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611cb3565b6001600160a01b0316336001600160a01b031614600090610de35760405162461bcd60e51b81526004016105309190611cd0565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611cb3565b6001600160a01b0316336001600160a01b031614600090610ea85760405162461bcd60e51b81526004016105309190611cd0565b506000610eb3610660565b90506000610ebf6106f1565b905081158015610ecd575080155b15610edc575060009392505050565b604051632e54bf9560e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190611d78565b905080156110485760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050505b47600081156112d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d78565b600354909150156112d7576000620f42406003548361116f9190611da7565b6111799190611dc6565b905060006111878a83611da7565b6040805160a0810182526004546005546007546bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b821660c087015260d4860185905292831b811660f4860152610108850193909352901b16610128820152815180820361011c01815261013c820183528152306020820152919250600091908101611226426019611de8565b815260200184815260200183815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59836040518263ffffffff1660e01b81526004016112859190611e30565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611d78565b11156112d357600194505b5050505b505b60035415806112e55750805b156113b9576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190611d78565b905080156113b7576002546113b7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611a07565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190611d78565b905080156114375761143781611959565b506001979650505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906114f05760405162461bcd60e51b81526004016105309190611cd0565b506007546001600160a01b038381169116148061151a57506008546001600160a01b038381169116145b61158c5760405162461bcd60e51b815260206004820152603060248201527f746f6b656e206164647265737320646f6573206e6f74206d61746368204c555360448201527f44206e6f72204c51545920746f6b656e000000000000000000000000000000006064820152608401610530565b6007546001600160a01b038381169116141561172857604051632e54bf9560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611d78565b905060006116958483611b30565b90506116a382826000611bc0565b60025460405163bc157ac160e01b8152600481018490526001600160a01b038681166024830152604482018490529091169063bc157ac1906064016020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190611d78565b5050505050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611d78565b60025490915061182a906001600160a01b03858116911683611a07565b505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908716916118a19190611ea0565b6000604051808303816000865af19150503d80600081146118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b509150915081801561190d57508051158061190d57508080602001905181019061190d9190611ebc565b6117215760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610530565b600654604051635f788d6560e01b8152600481018390526001600160a01b0391821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690635f788d6590604401600060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b5050600754600092506119f991506001600160a01b031683611b30565b905061182c82826001611bc0565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611a789190611ea0565b6000604051808303816000865af19150503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5091509150818015611ae4575080511580611ae4575080806020019051810190611ae49190611ebc565b6117215760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610530565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190611ede565b611b9f90600a611fe5565b611bad83633b9aca00611da7565b611bb79190611dc6565b90505b92915050565b8015611bed5782600a54611bd49190611de8565b600a55600954611be5908390611de8565b60095561182a565b600a54831015611c0d5782600a54611c059190611ff4565b600a55611c13565b6000600a555b600954821015611c2b5781600954611be59190611ff4565b6000600955505050565b6001600160a01b0381168114610d3557600080fd5b600060208284031215611c5c57600080fd5b8135611c6781611c35565b9392505050565b600060208284031215611c8057600080fd5b5035919050565b60008060408385031215611c9a57600080fd5b8235611ca581611c35565b946020939093013593505050565b600060208284031215611cc557600080fd5b8151611c6781611c35565b600060208083526000845481600182811c915080831680611cf257607f831692505b858310811415611d1057634e487b7160e01b85526022600452602485fd5b878601838152602001818015611d2d5760018114611d3e57611d69565b60ff19861682528782019650611d69565b60008b81526020902060005b86811015611d6357815484820152908501908901611d4a565b83019750505b50949998505050505050505050565b600060208284031215611d8a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dc157611dc1611d91565b500290565b600082611de357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611dfb57611dfb611d91565b500190565b60005b83811015611e1b578181015183820152602001611e03565b83811115611e2a576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611e588160e0860160208501611e00565b6001600160a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60008251611eb2818460208701611e00565b9190910192915050565b600060208284031215611ece57600080fd5b81518015158114611c6757600080fd5b600060208284031215611ef057600080fd5b815160ff81168114611c6757600080fd5b600181815b80851115611f3c578160001904821115611f2257611f22611d91565b80851615611f2f57918102915b93841c9390800290611f06565b509250929050565b600082611f5357506001611bba565b81611f6057506000611bba565b8160018114611f765760028114611f8057611f9c565b6001915050611bba565b60ff841115611f9157611f91611d91565b50506001821b611bba565b5060208310610133831016604e8410600b8410161715611fbf575081810a611bba565b611fc98383611f01565b8060001904821115611fdd57611fdd611d91565b029392505050565b6000611bb760ff841683611f44565b60008282101561200657612006611d91565b50039056fea164736f6c634300080a000a",
      "deployedBytecode": "0x6080604052600436106101835760003560e01c8063817f6481116100d6578063bf7e214f1161007f578063e616916a11610059578063e616916a14610438578063e63a391f1461044e578063f3fef3a31461046557600080fd5b8063bf7e214f146103d2578063c901761d146103f2578063ddc632621461040857600080fd5b80639c769787116100b05780639c7697871461037d578063b6b55f2514610392578063b7e78648146103b257600080fd5b8063817f6481146103275780639501dc8714610347578063987f56ff1461036757600080fd5b806361d027b31161013857806378289ed21161011257806378289ed2146102dd57806378767d05146102f25780637a9e5e4b1461030757600080fd5b806361d027b3146102875780636bd0fd0f146102a7578063739a4a37146102c757600080fd5b806310a18de21161016957806310a18de2146102255780631d2528fc146102455780635a762d641461026557600080fd5b806202fcd3146101c4578063089fe6aa1461020157600080fd5b366101bf5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156101d057600080fd5b506007546101e4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020d57600080fd5b5061021760045481565b6040519081526020016101f8565b34801561023157600080fd5b506005546101e4906001600160a01b031681565b34801561025157600080fd5b506006546101e4906001600160a01b031681565b34801561027157600080fd5b50610285610280366004611c4a565b610485565b005b34801561029357600080fd5b506002546101e4906001600160a01b031681565b3480156102b357600080fd5b506102856102c2366004611c6e565b61055c565b3480156102d357600080fd5b5061021761271081565b3480156102e957600080fd5b50610217610660565b3480156102fe57600080fd5b506102176106f1565b34801561031357600080fd5b50610285610322366004611c4a565b610740565b34801561033357600080fd5b506008546101e4906001600160a01b031681565b34801561035357600080fd5b50610285610362366004611c6e565b610836565b34801561037357600080fd5b50610217600a5481565b34801561038957600080fd5b50610285610943565b34801561039e57600080fd5b506102856103ad366004611c6e565b610c19565b3480156103be57600080fd5b506102856103cd366004611c4a565b610d38565b3480156103de57600080fd5b506001546101e4906001600160a01b031681565b3480156103fe57600080fd5b5061021760095481565b34801561041457600080fd5b50610428610423366004611c6e565b610e06565b60405190151581526020016101f8565b34801561044457600080fd5b5061021760035481565b34801561045a57600080fd5b50610217620f424081565b34801561047157600080fd5b50610285610480366004611c87565b611445565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906105395760405162461bcd60e51b81526004016105309190611cd0565b60405180910390fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611cb3565b6001600160a01b0316336001600160a01b0316146000906106075760405162461bcd60e51b81526004016105309190611cd0565b50620f424081111561065b5760405162461bcd60e51b815260206004820152601f60248201527f56616c7565206d757374206265206265747765656e203020616e6420316536006044820152606401610530565b600355565b60405163389e92a560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063389e92a5906024015b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611d78565b905090565b60405163f5f1595d60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5f1595d906024016106ab565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190611cb3565b6001600160a01b0316336001600160a01b0316146000906107eb5760405162461bcd60e51b81526004016105309190611cd0565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611cb3565b6001600160a01b0316336001600160a01b0316146000906108e15760405162461bcd60e51b81526004016105309190611cd0565b5061271081111561093e5760405162461bcd60e51b815260206004820152602160248201527f56616c7565206d757374206265206265747765656e203020616e6420313030306044820152600360fc1b6064820152608401610530565b600455565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cb3565b6001600160a01b0316336001600160a01b0316146000906109ee5760405162461bcd60e51b81526004016105309190611cd0565b506001546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611cb3565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a205661756c74000000000000000000000000006044820152606401610530565b6002546001546040805163fbfa77cf60e01b815290516001600160a01b03938416939092169163fbfa77cf916004808201926020929091908290030181865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611cb3565b6001600160a01b03161415610b805760405162461bcd60e51b815260206004820152600960248201527f4e6f206368616e676500000000000000000000000000000000000000000000006044820152606401610530565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190611cb3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611cb3565b6001600160a01b0316336001600160a01b031614600090610cc45760405162461bcd60e51b81526004016105309190611cd0565b5060025460075460405162b0eee360e41b81526001600160a01b03918216600482015260248101849052911690630b0eee3090604401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050610d3581611959565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611cb3565b6001600160a01b0316336001600160a01b031614600090610de35760405162461bcd60e51b81526004016105309190611cd0565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611cb3565b6001600160a01b0316336001600160a01b031614600090610ea85760405162461bcd60e51b81526004016105309190611cd0565b506000610eb3610660565b90506000610ebf6106f1565b905081158015610ecd575080155b15610edc575060009392505050565b604051632e54bf9560e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190611d78565b905080156110485760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050505b47600081156112d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d78565b600354909150156112d7576000620f42406003548361116f9190611da7565b6111799190611dc6565b905060006111878a83611da7565b6040805160a0810182526004546005546007546bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b821660c087015260d4860185905292831b811660f4860152610108850193909352901b16610128820152815180820361011c01815261013c820183528152306020820152919250600091908101611226426019611de8565b815260200184815260200183815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59836040518263ffffffff1660e01b81526004016112859190611e30565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611d78565b11156112d357600194505b5050505b505b60035415806112e55750805b156113b9576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190611d78565b905080156113b7576002546113b7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611a07565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190611d78565b905080156114375761143781611959565b506001979650505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906114f05760405162461bcd60e51b81526004016105309190611cd0565b506007546001600160a01b038381169116148061151a57506008546001600160a01b038381169116145b61158c5760405162461bcd60e51b815260206004820152603060248201527f746f6b656e206164647265737320646f6573206e6f74206d61746368204c555360448201527f44206e6f72204c51545920746f6b656e000000000000000000000000000000006064820152608401610530565b6007546001600160a01b038381169116141561172857604051632e54bf9560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611d78565b905060006116958483611b30565b90506116a382826000611bc0565b60025460405163bc157ac160e01b8152600481018490526001600160a01b038681166024830152604482018490529091169063bc157ac1906064016020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190611d78565b5050505050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611d78565b60025490915061182a906001600160a01b03858116911683611a07565b505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908716916118a19190611ea0565b6000604051808303816000865af19150503d80600081146118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b509150915081801561190d57508051158061190d57508080602001905181019061190d9190611ebc565b6117215760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610530565b600654604051635f788d6560e01b8152600481018390526001600160a01b0391821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690635f788d6590604401600060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b5050600754600092506119f991506001600160a01b031683611b30565b905061182c82826001611bc0565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611a789190611ea0565b6000604051808303816000865af19150503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5091509150818015611ae4575080511580611ae4575080806020019051810190611ae49190611ebc565b6117215760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610530565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190611ede565b611b9f90600a611fe5565b611bad83633b9aca00611da7565b611bb79190611dc6565b90505b92915050565b8015611bed5782600a54611bd49190611de8565b600a55600954611be5908390611de8565b60095561182a565b600a54831015611c0d5782600a54611c059190611ff4565b600a55611c13565b6000600a555b600954821015611c2b5781600954611be59190611ff4565b6000600955505050565b6001600160a01b0381168114610d3557600080fd5b600060208284031215611c5c57600080fd5b8135611c6781611c35565b9392505050565b600060208284031215611c8057600080fd5b5035919050565b60008060408385031215611c9a57600080fd5b8235611ca581611c35565b946020939093013593505050565b600060208284031215611cc557600080fd5b8151611c6781611c35565b600060208083526000845481600182811c915080831680611cf257607f831692505b858310811415611d1057634e487b7160e01b85526022600452602485fd5b878601838152602001818015611d2d5760018114611d3e57611d69565b60ff19861682528782019650611d69565b60008b81526020902060005b86811015611d6357815484820152908501908901611d4a565b83019750505b50949998505050505050505050565b600060208284031215611d8a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dc157611dc1611d91565b500290565b600082611de357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611dfb57611dfb611d91565b500190565b60005b83811015611e1b578181015183820152602001611e03565b83811115611e2a576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611e588160e0860160208501611e00565b6001600160a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60008251611eb2818460208701611e00565b9190910192915050565b600060208284031215611ece57600080fd5b81518015158114611c6757600080fd5b600060208284031215611ef057600080fd5b815160ff81168114611c6757600080fd5b600181815b80851115611f3c578160001904821115611f2257611f22611d91565b80851615611f2f57918102915b93841c9390800290611f06565b509250929050565b600082611f5357506001611bba565b81611f6057506000611bba565b8160018114611f765760028114611f8057611f9c565b6001915050611bba565b60ff841115611f9157611f91611d91565b50506001821b611bba565b5060208310610133831016604e8410600b8410161715611fbf575081810a611bba565b611fc98383611f01565b8060001904821115611fdd57611fdd611d91565b029392505050565b6000611bb760ff841683611f44565b60008282101561200657612006611d91565b50039056fea164736f6c634300080a000a",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deposit(uint256)": {
            "params": {
              "amount": "uint"
            }
          },
          "getETHRewards()": {
            "returns": {
              "_0": "uint"
            }
          },
          "getLQTYRewards()": {
            "returns": {
              "_0": "uint"
            }
          },
          "setFrontEndAddress(address)": {
            "params": {
              "_frontEndAddress": "address"
            }
          },
          "withdraw(address,uint256)": {
            "params": {
              "amount": "uint",
              "token": "address"
            }
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_1789": {
              "entryPoint": null,
              "id": 1789,
              "parameterSlots": 10,
              "returnSlots": 0
            },
            "@_8912": {
              "entryPoint": null,
              "id": 8912,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@safeApprove_5097": {
              "entryPoint": 515,
              "id": 5097,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "abi_decode_address_fromMemory": {
              "entryPoint": 962,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory": {
              "entryPoint": 991,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 10
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 1260,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 1198,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 1303,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:2898:41",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:41",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:41"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:41"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:41"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:41",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:41",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:41"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:41"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:41",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:41"
                          },
                          "nodeType": "YulIf",
                          "src": "115:70:41"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:41",
                        "type": ""
                      }
                    ],
                    "src": "14:177:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "430:746:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "477:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "486:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "489:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "479:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "479:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "479:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "451:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "460:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "447:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "447:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "472:3:41",
                                "type": "",
                                "value": "320"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "443:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "443:33:41"
                          },
                          "nodeType": "YulIf",
                          "src": "440:53:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "502:50:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "542:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "512:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "512:40:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "502:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "561:59:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "605:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "616:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "601:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "601:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "571:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "571:49:41"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "561:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "629:59:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "673:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "684:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "669:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "669:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "639:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "639:49:41"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "629:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "697:59:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "741:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "752:2:41",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "737:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "737:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "707:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "707:49:41"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "697:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "765:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "809:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "820:3:41",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "805:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "805:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "775:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "775:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "765:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "834:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "878:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "889:3:41",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "874:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "874:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "844:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "844:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "834:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "903:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "947:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "958:3:41",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "943:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "943:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "913:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "913:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value6",
                              "nodeType": "YulIdentifier",
                              "src": "903:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "972:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1016:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1027:3:41",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1012:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1012:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "982:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "982:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value7",
                              "nodeType": "YulIdentifier",
                              "src": "972:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1041:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1085:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1096:3:41",
                                    "type": "",
                                    "value": "256"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1081:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1081:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1051:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1051:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value8",
                              "nodeType": "YulIdentifier",
                              "src": "1041:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1110:60:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1154:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1165:3:41",
                                    "type": "",
                                    "value": "288"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1150:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1150:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "1120:29:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1120:50:41"
                          },
                          "variableNames": [
                            {
                              "name": "value9",
                              "nodeType": "YulIdentifier",
                              "src": "1110:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "324:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "335:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "347:6:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "355:6:41",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "363:6:41",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "371:6:41",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "379:6:41",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "387:6:41",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "395:6:41",
                        "type": ""
                      },
                      {
                        "name": "value7",
                        "nodeType": "YulTypedName",
                        "src": "403:6:41",
                        "type": ""
                      },
                      {
                        "name": "value8",
                        "nodeType": "YulTypedName",
                        "src": "411:6:41",
                        "type": ""
                      },
                      {
                        "name": "value9",
                        "nodeType": "YulTypedName",
                        "src": "419:6:41",
                        "type": ""
                      }
                    ],
                    "src": "196:980:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1310:145:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1320:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1332:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1343:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1328:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1328:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1320:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1362:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1377:6:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1393:3:41",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1398:1:41",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1389:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1389:11:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1402:1:41",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "1385:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1385:19:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1373:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1373:32:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1355:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1355:51:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1355:51:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1426:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1437:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1422:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1422:18:41"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "1442:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1415:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1415:34:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1415:34:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1271:9:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1282:6:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1290:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1301:4:41",
                        "type": ""
                      }
                    ],
                    "src": "1181:274:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1597:289:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1607:27:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "1627:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1621:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1621:13:41"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1611:6:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1643:10:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1652:1:41",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "1647:1:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1714:77:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "1739:3:41"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "1744:1:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1735:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1735:11:41"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "value0",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1762:6:41"
                                                },
                                                {
                                                  "name": "i",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "1770:1:41"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "add",
                                                "nodeType": "YulIdentifier",
                                                "src": "1758:3:41"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "1758:14:41"
                                            },
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "1774:4:41",
                                              "type": "",
                                              "value": "0x20"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "1754:3:41"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "1754:25:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "1748:5:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1748:32:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1728:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1728:53:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1728:53:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1673:1:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1676:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "1670:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1670:13:41"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "1684:21:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "1686:17:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "1695:1:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1698:4:41",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "1691:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1691:12:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "1686:1:41"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "1666:3:41",
                            "statements": []
                          },
                          "src": "1662:129:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1817:31:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "1830:3:41"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "1835:6:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "1826:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "1826:16:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1844:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "1819:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1819:27:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1819:27:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "1806:1:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1809:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1803:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1803:13:41"
                          },
                          "nodeType": "YulIf",
                          "src": "1800:48:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1857:23:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1868:3:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1873:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1864:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1864:16:41"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "1857:3:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1573:3:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1578:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1589:3:41",
                        "type": ""
                      }
                    ],
                    "src": "1460:426:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1969:199:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2015:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2024:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2027:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2017:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2017:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2017:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1990:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1999:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1986:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1986:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2011:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1982:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1982:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "1979:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2040:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2059:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2053:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2053:16:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2044:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2122:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2131:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2134:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2124:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2124:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2124:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2091:5:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "2112:5:41"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "2105:6:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2105:13:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "2098:6:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2098:21:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "2088:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2088:32:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2081:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2081:40:41"
                          },
                          "nodeType": "YulIf",
                          "src": "2078:60:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2147:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2157:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2147:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1935:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1946:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1958:6:41",
                        "type": ""
                      }
                    ],
                    "src": "1891:277:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2347:164:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2364:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2375:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2357:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2357:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2357:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2398:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2409:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2394:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2394:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2414:2:41",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2387:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2387:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2387:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2437:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2448:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2433:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2433:18:41"
                              },
                              {
                                "hexValue": "415050524f56455f4641494c4544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "2453:16:41",
                                "type": "",
                                "value": "APPROVE_FAILED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2426:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2426:44:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2426:44:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2479:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2491:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2502:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2487:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2487:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2479:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2324:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2338:4:41",
                        "type": ""
                      }
                    ],
                    "src": "2173:338:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2571:325:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2581:22:41",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2595:1:41",
                                "type": "",
                                "value": "1"
                              },
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2598:4:41"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "2591:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2591:12:41"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2581:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2612:38:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "2642:4:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2648:1:41",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2638:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2638:12:41"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "2616:18:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2689:31:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2691:27:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "2705:6:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2713:4:41",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "2701:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2701:17:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2691:6:41"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2669:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2662:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2662:26:41"
                          },
                          "nodeType": "YulIf",
                          "src": "2659:61:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2779:111:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2800:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2807:3:41",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "2812:10:41",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "2803:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2803:20:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2793:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2793:31:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2793:31:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2844:1:41",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2847:4:41",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2837:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2837:15:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2837:15:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2872:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2875:4:41",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2865:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2865:15:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2865:15:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "2735:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2758:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2766:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2755:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2755:14:41"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "2732:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2732:38:41"
                          },
                          "nodeType": "YulIf",
                          "src": "2729:161:41"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2551:4:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2560:6:41",
                        "type": ""
                      }
                    ],
                    "src": "2516:380:41"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n        value4 := abi_decode_address_fromMemory(add(headStart, 128))\n        value5 := abi_decode_address_fromMemory(add(headStart, 160))\n        value6 := abi_decode_address_fromMemory(add(headStart, 192))\n        value7 := abi_decode_address_fromMemory(add(headStart, 224))\n        value8 := abi_decode_address_fromMemory(add(headStart, 256))\n        value9 := abi_decode_address_fromMemory(add(headStart, 288))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), 0) }\n        end := add(pos, length)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"APPROVE_FAILED\")\n        tail := add(headStart, 96)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
              "id": 41,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "610140604052600c6101008190526b15539055551213d49256915160a21b6101209081526200003291600091906200031c565b5062050910600355610bb86004553480156200004d57600080fd5b50604051620025e5380380620025e58339810160408190526200007091620003df565b600180546001600160a01b0319166001600160a01b038c169081179091556040518b91907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250600280546001600160a01b03199081166001600160a01b038c81169182179093556007805483168c85161790556008805483168b851617905588831660805287831660a05260068054831688851617905585831660c0819052600580549093168685161790925591831660e052620001429160001962000203602090811b6200183017901c565b6200016d60e05160001960c0516001600160a01b03166200020360201b62001830179092919060201c565b60805160075462000199916001600160a01b039091169060001962000203602090811b6200183017901c565b600254600754620001c6916001600160a01b03918216911660001962000203602090811b6200183017901c565b600254600854620001f3916001600160a01b03918216911660001962000203602090811b6200183017901c565b5050505050505050505062000554565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620002619190620004ae565b6000604051808303816000865af19150503d8060008114620002a0576040519150601f19603f3d011682016040523d82523d6000602084013e620002a5565b606091505b5091509150818015620002d3575080511580620002d3575080806020019051810190620002d39190620004ec565b620003155760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b5050505050565b8280546200032a9062000517565b90600052602060002090601f0160209004810192826200034e576000855562000399565b82601f106200036957805160ff191683800117855562000399565b8280016001018555821562000399579182015b82811115620003995782518255916020019190600101906200037c565b50620003a7929150620003ab565b5090565b5b80821115620003a75760008155600101620003ac565b80516001600160a01b0381168114620003da57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200040057600080fd5b6200040b8b620003c2565b99506200041b60208c01620003c2565b98506200042b60408c01620003c2565b97506200043b60608c01620003c2565b96506200044b60808c01620003c2565b95506200045b60a08c01620003c2565b94506200046b60c08c01620003c2565b93506200047b60e08c01620003c2565b92506200048c6101008c01620003c2565b91506200049d6101208c01620003c2565b90509295989b9194979a5092959850565b6000825160005b81811015620004d15760208186018101518583015201620004b5565b81811115620004e1576000828501525b509190910192915050565b600060208284031215620004ff57600080fd5b815180151581146200051057600080fd5b9392505050565b600181811c908216806200052c57607f821691505b602082108114156200054e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612018620005cd600039600061123b015260008181611053015281816110db015281816111aa01528181611302015261138e015260008181610fe3015261173e0152600081816106780152818161070901528181610ef2015281816115b8015261198201526120186000f3fe6080604052600436106101835760003560e01c8063817f6481116100d6578063bf7e214f1161007f578063e616916a11610059578063e616916a14610438578063e63a391f1461044e578063f3fef3a31461046557600080fd5b8063bf7e214f146103d2578063c901761d146103f2578063ddc632621461040857600080fd5b80639c769787116100b05780639c7697871461037d578063b6b55f2514610392578063b7e78648146103b257600080fd5b8063817f6481146103275780639501dc8714610347578063987f56ff1461036757600080fd5b806361d027b31161013857806378289ed21161011257806378289ed2146102dd57806378767d05146102f25780637a9e5e4b1461030757600080fd5b806361d027b3146102875780636bd0fd0f146102a7578063739a4a37146102c757600080fd5b806310a18de21161016957806310a18de2146102255780631d2528fc146102455780635a762d641461026557600080fd5b806202fcd3146101c4578063089fe6aa1461020157600080fd5b366101bf5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156101d057600080fd5b506007546101e4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020d57600080fd5b5061021760045481565b6040519081526020016101f8565b34801561023157600080fd5b506005546101e4906001600160a01b031681565b34801561025157600080fd5b506006546101e4906001600160a01b031681565b34801561027157600080fd5b50610285610280366004611c4a565b610485565b005b34801561029357600080fd5b506002546101e4906001600160a01b031681565b3480156102b357600080fd5b506102856102c2366004611c6e565b61055c565b3480156102d357600080fd5b5061021761271081565b3480156102e957600080fd5b50610217610660565b3480156102fe57600080fd5b506102176106f1565b34801561031357600080fd5b50610285610322366004611c4a565b610740565b34801561033357600080fd5b506008546101e4906001600160a01b031681565b34801561035357600080fd5b50610285610362366004611c6e565b610836565b34801561037357600080fd5b50610217600a5481565b34801561038957600080fd5b50610285610943565b34801561039e57600080fd5b506102856103ad366004611c6e565b610c19565b3480156103be57600080fd5b506102856103cd366004611c4a565b610d38565b3480156103de57600080fd5b506001546101e4906001600160a01b031681565b3480156103fe57600080fd5b5061021760095481565b34801561041457600080fd5b50610428610423366004611c6e565b610e06565b60405190151581526020016101f8565b34801561044457600080fd5b5061021760035481565b34801561045a57600080fd5b50610217620f424081565b34801561047157600080fd5b50610285610480366004611c87565b611445565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906105395760405162461bcd60e51b81526004016105309190611cd0565b60405180910390fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611cb3565b6001600160a01b0316336001600160a01b0316146000906106075760405162461bcd60e51b81526004016105309190611cd0565b50620f424081111561065b5760405162461bcd60e51b815260206004820152601f60248201527f56616c7565206d757374206265206265747765656e203020616e6420316536006044820152606401610530565b600355565b60405163389e92a560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063389e92a5906024015b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611d78565b905090565b60405163f5f1595d60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5f1595d906024016106ab565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190611cb3565b6001600160a01b0316336001600160a01b0316146000906107eb5760405162461bcd60e51b81526004016105309190611cd0565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611cb3565b6001600160a01b0316336001600160a01b0316146000906108e15760405162461bcd60e51b81526004016105309190611cd0565b5061271081111561093e5760405162461bcd60e51b815260206004820152602160248201527f56616c7565206d757374206265206265747765656e203020616e6420313030306044820152600360fc1b6064820152608401610530565b600455565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cb3565b6001600160a01b0316336001600160a01b0316146000906109ee5760405162461bcd60e51b81526004016105309190611cd0565b506001546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611cb3565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a205661756c74000000000000000000000000006044820152606401610530565b6002546001546040805163fbfa77cf60e01b815290516001600160a01b03938416939092169163fbfa77cf916004808201926020929091908290030181865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611cb3565b6001600160a01b03161415610b805760405162461bcd60e51b815260206004820152600960248201527f4e6f206368616e676500000000000000000000000000000000000000000000006044820152606401610530565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190611cb3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611cb3565b6001600160a01b0316336001600160a01b031614600090610cc45760405162461bcd60e51b81526004016105309190611cd0565b5060025460075460405162b0eee360e41b81526001600160a01b03918216600482015260248101849052911690630b0eee3090604401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050610d3581611959565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611cb3565b6001600160a01b0316336001600160a01b031614600090610de35760405162461bcd60e51b81526004016105309190611cd0565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611cb3565b6001600160a01b0316336001600160a01b031614600090610ea85760405162461bcd60e51b81526004016105309190611cd0565b506000610eb3610660565b90506000610ebf6106f1565b905081158015610ecd575080155b15610edc575060009392505050565b604051632e54bf9560e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190611d78565b905080156110485760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050505b47600081156112d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d78565b600354909150156112d7576000620f42406003548361116f9190611da7565b6111799190611dc6565b905060006111878a83611da7565b6040805160a0810182526004546005546007546bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b821660c087015260d4860185905292831b811660f4860152610108850193909352901b16610128820152815180820361011c01815261013c820183528152306020820152919250600091908101611226426019611de8565b815260200184815260200183815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59836040518263ffffffff1660e01b81526004016112859190611e30565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611d78565b11156112d357600194505b5050505b505b60035415806112e55750805b156113b9576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190611d78565b905080156113b7576002546113b7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611a07565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190611d78565b905080156114375761143781611959565b506001979650505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906114f05760405162461bcd60e51b81526004016105309190611cd0565b506007546001600160a01b038381169116148061151a57506008546001600160a01b038381169116145b61158c5760405162461bcd60e51b815260206004820152603060248201527f746f6b656e206164647265737320646f6573206e6f74206d61746368204c555360448201527f44206e6f72204c51545920746f6b656e000000000000000000000000000000006064820152608401610530565b6007546001600160a01b038381169116141561172857604051632e54bf9560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611d78565b905060006116958483611b30565b90506116a382826000611bc0565b60025460405163bc157ac160e01b8152600481018490526001600160a01b038681166024830152604482018490529091169063bc157ac1906064016020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190611d78565b5050505050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611d78565b60025490915061182a906001600160a01b03858116911683611a07565b505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908716916118a19190611ea0565b6000604051808303816000865af19150503d80600081146118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b509150915081801561190d57508051158061190d57508080602001905181019061190d9190611ebc565b6117215760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610530565b600654604051635f788d6560e01b8152600481018390526001600160a01b0391821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690635f788d6590604401600060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b5050600754600092506119f991506001600160a01b031683611b30565b905061182c82826001611bc0565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611a789190611ea0565b6000604051808303816000865af19150503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5091509150818015611ae4575080511580611ae4575080806020019051810190611ae49190611ebc565b6117215760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610530565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190611ede565b611b9f90600a611fe5565b611bad83633b9aca00611da7565b611bb79190611dc6565b90505b92915050565b8015611bed5782600a54611bd49190611de8565b600a55600954611be5908390611de8565b60095561182a565b600a54831015611c0d5782600a54611c059190611ff4565b600a55611c13565b6000600a555b600954821015611c2b5781600954611be59190611ff4565b6000600955505050565b6001600160a01b0381168114610d3557600080fd5b600060208284031215611c5c57600080fd5b8135611c6781611c35565b9392505050565b600060208284031215611c8057600080fd5b5035919050565b60008060408385031215611c9a57600080fd5b8235611ca581611c35565b946020939093013593505050565b600060208284031215611cc557600080fd5b8151611c6781611c35565b600060208083526000845481600182811c915080831680611cf257607f831692505b858310811415611d1057634e487b7160e01b85526022600452602485fd5b878601838152602001818015611d2d5760018114611d3e57611d69565b60ff19861682528782019650611d69565b60008b81526020902060005b86811015611d6357815484820152908501908901611d4a565b83019750505b50949998505050505050505050565b600060208284031215611d8a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dc157611dc1611d91565b500290565b600082611de357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611dfb57611dfb611d91565b500190565b60005b83811015611e1b578181015183820152602001611e03565b83811115611e2a576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611e588160e0860160208501611e00565b6001600160a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60008251611eb2818460208701611e00565b9190910192915050565b600060208284031215611ece57600080fd5b81518015158114611c6757600080fd5b600060208284031215611ef057600080fd5b815160ff81168114611c6757600080fd5b600181815b80851115611f3c578160001904821115611f2257611f22611d91565b80851615611f2f57918102915b93841c9390800290611f06565b509250929050565b600082611f5357506001611bba565b81611f6057506000611bba565b8160018114611f765760028114611f8057611f9c565b6001915050611bba565b60ff841115611f9157611f91611d91565b50506001821b611bba565b5060208310610133831016604e8410600b8410161715611fbf575081810a611bba565b611fc98383611f01565b8060001904821115611fdd57611fdd611d91565b029392505050565b6000611bb760ff841683611f44565b60008282101561200657612006611d91565b50039056fea164736f6c634300080a000a",
          "opcodes": "PUSH2 0x140 PUSH1 0x40 MSTORE PUSH1 0xC PUSH2 0x100 DUP2 SWAP1 MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH2 0x120 SWAP1 DUP2 MSTORE PUSH3 0x32 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH3 0x31C JUMP JUMPDEST POP PUSH3 0x50910 PUSH1 0x3 SSTORE PUSH2 0xBB8 PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x25E5 CODESIZE SUB DUP1 PUSH3 0x25E5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x70 SWAP2 PUSH3 0x3DF JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD DUP12 SWAP2 SWAP1 PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP4 SSTORE PUSH1 0x7 DUP1 SLOAD DUP4 AND DUP13 DUP6 AND OR SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP4 AND DUP12 DUP6 AND OR SWAP1 SSTORE DUP9 DUP4 AND PUSH1 0x80 MSTORE DUP8 DUP4 AND PUSH1 0xA0 MSTORE PUSH1 0x6 DUP1 SLOAD DUP4 AND DUP9 DUP6 AND OR SWAP1 SSTORE DUP6 DUP4 AND PUSH1 0xC0 DUP2 SWAP1 MSTORE PUSH1 0x5 DUP1 SLOAD SWAP1 SWAP4 AND DUP7 DUP6 AND OR SWAP1 SWAP3 SSTORE SWAP2 DUP4 AND PUSH1 0xE0 MSTORE PUSH3 0x142 SWAP2 PUSH1 0x0 NOT PUSH3 0x203 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1830 OR SWAP1 SHR JUMP JUMPDEST PUSH3 0x16D PUSH1 0xE0 MLOAD PUSH1 0x0 NOT PUSH1 0xC0 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x203 PUSH1 0x20 SHL PUSH3 0x1830 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x7 SLOAD PUSH3 0x199 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 NOT PUSH3 0x203 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1830 OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x7 SLOAD PUSH3 0x1C6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND PUSH1 0x0 NOT PUSH3 0x203 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1830 OR SWAP1 SHR JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x8 SLOAD PUSH3 0x1F3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND PUSH1 0x0 NOT PUSH3 0x203 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1830 OR SWAP1 SHR JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP PUSH3 0x554 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH3 0x261 SWAP2 SWAP1 PUSH3 0x4AE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH3 0x2A0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH3 0x2A5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH3 0x2D3 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH3 0x2D3 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH3 0x2D3 SWAP2 SWAP1 PUSH3 0x4EC JUMP JUMPDEST PUSH3 0x315 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1054141493D59157D19052531151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x32A SWAP1 PUSH3 0x517 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x34E JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x399 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x369 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x399 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x399 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x399 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x37C JUMP JUMPDEST POP PUSH3 0x3A7 SWAP3 SWAP2 POP PUSH3 0x3AB JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3A7 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3AC JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH3 0x400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x40B DUP12 PUSH3 0x3C2 JUMP JUMPDEST SWAP10 POP PUSH3 0x41B PUSH1 0x20 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP9 POP PUSH3 0x42B PUSH1 0x40 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP8 POP PUSH3 0x43B PUSH1 0x60 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP7 POP PUSH3 0x44B PUSH1 0x80 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP6 POP PUSH3 0x45B PUSH1 0xA0 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP5 POP PUSH3 0x46B PUSH1 0xC0 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP4 POP PUSH3 0x47B PUSH1 0xE0 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP3 POP PUSH3 0x48C PUSH2 0x100 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP2 POP PUSH3 0x49D PUSH2 0x120 DUP13 ADD PUSH3 0x3C2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP12 SWAP2 SWAP5 SWAP8 SWAP11 POP SWAP3 SWAP6 SWAP9 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4D1 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH3 0x4B5 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x4E1 JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x4FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x52C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x54E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x2018 PUSH3 0x5CD PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x123B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1053 ADD MSTORE DUP2 DUP2 PUSH2 0x10DB ADD MSTORE DUP2 DUP2 PUSH2 0x11AA ADD MSTORE DUP2 DUP2 PUSH2 0x1302 ADD MSTORE PUSH2 0x138E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0xFE3 ADD MSTORE PUSH2 0x173E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x678 ADD MSTORE DUP2 DUP2 PUSH2 0x709 ADD MSTORE DUP2 DUP2 PUSH2 0xEF2 ADD MSTORE DUP2 DUP2 PUSH2 0x15B8 ADD MSTORE PUSH2 0x1982 ADD MSTORE PUSH2 0x2018 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x183 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x817F6481 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xBF7E214F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE616916A GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE616916A EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xE63A391F EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xC901761D EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0xDDC63262 EQ PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C769787 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x9C769787 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xB7E78648 EQ PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x817F6481 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x9501DC87 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x987F56FF EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61D027B3 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x78289ED2 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x78289ED2 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x78767D05 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x6BD0FD0F EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x739A4A37 EQ PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10A18DE2 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x10A18DE2 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x1D2528FC EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x5A762D64 EQ PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x2FCD3 EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1BF JUMPI PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x2C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x660 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x6F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x943 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3CD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0xD38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x428 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH3 0xF4240 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x1445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FC SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH3 0xF4240 DUP2 GT ISZERO PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56616C7565206D757374206265206265747765656E203020616E642031653600 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x389E92A5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x389E92A5 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF5F1595D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5F1595D SWAP1 PUSH1 0x24 ADD PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B7 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x889 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AD SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x8E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56616C7565206D757374206265206265747765656E203020616E642031303030 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9BA SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x9EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFA77CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xFBFA77CF SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5A65726F20616464726573733A205661756C7400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFA77CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0xFBFA77CF SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB29 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xB80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206368616E67650000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBD3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBF7 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH3 0xB0EEE3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0xB0EEE30 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD35 DUP2 PUSH2 0x1959 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAF SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xDE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2295499 PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x452A9320 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE74 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xEA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEB3 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBF PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xECD JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xEDC JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E54BF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E54BF95 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFC5 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1048 JUMPI PUSH1 0x40 MLOAD PUSH4 0x534A7E1D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA694FC3A SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x102F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1043 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST SELFBALANCE PUSH1 0x0 DUP2 ISZERO PUSH2 0x12D9 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 POP PUSH4 0x70A08231 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1150 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 PUSH3 0xF4240 PUSH1 0x3 SLOAD DUP4 PUSH2 0x116F SWAP2 SWAP1 PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x1179 SWAP2 SWAP1 PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1187 DUP11 DUP4 PUSH2 0x1DA7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x7 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH32 0x0 PUSH1 0x60 SWAP1 DUP2 SHL DUP3 AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xD4 DUP7 ADD DUP6 SWAP1 MSTORE SWAP3 DUP4 SHL DUP2 AND PUSH1 0xF4 DUP7 ADD MSTORE PUSH2 0x108 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 SHL AND PUSH2 0x128 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB PUSH2 0x11C ADD DUP2 MSTORE PUSH2 0x13C DUP3 ADD DUP4 MSTORE DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 ADD PUSH2 0x1226 TIMESTAMP PUSH1 0x19 PUSH2 0x1DE8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC04B8D59 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1285 SWAP2 SWAP1 PUSH2 0x1E30 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12C8 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST GT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x1 SWAP5 POP JUMPDEST POP POP POP JUMPDEST POP JUMPDEST PUSH1 0x3 SLOAD ISZERO DUP1 PUSH2 0x12E5 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x13B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1375 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x2 SLOAD PUSH2 0x13B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP4 PUSH2 0x1A07 JUMP JUMPDEST POP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1402 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1426 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1437 JUMPI PUSH2 0x1437 DUP2 PUSH2 0x1959 JUMP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1498 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14BC SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 0x151A JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST PUSH2 0x158C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E206164647265737320646F6573206E6F74206D61746368204C5553 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x44206E6F72204C51545920746F6B656E00000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1728 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E54BF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E54BF95 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1663 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1687 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1695 DUP5 DUP4 PUSH2 0x1B30 JUMP JUMPDEST SWAP1 POP PUSH2 0x16A3 DUP3 DUP3 PUSH1 0x0 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBC157AC1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xBC157AC1 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5C2FBCF PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E17DE78 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x178A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x179E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x180D SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH2 0x182A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND DUP4 PUSH2 0x1A07 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x18A1 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18DE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x190D JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x190D JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x190D SWAP2 SWAP1 PUSH2 0x1EBC JUMP JUMPDEST PUSH2 0x1721 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x415050524F56455F4641494C4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F788D65 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5F788D65 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH1 0x0 SWAP3 POP PUSH2 0x19F9 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1B30 JUMP JUMPDEST SWAP1 POP PUSH2 0x182C DUP3 DUP3 PUSH1 0x1 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x1A78 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1AB5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1AE4 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1AE4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x1EBC JUMP JUMPDEST PUSH2 0x1721 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B94 SWAP2 SWAP1 PUSH2 0x1EDE JUMP JUMPDEST PUSH2 0x1B9F SWAP1 PUSH1 0xA PUSH2 0x1FE5 JUMP JUMPDEST PUSH2 0x1BAD DUP4 PUSH4 0x3B9ACA00 PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x1BB7 SWAP2 SWAP1 PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1BED JUMPI DUP3 PUSH1 0xA SLOAD PUSH2 0x1BD4 SWAP2 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0xA SSTORE PUSH1 0x9 SLOAD PUSH2 0x1BE5 SWAP1 DUP4 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x182A JUMP JUMPDEST PUSH1 0xA SLOAD DUP4 LT ISZERO PUSH2 0x1C0D JUMPI DUP3 PUSH1 0xA SLOAD PUSH2 0x1C05 SWAP2 SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST PUSH1 0xA SSTORE PUSH2 0x1C13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SSTORE JUMPDEST PUSH1 0x9 SLOAD DUP3 LT ISZERO PUSH2 0x1C2B JUMPI DUP2 PUSH1 0x9 SLOAD PUSH2 0x1BE5 SWAP2 SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C67 DUP2 PUSH2 0x1C35 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CA5 DUP2 PUSH2 0x1C35 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C67 DUP2 PUSH2 0x1C35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1CF2 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST DUP6 DUP4 LT DUP2 EQ ISZERO PUSH2 0x1D10 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP8 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP2 DUP1 ISZERO PUSH2 0x1D2D JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1D3E JUMPI PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP3 MSTORE DUP8 DUP3 ADD SWAP7 POP PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1D63 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP10 ADD PUSH2 0x1D4A JUMP JUMPDEST DUP4 ADD SWAP8 POP POP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1DC1 JUMPI PUSH2 0x1DC1 PUSH2 0x1D91 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DE3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1DFB PUSH2 0x1D91 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E1B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E03 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1E2A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE DUP1 MLOAD DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x1E58 DUP2 PUSH1 0xE0 DUP7 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x1E00 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xE0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EB2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E00 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1F3C JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F22 JUMPI PUSH2 0x1F22 PUSH2 0x1D91 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1F2F JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1F06 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F53 JUMPI POP PUSH1 0x1 PUSH2 0x1BBA JUMP JUMPDEST DUP2 PUSH2 0x1F60 JUMPI POP PUSH1 0x0 PUSH2 0x1BBA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1F76 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1F80 JUMPI PUSH2 0x1F9C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1BBA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1F91 JUMPI PUSH2 0x1F91 PUSH2 0x1D91 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1BBA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1FBF JUMPI POP DUP2 DUP2 EXP PUSH2 0x1BBA JUMP JUMPDEST PUSH2 0x1FC9 DUP4 DUP4 PUSH2 0x1F01 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1FDD JUMPI PUSH2 0x1FDD PUSH2 0x1D91 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BB7 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1F44 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2006 JUMPI PUSH2 0x2006 PUSH2 0x1D91 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP EXP ",
          "sourceMap": "269:36:37:-:0;582:12988:2;269:36:37;;582:12988:2;269:36:37;;;-1:-1:-1;;;269:36:37;;;;;;-1:-1:-1;;269:36:37;;:::i;:::-;;1465:6:2;1433:38;;1892:4;1867:29;;2743:1290;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;511:9:37;:22;;-1:-1:-1;;;;;;511:22:37;-1:-1:-1;;;;;511:22:37;;;;;;;;548:28;;511:22;;;548:28;;-1:-1:-1;;548:28:37;-1:-1:-1;3145:8:2::1;:31:::0;;-1:-1:-1;;;;;;3145:31:2;;::::1;-1:-1:-1::0;;;;;3145:31:2;;::::1;::::0;;::::1;::::0;;;3186:16:::1;:36:::0;;;::::1;::::0;;::::1;;::::0;;3232:16:::1;:36:::0;;;::::1;::::0;;::::1;;::::0;;3278:50;;::::1;;::::0;3338:40;;::::1;;::::0;3388:15:::1;:34:::0;;;::::1;::::0;;::::1;;::::0;;3452:26;;::::1;;::::0;;;3488:15:::1;:34:::0;;;;::::1;::::0;;::::1;;::::0;;;3552:42;;::::1;;::::0;3645:54:::1;::::0;-1:-1:-1;;3645:16:2::1;;::::0;;::::1;;;:54:::0;::::1;:::i;:::-;3709:56;3734:10;;-1:-1:-1::0;;3709:4:2::1;;-1:-1:-1::0;;;;;3709:16:2::1;;;;;;;:56;;;;;:::i;:::-;3820:17;::::0;3782:16:::1;::::0;3775:83:::1;::::0;-1:-1:-1;;;;;3782:16:2;;::::1;::::0;-1:-1:-1;;3775:36:2::1;;::::0;;::::1;;;:83:::0;::::1;:::i;:::-;3913:8;::::0;3875:16:::1;::::0;3868:74:::1;::::0;-1:-1:-1;;;;;3875:16:2;;::::1;::::0;3913:8:::1;-1:-1:-1::0;;3868:36:2::1;;::::0;;::::1;;;:74:::0;::::1;:::i;:::-;3997:8;::::0;3959:16:::1;::::0;3952:74:::1;::::0;-1:-1:-1;;;;;3959:16:2;;::::1;::::0;3997:8:::1;-1:-1:-1::0;;3952:36:2::1;;::::0;;::::1;;;:74:::0;::::1;:::i;:::-;2743:1290:::0;;;;;;;;;;582:12988;;1153:352:31;1334:59;;;-1:-1:-1;;;;;1373:32:41;;;1334:59:31;;;1355:51:41;1422:18;;;;1415:34;;;1334:59:31;;;;;;;;;;1328:18:41;;;;1334:59:31;;;;;;;-1:-1:-1;;;;;1334:59:31;-1:-1:-1;;;1334:59:31;;;1301:102;;-1:-1:-1;;;;1301:19:31;;;;:102;;1334:59;1301:102;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1265:138;;;;1422:7;:57;;;;-1:-1:-1;1434:11:31;;:16;;:44;;;1465:4;1454:24;;;;;;;;;;;;:::i;:::-;1414:84;;;;-1:-1:-1;;;1414:84:31;;2375:2:41;1414:84:31;;;2357:21:41;2414:2;2394:18;;;2387:30;-1:-1:-1;;;2433:18:41;;;2426:44;2487:18;;1414:84:31;;;;;;;;1255:250;;1153:352;;;:::o;582:12988:2:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;582:12988:2;;;-1:-1:-1;582:12988:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:41;93:13;;-1:-1:-1;;;;;135:31:41;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:980::-;347:6;355;363;371;379;387;395;403;411;419;472:3;460:9;451:7;447:23;443:33;440:53;;;489:1;486;479:12;440:53;512:40;542:9;512:40;:::i;:::-;502:50;;571:49;616:2;605:9;601:18;571:49;:::i;:::-;561:59;;639:49;684:2;673:9;669:18;639:49;:::i;:::-;629:59;;707:49;752:2;741:9;737:18;707:49;:::i;:::-;697:59;;775:50;820:3;809:9;805:19;775:50;:::i;:::-;765:60;;844:50;889:3;878:9;874:19;844:50;:::i;:::-;834:60;;913:50;958:3;947:9;943:19;913:50;:::i;:::-;903:60;;982:50;1027:3;1016:9;1012:19;982:50;:::i;:::-;972:60;;1051:50;1096:3;1085:9;1081:19;1051:50;:::i;:::-;1041:60;;1120:50;1165:3;1154:9;1150:19;1120:50;:::i;:::-;1110:60;;196:980;;;;;;;;;;;;;:::o;1460:426::-;1589:3;1627:6;1621:13;1652:1;1662:129;1676:6;1673:1;1670:13;1662:129;;;1774:4;1758:14;;;1754:25;;1748:32;1735:11;;;1728:53;1691:12;1662:129;;;1809:6;1806:1;1803:13;1800:48;;;1844:1;1835:6;1830:3;1826:16;1819:27;1800:48;-1:-1:-1;1864:16:41;;;;;1460:426;-1:-1:-1;;1460:426:41:o;1891:277::-;1958:6;2011:2;1999:9;1990:7;1986:23;1982:32;1979:52;;;2027:1;2024;2017:12;1979:52;2059:9;2053:16;2112:5;2105:13;2098:21;2091:5;2088:32;2078:60;;2134:1;2131;2124:12;2078:60;2157:5;1891:277;-1:-1:-1;;;1891:277:41:o;2516:380::-;2595:1;2591:12;;;;2638;;;2659:61;;2713:4;2705:6;2701:17;2691:27;;2659:61;2766:2;2758:6;2755:14;2735:18;2732:38;2729:161;;;2812:10;2807:3;2803:20;2800:1;2793:31;2847:4;2844:1;2837:15;2875:4;2872:1;2865:15;2729:161;;2516:380;;;:::o;:::-;582:12988:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@FEE_PRECISION_1618": {
              "entryPoint": null,
              "id": 1618,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@POOL_FEE_MAX_1621": {
              "entryPoint": null,
              "id": 1621,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_1801": {
              "entryPoint": null,
              "id": 1801,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_accountingFor_2317": {
              "entryPoint": 7104,
              "id": 2317,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_depositLUSD_2258": {
              "entryPoint": 6489,
              "id": 2258,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_tokenValue_2349": {
              "entryPoint": 6960,
              "id": 2349,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@authority_8897": {
              "entryPoint": null,
              "id": 8897,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@deposit_2136": {
              "entryPoint": 3097,
              "id": 2136,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@ethToLUSDRatio_1625": {
              "entryPoint": null,
              "id": 1625,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@frontEndAddress_1633": {
              "entryPoint": null,
              "id": 1633,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@getETHRewards_2364": {
              "entryPoint": 1632,
              "id": 2364,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getLQTYRewards_2379": {
              "entryPoint": 1777,
              "id": 2379,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@harvest_2116": {
              "entryPoint": 3590,
              "id": 2116,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@hopTokenAddress_1631": {
              "entryPoint": null,
              "id": 1631,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lqtyTokenAddress_1637": {
              "entryPoint": null,
              "id": 1637,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@lusdTokenAddress_1635": {
              "entryPoint": null,
              "id": 1635,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@poolFee_1629": {
              "entryPoint": null,
              "id": 1629,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeApprove_5097": {
              "entryPoint": 6192,
              "id": 5097,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransfer_5048": {
              "entryPoint": 6663,
              "id": 5048,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@setAuthority_8985": {
              "entryPoint": 1856,
              "id": 8985,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setEthToLUSDRatio_1820": {
              "entryPoint": 1372,
              "id": 1820,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setFrontEndAddress_1864": {
              "entryPoint": 3384,
              "id": 1864,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setHopTokenAddress_1851": {
              "entryPoint": 1157,
              "id": 1851,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setPoolFee_1839": {
              "entryPoint": 2102,
              "id": 1839,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@totalAmountDeployed_1641": {
              "entryPoint": null,
              "id": 1641,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@totalValueDeployed_1639": {
              "entryPoint": null,
              "id": 1639,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@treasury_1615": {
              "entryPoint": null,
              "id": 1615,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@updateTreasury_1905": {
              "entryPoint": 2371,
              "id": 1905,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@withdraw_2232": {
              "entryPoint": 5189,
              "id": 2232,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 7242,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 7347,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 7303,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 7868,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_contract$_IOlympusAuthority_$3925": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 7278,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 7544,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint8_fromMemory": {
              "entryPoint": 7902,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_address_t_uint256_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address_t_uint256_t_address__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 7840,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_IOlympusAuthority_$3925__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_ITreasury_$4114__to_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 7376,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0ea3c9f0a14049977c34f839ec879730f68f6036454424fff046a4ae8525dcf9__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3038bb07aef9745904aca89049d06dc861b6414b539cee3bf3df050e26d8eeab__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3c27be6c0ae2d50e729c76b14fe6b592004eb3a78cfab3f63836408451f1dcab__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_500d4d867eb3790b476806a58c3e4af387f1b32a2e11573f474cc97641c03124__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_71ee5fabd759b8fb413bb088b1fd8c7cdeee3e9158040cc262465972d0aacfa6__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_ExactInputParams_$3208_memory_ptr__to_t_struct$_ExactInputParams_$3208_memory_ptr__fromStack_reversed": {
              "entryPoint": 7728,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_string": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 7656,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 7622,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_helper": {
              "entryPoint": 7937,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "checked_exp_t_uint256_t_uint8": {
              "entryPoint": 8165,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_exp_unsigned": {
              "entryPoint": 8004,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 7591,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 8180,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 7680,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "panic_error_0x11": {
              "entryPoint": 7569,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "validator_revert_address": {
              "entryPoint": 7221,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:12602:41",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:41",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "115:76:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "125:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "137:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "148:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "133:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "133:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "125:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "167:9:41"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "178:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "160:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "160:25:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "160:25:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "84:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "95:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "106:4:41",
                        "type": ""
                      }
                    ],
                    "src": "14:177:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "297:125:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "307:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "319:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "330:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "315:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "315:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "307:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "349:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "364:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "372:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "360:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "360:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "342:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "342:74:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "342:74:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "266:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "277:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "288:4:41",
                        "type": ""
                      }
                    ],
                    "src": "196:226:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "472:109:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "559:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "568:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "571:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "561:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "561:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "561:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "495:5:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "506:5:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "513:42:41",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "502:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "502:54:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "492:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "492:65:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "485:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "485:73:41"
                          },
                          "nodeType": "YulIf",
                          "src": "482:93:41"
                        }
                      ]
                    },
                    "name": "validator_revert_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "461:5:41",
                        "type": ""
                      }
                    ],
                    "src": "427:154:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "656:177:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "702:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "711:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "714:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "704:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "704:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "704:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "677:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "686:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "673:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "673:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "698:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "669:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "669:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "666:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "727:36:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "753:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "740:12:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "740:23:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "731:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "797:5:41"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "772:24:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "772:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "772:31:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "812:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "822:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "812:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "622:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "633:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "645:6:41",
                        "type": ""
                      }
                    ],
                    "src": "586:247:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "957:125:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "967:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "979:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "990:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "975:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "975:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "967:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1009:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1024:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1032:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1020:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1020:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1002:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1002:74:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1002:74:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_ITreasury_$4114__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "926:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "937:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "948:4:41",
                        "type": ""
                      }
                    ],
                    "src": "838:244:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1157:110:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1203:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1212:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1215:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1205:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1205:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1205:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1178:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1187:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1174:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1174:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1199:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1170:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1170:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "1167:52:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1228:33:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1251:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1238:12:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1238:23:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1228:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1123:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1134:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1146:6:41",
                        "type": ""
                      }
                    ],
                    "src": "1087:180:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1368:177:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1414:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1423:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1426:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1416:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1416:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1416:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1389:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1398:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1385:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1385:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1410:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1381:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1381:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "1378:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1439:36:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1465:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1452:12:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1452:23:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1443:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1509:5:41"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "1484:24:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1484:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1484:31:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1524:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1534:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1524:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_contract$_IOlympusAuthority_$3925",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1334:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1345:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1357:6:41",
                        "type": ""
                      }
                    ],
                    "src": "1272:273:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1677:125:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1687:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1699:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1710:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1695:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1695:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1687:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1729:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "1744:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1752:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1740:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1740:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1722:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1722:74:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1722:74:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IOlympusAuthority_$3925__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1646:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1657:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1668:4:41",
                        "type": ""
                      }
                    ],
                    "src": "1550:252:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1902:92:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1912:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1924:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1935:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1920:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1920:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "1912:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1954:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "1979:6:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1972:6:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1972:14:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1965:6:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1965:22:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1947:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1947:41:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1947:41:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1871:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1882:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "1893:4:41",
                        "type": ""
                      }
                    ],
                    "src": "1807:187:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2086:228:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2132:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2141:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2144:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2134:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2134:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2134:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2107:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2116:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2103:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2103:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2128:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2099:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2099:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "2096:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2157:36:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2183:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2170:12:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2170:23:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2161:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2227:5:41"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2202:24:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2202:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2202:31:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2242:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2252:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2242:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2266:42:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2293:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2304:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2289:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2289:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2276:12:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2276:32:41"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2266:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2044:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2055:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2067:6:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2075:6:41",
                        "type": ""
                      }
                    ],
                    "src": "1999:315:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2400:170:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2446:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2455:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2458:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2448:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2448:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2448:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2421:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2430:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2417:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2417:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2442:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2413:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2413:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "2410:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2471:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2490:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2484:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2484:16:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "2475:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2534:5:41"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_address",
                              "nodeType": "YulIdentifier",
                              "src": "2509:24:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2509:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2509:31:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2549:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "2559:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2549:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2366:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2377:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2389:6:41",
                        "type": ""
                      }
                    ],
                    "src": "2319:251:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2652:73:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2669:3:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2674:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2662:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2662:19:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2662:19:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2690:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2709:3:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2714:4:41",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2705:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2705:14:41"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "2690:11:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_string",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2620:3:41",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2625:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "2636:11:41",
                        "type": ""
                      }
                    ],
                    "src": "2575:150:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2786:65:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2803:1:41",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "2806:3:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2796:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2796:14:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2796:14:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2819:26:41",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2837:1:41",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2840:4:41",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nodeType": "YulIdentifier",
                              "src": "2827:9:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2827:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "2819:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_string_storage",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "2769:3:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "2777:4:41",
                        "type": ""
                      }
                    ],
                    "src": "2730:121:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2974:1068:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2984:12:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2994:2:41",
                            "type": "",
                            "value": "32"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "2988:2:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3012:9:41"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3023:2:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3005:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3005:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3005:21:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3035:12:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3046:1:41",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "ret",
                              "nodeType": "YulTypedName",
                              "src": "3039:3:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3056:30:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "3079:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "sload",
                              "nodeType": "YulIdentifier",
                              "src": "3073:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3073:13:41"
                          },
                          "variables": [
                            {
                              "name": "slotValue",
                              "nodeType": "YulTypedName",
                              "src": "3060:9:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3095:17:41",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "3109:3:41"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3099:6:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3121:11:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3131:1:41",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "3125:2:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3141:28:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3155:2:41"
                              },
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "3159:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nodeType": "YulIdentifier",
                              "src": "3151:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3151:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "3141:6:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3178:44:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "slotValue",
                                "nodeType": "YulIdentifier",
                                "src": "3208:9:41"
                              },
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "3219:2:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3204:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3204:18:41"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "3182:18:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3261:31:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3263:27:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "3277:6:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3285:4:41",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "3273:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3273:17:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3263:6:41"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "3241:18:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3234:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3234:26:41"
                          },
                          "nodeType": "YulIf",
                          "src": "3231:61:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3351:115:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "3372:3:41"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3381:3:41",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3386:10:41",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3377:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3377:20:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3365:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3365:33:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3365:33:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3418:1:41",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3421:4:41",
                                      "type": "",
                                      "value": "0x22"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3411:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3411:15:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3411:15:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "ret",
                                      "nodeType": "YulIdentifier",
                                      "src": "3446:3:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3451:4:41",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3439:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3439:17:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3439:17:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "3307:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3330:6:41"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3338:2:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "3327:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3327:14:41"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "3304:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3304:38:41"
                          },
                          "nodeType": "YulIf",
                          "src": "3301:165:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3475:74:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3526:9:41"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3537:2:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3522:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3522:18:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3542:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_string",
                              "nodeType": "YulIdentifier",
                              "src": "3486:35:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3486:63:41"
                          },
                          "variables": [
                            {
                              "name": "pos",
                              "nodeType": "YulTypedName",
                              "src": "3479:3:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3599:93:41",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3620:3:41"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "slotValue",
                                              "nodeType": "YulIdentifier",
                                              "src": "3629:9:41"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "3644:3:41",
                                                  "type": "",
                                                  "value": "255"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "not",
                                                "nodeType": "YulIdentifier",
                                                "src": "3640:3:41"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "3640:8:41"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "and",
                                            "nodeType": "YulIdentifier",
                                            "src": "3625:3:41"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3625:24:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mstore",
                                        "nodeType": "YulIdentifier",
                                        "src": "3613:6:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3613:37:41"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3613:37:41"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3663:19:41",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3674:3:41"
                                        },
                                        {
                                          "name": "_1",
                                          "nodeType": "YulIdentifier",
                                          "src": "3679:2:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3670:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3670:12:41"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "3663:3:41"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3592:100:41",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3597:1:41",
                                "type": "",
                                "value": "0"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "3708:308:41",
                                "statements": [
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3722:52:41",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "value0",
                                          "nodeType": "YulIdentifier",
                                          "src": "3767:6:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_string_storage",
                                        "nodeType": "YulIdentifier",
                                        "src": "3737:29:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3737:37:41"
                                    },
                                    "variables": [
                                      {
                                        "name": "dataPos",
                                        "nodeType": "YulTypedName",
                                        "src": "3726:7:41",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "3787:10:41",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3796:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nodeType": "YulTypedName",
                                        "src": "3791:1:41",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "3864:111:41",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "pos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3893:3:41"
                                                  },
                                                  {
                                                    "name": "i",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3898:1:41"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3889:3:41"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3889:11:41"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "dataPos",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "3908:7:41"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "sload",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "3902:5:41"
                                                },
                                                "nodeType": "YulFunctionCall",
                                                "src": "3902:14:41"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mstore",
                                              "nodeType": "YulIdentifier",
                                              "src": "3882:6:41"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3882:35:41"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "3882:35:41"
                                        },
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3934:27:41",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dataPos",
                                                "nodeType": "YulIdentifier",
                                                "src": "3949:7:41"
                                              },
                                              {
                                                "name": "_2",
                                                "nodeType": "YulIdentifier",
                                                "src": "3958:2:41"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3945:3:41"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3945:16:41"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dataPos",
                                              "nodeType": "YulIdentifier",
                                              "src": "3934:7:41"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3821:1:41"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "3824:6:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nodeType": "YulIdentifier",
                                        "src": "3818:2:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3818:13:41"
                                    },
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nodeType": "YulBlock",
                                      "src": "3832:19:41",
                                      "statements": [
                                        {
                                          "nodeType": "YulAssignment",
                                          "src": "3834:15:41",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nodeType": "YulIdentifier",
                                                "src": "3843:1:41"
                                              },
                                              {
                                                "name": "_1",
                                                "nodeType": "YulIdentifier",
                                                "src": "3846:2:41"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "3839:3:41"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "3839:10:41"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3834:1:41"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nodeType": "YulBlock",
                                      "src": "3814:3:41",
                                      "statements": []
                                    },
                                    "src": "3810:165:41"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "3988:18:41",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "pos",
                                          "nodeType": "YulIdentifier",
                                          "src": "3999:3:41"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "4004:1:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3995:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3995:11:41"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "ret",
                                        "nodeType": "YulIdentifier",
                                        "src": "3988:3:41"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "3701:315:41",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3706:1:41",
                                "type": "",
                                "value": "1"
                              }
                            }
                          ],
                          "expression": {
                            "name": "outOfPlaceEncoding",
                            "nodeType": "YulIdentifier",
                            "src": "3565:18:41"
                          },
                          "nodeType": "YulSwitch",
                          "src": "3558:458:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4025:11:41",
                          "value": {
                            "name": "ret",
                            "nodeType": "YulIdentifier",
                            "src": "4033:3:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4025:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2943:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2954:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2965:4:41",
                        "type": ""
                      }
                    ],
                    "src": "2856:1186:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4221:181:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4238:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4249:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4231:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4231:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4231:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4272:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4283:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4268:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4268:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4288:2:41",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4261:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4261:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4261:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4311:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4322:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4307:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4307:18:41"
                              },
                              {
                                "hexValue": "56616c7565206d757374206265206265747765656e203020616e6420316536",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4327:33:41",
                                "type": "",
                                "value": "Value must be between 0 and 1e6"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4300:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4300:61:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4300:61:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4370:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4382:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4393:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4378:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4378:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4370:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_500d4d867eb3790b476806a58c3e4af387f1b32a2e11573f474cc97641c03124__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4198:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4212:4:41",
                        "type": ""
                      }
                    ],
                    "src": "4047:355:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4488:103:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4534:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4543:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "4546:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4536:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4536:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4536:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4509:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4518:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4505:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4505:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4530:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4501:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4501:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "4498:52:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4559:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4575:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4569:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4569:16:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4559:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4454:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4465:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4477:6:41",
                        "type": ""
                      }
                    ],
                    "src": "4407:184:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4770:223:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4787:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4798:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4780:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4780:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4780:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4821:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4832:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4817:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4817:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4837:2:41",
                                "type": "",
                                "value": "33"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4810:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4810:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4810:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4860:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4871:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4856:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4856:18:41"
                              },
                              {
                                "hexValue": "56616c7565206d757374206265206265747765656e203020616e642031303030",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4876:34:41",
                                "type": "",
                                "value": "Value must be between 0 and 1000"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4849:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4849:62:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4849:62:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4931:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4942:2:41",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4927:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4927:18:41"
                              },
                              {
                                "hexValue": "30",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4947:3:41",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4920:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4920:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4920:31:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4960:27:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4972:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4983:3:41",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4968:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4968:19:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4960:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0ea3c9f0a14049977c34f839ec879730f68f6036454424fff046a4ae8525dcf9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4747:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4761:4:41",
                        "type": ""
                      }
                    ],
                    "src": "4596:397:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5172:169:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5189:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5200:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5182:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5182:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5182:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5223:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5234:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5219:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5219:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5239:2:41",
                                "type": "",
                                "value": "19"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5212:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5212:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5212:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5262:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5273:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5258:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5258:18:41"
                              },
                              {
                                "hexValue": "5a65726f20616464726573733a205661756c74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5278:21:41",
                                "type": "",
                                "value": "Zero address: Vault"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5251:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5251:49:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5251:49:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5309:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5321:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5332:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5317:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5317:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5309:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3c27be6c0ae2d50e729c76b14fe6b592004eb3a78cfab3f63836408451f1dcab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5149:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5163:4:41",
                        "type": ""
                      }
                    ],
                    "src": "4998:343:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5520:158:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5537:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5548:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5530:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5530:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5530:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5571:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5582:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5567:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5567:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5587:1:41",
                                "type": "",
                                "value": "9"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5560:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5560:29:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5560:29:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5609:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5620:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5605:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5605:18:41"
                              },
                              {
                                "hexValue": "4e6f206368616e6765",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5625:11:41",
                                "type": "",
                                "value": "No change"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5598:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5598:39:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5598:39:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5646:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5658:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5669:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5654:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5654:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5646:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_71ee5fabd759b8fb413bb088b1fd8c7cdeee3e9158040cc262465972d0aacfa6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5497:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5511:4:41",
                        "type": ""
                      }
                    ],
                    "src": "5346:332:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5812:168:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5822:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5834:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5845:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5830:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5830:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5822:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5864:9:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "5879:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5887:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "5875:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5875:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5857:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5857:74:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5857:74:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5951:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5962:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5947:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5947:18:41"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "5967:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5940:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5940:34:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5940:34:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5773:9:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5784:6:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5792:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5803:4:41",
                        "type": ""
                      }
                    ],
                    "src": "5683:297:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6094:76:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6104:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6116:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6127:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6112:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6112:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6104:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6146:9:41"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6157:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6139:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6139:25:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6139:25:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6063:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6074:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6085:4:41",
                        "type": ""
                      }
                    ],
                    "src": "5985:185:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6207:95:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6224:1:41",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6231:3:41",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6236:10:41",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "6227:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6227:20:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6217:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6217:31:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6217:31:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6264:1:41",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6267:4:41",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6257:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6257:15:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6257:15:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6288:1:41",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6291:4:41",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "6281:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6281:15:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6281:15:41"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6175:127:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6359:116:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6418:22:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "6420:16:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6420:18:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6420:18:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "6390:1:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "6383:6:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6383:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "6376:6:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6376:17:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "6398:1:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6409:1:41",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "6405:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6405:6:41"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "6413:1:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "6401:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6401:14:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6395:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6395:21:41"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "6372:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6372:45:41"
                          },
                          "nodeType": "YulIf",
                          "src": "6369:71:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6449:20:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "6464:1:41"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "6467:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "6460:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6460:9:41"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "6449:7:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "6338:1:41",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "6341:1:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "6347:7:41",
                        "type": ""
                      }
                    ],
                    "src": "6307:168:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6526:171:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6557:111:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6578:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6585:3:41",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "6590:10:41",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "6581:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6581:20:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6571:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6571:31:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6571:31:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6622:1:41",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6625:4:41",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "6615:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6615:15:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6615:15:41"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6650:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6653:4:41",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6643:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6643:15:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6643:15:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "6546:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6539:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6539:9:41"
                          },
                          "nodeType": "YulIf",
                          "src": "6536:132:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6677:14:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "6686:1:41"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "6689:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "6682:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6682:9:41"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "6677:1:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "6511:1:41",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "6514:1:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "6520:1:41",
                        "type": ""
                      }
                    ],
                    "src": "6480:217:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6933:317:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6943:41:41",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6957:26:41",
                                "type": "",
                                "value": "0xffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "6953:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6953:31:41"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "6947:2:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7000:3:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7013:2:41",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7017:6:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7009:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7009:15:41"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7026:2:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7005:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7005:24:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6993:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6993:37:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6993:37:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7050:3:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7055:2:41",
                                    "type": "",
                                    "value": "20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7046:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7046:12:41"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7060:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7039:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7039:28:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7039:28:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7087:3:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7092:2:41",
                                    "type": "",
                                    "value": "52"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7083:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7083:12:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7105:2:41",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value2",
                                        "nodeType": "YulIdentifier",
                                        "src": "7109:6:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7101:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7101:15:41"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7118:2:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7097:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7097:24:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7076:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7076:46:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7076:46:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7142:3:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7147:2:41",
                                    "type": "",
                                    "value": "72"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7138:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7138:12:41"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "7152:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7131:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7131:28:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7131:28:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7179:3:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7184:3:41",
                                    "type": "",
                                    "value": "104"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7175:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7175:13:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7198:2:41",
                                        "type": "",
                                        "value": "96"
                                      },
                                      {
                                        "name": "value4",
                                        "nodeType": "YulIdentifier",
                                        "src": "7202:6:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "7194:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7194:15:41"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "7211:2:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7190:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7190:24:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7168:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7168:47:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7168:47:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7224:20:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7235:3:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7240:3:41",
                                "type": "",
                                "value": "124"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7231:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7231:13:41"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "7224:3:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_address_t_uint256_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address_t_uint256_t_address__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6877:3:41",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "6882:6:41",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "6890:6:41",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "6898:6:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6906:6:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6914:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6925:3:41",
                        "type": ""
                      }
                    ],
                    "src": "6702:548:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7303:80:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7330:22:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "7332:16:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7332:18:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7332:18:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "7319:1:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "7326:1:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "7322:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7322:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7316:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7316:13:41"
                          },
                          "nodeType": "YulIf",
                          "src": "7313:39:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7361:16:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "7372:1:41"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "7375:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7368:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7368:9:41"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "7361:3:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "7286:1:41",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "7289:1:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "7295:3:41",
                        "type": ""
                      }
                    ],
                    "src": "7255:128:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7441:205:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7451:10:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "7460:1:41",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "7455:1:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7520:63:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "7545:3:41"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "7550:1:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7541:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7541:11:41"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "7564:3:41"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "7569:1:41"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "7560:3:41"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "7560:11:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "7554:5:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7554:18:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7534:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7534:39:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7534:39:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "7481:1:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7484:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "7478:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7478:13:41"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "7492:19:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "7494:15:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "7503:1:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7506:2:41",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "7499:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7499:10:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "7494:1:41"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "7474:3:41",
                            "statements": []
                          },
                          "src": "7470:113:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7609:31:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "7622:3:41"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "7627:6:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "7618:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "7618:16:41"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "7636:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "7611:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7611:27:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7611:27:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "7598:1:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7601:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7595:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7595:13:41"
                          },
                          "nodeType": "YulIf",
                          "src": "7592:48:41"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "7419:3:41",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "7424:3:41",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "7429:6:41",
                        "type": ""
                      }
                    ],
                    "src": "7388:258:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7820:649:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7837:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7848:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7830:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7830:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7830:21:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7860:33:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "7886:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7880:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7880:13:41"
                          },
                          "variables": [
                            {
                              "name": "memberValue0",
                              "nodeType": "YulTypedName",
                              "src": "7864:12:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7913:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7924:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7909:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7909:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7929:4:41",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7902:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7902:32:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7902:32:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "7943:33:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "memberValue0",
                                "nodeType": "YulIdentifier",
                                "src": "7963:12:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "7957:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7957:19:41"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "7947:6:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7996:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8007:3:41",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7992:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7992:19:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8013:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7985:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7985:35:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7985:35:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8055:12:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8069:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8051:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8051:21:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8078:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8089:3:41",
                                    "type": "",
                                    "value": "224"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8074:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8074:19:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8095:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "8029:21:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8029:73:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8029:73:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8122:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8133:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8118:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8118:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value0",
                                            "nodeType": "YulIdentifier",
                                            "src": "8152:6:41"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8160:2:41",
                                            "type": "",
                                            "value": "32"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8148:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8148:15:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nodeType": "YulIdentifier",
                                      "src": "8142:5:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8142:22:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8166:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8138:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8138:71:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8111:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8111:99:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8111:99:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8230:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8241:2:41",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8226:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8226:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8256:6:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8264:2:41",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8252:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8252:15:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8246:5:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8246:22:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8219:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8219:50:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8219:50:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8289:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8300:3:41",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8285:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8285:19:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8316:6:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8324:2:41",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8312:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8312:15:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8306:5:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8306:22:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8278:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8278:51:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8278:51:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8349:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8360:4:41",
                                    "type": "",
                                    "value": "0xa0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8345:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8345:20:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "8377:6:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8385:3:41",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8373:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8373:16:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8367:5:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8367:23:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8338:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8338:53:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8338:53:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8400:63:41",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8416:9:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "8435:6:41"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8443:2:41",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "8431:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8431:15:41"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "8452:2:41",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "8448:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "8448:7:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "8427:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8427:29:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8412:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8412:45:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8459:3:41",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8408:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8408:55:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8400:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_ExactInputParams_$3208_memory_ptr__to_t_struct$_ExactInputParams_$3208_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7789:9:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7800:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7811:4:41",
                        "type": ""
                      }
                    ],
                    "src": "7651:818:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8648:238:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8665:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8676:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8658:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8658:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8658:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8699:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8710:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8695:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8695:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8715:2:41",
                                "type": "",
                                "value": "48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8688:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8688:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8688:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8738:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8749:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8734:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8734:18:41"
                              },
                              {
                                "hexValue": "746f6b656e206164647265737320646f6573206e6f74206d61746368204c5553",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8754:34:41",
                                "type": "",
                                "value": "token address does not match LUS"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8727:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8727:62:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8727:62:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8809:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8820:2:41",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8805:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8805:18:41"
                              },
                              {
                                "hexValue": "44206e6f72204c51545920746f6b656e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8825:18:41",
                                "type": "",
                                "value": "D nor LQTY token"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8798:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8798:46:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8798:46:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8853:27:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8865:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8876:3:41",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8861:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8861:19:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8853:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3038bb07aef9745904aca89049d06dc861b6414b539cee3bf3df050e26d8eeab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8625:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8639:4:41",
                        "type": ""
                      }
                    ],
                    "src": "8474:412:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9048:211:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9058:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9070:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9081:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9066:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9066:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9058:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9100:9:41"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9111:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9093:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9093:25:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9093:25:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9138:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9149:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9134:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9134:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9158:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9166:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9154:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9154:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9127:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9127:83:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9127:83:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9230:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9241:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9226:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9226:18:41"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "9246:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9219:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9219:34:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9219:34:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9001:9:41",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9012:6:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9020:6:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9028:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9039:4:41",
                        "type": ""
                      }
                    ],
                    "src": "8891:368:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9401:137:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9411:27:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9431:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9425:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9425:13:41"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "9415:6:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9473:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9481:4:41",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9469:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9469:17:41"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9488:3:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9493:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "9447:21:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9447:53:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9447:53:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9509:23:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9520:3:41"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9525:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9516:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9516:16:41"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9509:3:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "9377:3:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9382:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9393:3:41",
                        "type": ""
                      }
                    ],
                    "src": "9264:274:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9621:199:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9667:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9676:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9679:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9669:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9669:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9669:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9642:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9651:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9638:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9638:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9663:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9634:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9634:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "9631:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9692:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9711:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9705:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9705:16:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9696:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9774:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9783:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9786:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9776:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9776:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9776:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9743:5:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "9764:5:41"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "9757:6:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9757:13:41"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9750:6:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9750:21:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "9740:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9740:32:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9733:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9733:40:41"
                          },
                          "nodeType": "YulIf",
                          "src": "9730:60:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9799:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9809:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "9799:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9587:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9598:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9610:6:41",
                        "type": ""
                      }
                    ],
                    "src": "9543:277:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9999:164:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10016:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10027:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10009:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10009:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10009:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10050:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10061:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10046:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10046:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10066:2:41",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10039:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10039:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10039:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10089:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10100:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10085:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10085:18:41"
                              },
                              {
                                "hexValue": "415050524f56455f4641494c4544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10105:16:41",
                                "type": "",
                                "value": "APPROVE_FAILED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10078:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10078:44:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10078:44:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10131:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10143:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10154:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10139:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10139:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10131:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9976:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9990:4:41",
                        "type": ""
                      }
                    ],
                    "src": "9825:338:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10297:168:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10307:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10319:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10330:2:41",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10315:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10315:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10307:4:41"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10349:9:41"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10360:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10342:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10342:25:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10342:25:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10387:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10398:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10383:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10383:18:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "10407:6:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10415:42:41",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "10403:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10403:55:41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10376:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10376:83:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10376:83:41"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10258:9:41",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10269:6:41",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10277:6:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10288:4:41",
                        "type": ""
                      }
                    ],
                    "src": "10168:297:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10644:165:41",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10661:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10672:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10654:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10654:21:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10654:21:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10695:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10706:2:41",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10691:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10691:18:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10711:2:41",
                                "type": "",
                                "value": "15"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10684:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10684:30:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10684:30:41"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10734:9:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10745:2:41",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10730:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10730:18:41"
                              },
                              {
                                "hexValue": "5452414e534645525f4641494c4544",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10750:17:41",
                                "type": "",
                                "value": "TRANSFER_FAILED"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10723:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10723:45:41"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10723:45:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10777:26:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10789:9:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10800:2:41",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10785:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10785:18:41"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10777:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10621:9:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10635:4:41",
                        "type": ""
                      }
                    ],
                    "src": "10470:339:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10893:194:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10939:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10948:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10951:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "10941:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10941:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10941:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10914:7:41"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10923:9:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10910:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10910:23:41"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10935:2:41",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10906:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10906:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "10903:52:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10964:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10983:9:41"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "10977:5:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10977:16:41"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "10968:5:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11041:16:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11050:1:41",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11053:1:41",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "11043:6:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11043:12:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11043:12:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "11015:5:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "11026:5:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "11033:4:41",
                                        "type": "",
                                        "value": "0xff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "11022:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11022:16:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "11012:2:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11012:27:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11005:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11005:35:41"
                          },
                          "nodeType": "YulIf",
                          "src": "11002:55:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11066:15:41",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11076:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "11066:6:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint8_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10859:9:41",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10870:7:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10882:6:41",
                        "type": ""
                      }
                    ],
                    "src": "10814:273:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11156:358:41",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "11166:16:41",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "11181:1:41",
                            "type": "",
                            "value": "1"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "11170:7:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11191:16:41",
                          "value": {
                            "name": "power_1",
                            "nodeType": "YulIdentifier",
                            "src": "11200:7:41"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "11191:5:41"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11216:13:41",
                          "value": {
                            "name": "_base",
                            "nodeType": "YulIdentifier",
                            "src": "11224:5:41"
                          },
                          "variableNames": [
                            {
                              "name": "base",
                              "nodeType": "YulIdentifier",
                              "src": "11216:4:41"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11280:228:41",
                            "statements": [
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "11325:22:41",
                                  "statements": [
                                    {
                                      "expression": {
                                        "arguments": [],
                                        "functionName": {
                                          "name": "panic_error_0x11",
                                          "nodeType": "YulIdentifier",
                                          "src": "11327:16:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11327:18:41"
                                      },
                                      "nodeType": "YulExpressionStatement",
                                      "src": "11327:18:41"
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "11300:4:41"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "11314:1:41",
                                              "type": "",
                                              "value": "0"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nodeType": "YulIdentifier",
                                            "src": "11310:3:41"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "11310:6:41"
                                        },
                                        {
                                          "name": "base",
                                          "nodeType": "YulIdentifier",
                                          "src": "11318:4:41"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "div",
                                        "nodeType": "YulIdentifier",
                                        "src": "11306:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11306:17:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "gt",
                                    "nodeType": "YulIdentifier",
                                    "src": "11297:2:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11297:27:41"
                                },
                                "nodeType": "YulIf",
                                "src": "11294:53:41"
                              },
                              {
                                "body": {
                                  "nodeType": "YulBlock",
                                  "src": "11386:29:41",
                                  "statements": [
                                    {
                                      "nodeType": "YulAssignment",
                                      "src": "11388:25:41",
                                      "value": {
                                        "arguments": [
                                          {
                                            "name": "power",
                                            "nodeType": "YulIdentifier",
                                            "src": "11401:5:41"
                                          },
                                          {
                                            "name": "base",
                                            "nodeType": "YulIdentifier",
                                            "src": "11408:4:41"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "mul",
                                          "nodeType": "YulIdentifier",
                                          "src": "11397:3:41"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "11397:16:41"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "power",
                                          "nodeType": "YulIdentifier",
                                          "src": "11388:5:41"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "11367:8:41"
                                    },
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "11377:7:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "11363:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11363:22:41"
                                },
                                "nodeType": "YulIf",
                                "src": "11360:55:41"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "11428:23:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "11440:4:41"
                                    },
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "11446:4:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mul",
                                    "nodeType": "YulIdentifier",
                                    "src": "11436:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11436:15:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "base",
                                    "nodeType": "YulIdentifier",
                                    "src": "11428:4:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "11464:34:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "power_1",
                                      "nodeType": "YulIdentifier",
                                      "src": "11480:7:41"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "11489:8:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "shr",
                                    "nodeType": "YulIdentifier",
                                    "src": "11476:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11476:22:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "11464:8:41"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "11249:8:41"
                              },
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "11259:7:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "11246:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11246:21:41"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "11268:3:41",
                            "statements": []
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "11242:3:41",
                            "statements": []
                          },
                          "src": "11238:270:41"
                        }
                      ]
                    },
                    "name": "checked_exp_helper",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "_base",
                        "nodeType": "YulTypedName",
                        "src": "11120:5:41",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "11127:8:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "11140:5:41",
                        "type": ""
                      },
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "11147:4:41",
                        "type": ""
                      }
                    ],
                    "src": "11092:422:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11578:747:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11616:52:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11630:10:41",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11639:1:41",
                                  "type": "",
                                  "value": "1"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "11630:5:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "11653:5:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "11598:8:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11591:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11591:16:41"
                          },
                          "nodeType": "YulIf",
                          "src": "11588:80:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11701:52:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "11715:10:41",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "11724:1:41",
                                  "type": "",
                                  "value": "0"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "11715:5:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "11738:5:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "11687:4:41"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "11680:6:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11680:12:41"
                          },
                          "nodeType": "YulIf",
                          "src": "11677:76:41"
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11789:52:41",
                                "statements": [
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11803:10:41",
                                    "value": {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "11812:1:41",
                                      "type": "",
                                      "value": "1"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "11803:5:41"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "11826:5:41"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "11782:59:41",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11787:1:41",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "11857:123:41",
                                "statements": [
                                  {
                                    "body": {
                                      "nodeType": "YulBlock",
                                      "src": "11892:22:41",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "panic_error_0x11",
                                              "nodeType": "YulIdentifier",
                                              "src": "11894:16:41"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "11894:18:41"
                                          },
                                          "nodeType": "YulExpressionStatement",
                                          "src": "11894:18:41"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "11877:8:41"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11887:3:41",
                                          "type": "",
                                          "value": "255"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "gt",
                                        "nodeType": "YulIdentifier",
                                        "src": "11874:2:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11874:17:41"
                                    },
                                    "nodeType": "YulIf",
                                    "src": "11871:43:41"
                                  },
                                  {
                                    "nodeType": "YulAssignment",
                                    "src": "11927:25:41",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "exponent",
                                          "nodeType": "YulIdentifier",
                                          "src": "11940:8:41"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "11950:1:41",
                                          "type": "",
                                          "value": "1"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "11936:3:41"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "11936:16:41"
                                    },
                                    "variableNames": [
                                      {
                                        "name": "power",
                                        "nodeType": "YulIdentifier",
                                        "src": "11927:5:41"
                                      }
                                    ]
                                  },
                                  {
                                    "nodeType": "YulLeave",
                                    "src": "11965:5:41"
                                  }
                                ]
                              },
                              "nodeType": "YulCase",
                              "src": "11850:130:41",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11855:1:41",
                                "type": "",
                                "value": "2"
                              }
                            }
                          ],
                          "expression": {
                            "name": "base",
                            "nodeType": "YulIdentifier",
                            "src": "11769:4:41"
                          },
                          "nodeType": "YulSwitch",
                          "src": "11762:218:41"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12078:70:41",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "12092:28:41",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "base",
                                      "nodeType": "YulIdentifier",
                                      "src": "12105:4:41"
                                    },
                                    {
                                      "name": "exponent",
                                      "nodeType": "YulIdentifier",
                                      "src": "12111:8:41"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "exp",
                                    "nodeType": "YulIdentifier",
                                    "src": "12101:3:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12101:19:41"
                                },
                                "variableNames": [
                                  {
                                    "name": "power",
                                    "nodeType": "YulIdentifier",
                                    "src": "12092:5:41"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulLeave",
                                "src": "12133:5:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "12002:4:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12008:2:41",
                                        "type": "",
                                        "value": "11"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "11999:2:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11999:12:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "12016:8:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12026:2:41",
                                        "type": "",
                                        "value": "78"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12013:2:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12013:16:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "11995:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11995:35:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "base",
                                        "nodeType": "YulIdentifier",
                                        "src": "12039:4:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12045:3:41",
                                        "type": "",
                                        "value": "307"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12036:2:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12036:13:41"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "exponent",
                                        "nodeType": "YulIdentifier",
                                        "src": "12054:8:41"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12064:2:41",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "lt",
                                      "nodeType": "YulIdentifier",
                                      "src": "12051:2:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12051:16:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12032:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12032:36:41"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "11992:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11992:77:41"
                          },
                          "nodeType": "YulIf",
                          "src": "11989:159:41"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "12157:57:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "12199:4:41"
                              },
                              {
                                "name": "exponent",
                                "nodeType": "YulIdentifier",
                                "src": "12205:8:41"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_helper",
                              "nodeType": "YulIdentifier",
                              "src": "12180:18:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12180:34:41"
                          },
                          "variables": [
                            {
                              "name": "power_1",
                              "nodeType": "YulTypedName",
                              "src": "12161:7:41",
                              "type": ""
                            },
                            {
                              "name": "base_1",
                              "nodeType": "YulTypedName",
                              "src": "12170:6:41",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12259:22:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12261:16:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12261:18:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12261:18:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "12229:7:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "12246:1:41",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "12242:3:41"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12242:6:41"
                                  },
                                  {
                                    "name": "base_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "12250:6:41"
                                  }
                                ],
                                "functionName": {
                                  "name": "div",
                                  "nodeType": "YulIdentifier",
                                  "src": "12238:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12238:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "12226:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12226:32:41"
                          },
                          "nodeType": "YulIf",
                          "src": "12223:58:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12290:29:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "power_1",
                                "nodeType": "YulIdentifier",
                                "src": "12303:7:41"
                              },
                              {
                                "name": "base_1",
                                "nodeType": "YulIdentifier",
                                "src": "12312:6:41"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "12299:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12299:20:41"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "12290:5:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_unsigned",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "11549:4:41",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "11555:8:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "11568:5:41",
                        "type": ""
                      }
                    ],
                    "src": "11519:806:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12398:72:41",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12408:56:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "base",
                                "nodeType": "YulIdentifier",
                                "src": "12438:4:41"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "exponent",
                                    "nodeType": "YulIdentifier",
                                    "src": "12448:8:41"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12458:4:41",
                                    "type": "",
                                    "value": "0xff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "12444:3:41"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12444:19:41"
                              }
                            ],
                            "functionName": {
                              "name": "checked_exp_unsigned",
                              "nodeType": "YulIdentifier",
                              "src": "12417:20:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12417:47:41"
                          },
                          "variableNames": [
                            {
                              "name": "power",
                              "nodeType": "YulIdentifier",
                              "src": "12408:5:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_exp_t_uint256_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "base",
                        "nodeType": "YulTypedName",
                        "src": "12369:4:41",
                        "type": ""
                      },
                      {
                        "name": "exponent",
                        "nodeType": "YulTypedName",
                        "src": "12375:8:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "power",
                        "nodeType": "YulTypedName",
                        "src": "12388:5:41",
                        "type": ""
                      }
                    ],
                    "src": "12330:140:41"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12524:76:41",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12546:22:41",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "12548:16:41"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12548:18:41"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12548:18:41"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12540:1:41"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12543:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "12537:2:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12537:8:41"
                          },
                          "nodeType": "YulIf",
                          "src": "12534:34:41"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12577:17:41",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "12589:1:41"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "12592:1:41"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "12585:3:41"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12585:9:41"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "12577:4:41"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "12506:1:41",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "12509:1:41",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "12515:4:41",
                        "type": ""
                      }
                    ],
                    "src": "12475:125:41"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ITreasury_$4114__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IOlympusAuthority_$3925(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_IOlympusAuthority_$3925__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n    {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := ret\n        let _2 := 1\n        length := shr(_2, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _2)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, _1))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        let pos := array_storeLengthForEncoding_string(add(headStart, _1), length)\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, _1)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value0)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _2)\n            }\n            ret := add(pos, i)\n        }\n        tail := ret\n    }\n    function abi_encode_tuple_t_stringliteral_500d4d867eb3790b476806a58c3e4af387f1b32a2e11573f474cc97641c03124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"Value must be between 0 and 1e6\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_0ea3c9f0a14049977c34f839ec879730f68f6036454424fff046a4ae8525dcf9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"Value must be between 0 and 1000\")\n        mstore(add(headStart, 96), \"0\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3c27be6c0ae2d50e729c76b14fe6b592004eb3a78cfab3f63836408451f1dcab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 19)\n        mstore(add(headStart, 64), \"Zero address: Vault\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_71ee5fabd759b8fb413bb088b1fd8c7cdeee3e9158040cc262465972d0aacfa6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"No change\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_rational_0_by_1__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address_t_uint256_t_address__nonPadded_inplace_fromStack_reversed(pos, value4, value3, value2, value1, value0) -> end\n    {\n        let _1 := not(0xffffffffffffffffffffffff)\n        mstore(pos, and(shl(96, value0), _1))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), and(shl(96, value2), _1))\n        mstore(add(pos, 72), value3)\n        mstore(add(pos, 104), and(shl(96, value4), _1))\n        end := add(pos, 124)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_tuple_t_struct$_ExactInputParams_$3208_memory_ptr__to_t_struct$_ExactInputParams_$3208_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let memberValue0 := mload(value0)\n        mstore(add(headStart, 32), 0xa0)\n        let length := mload(memberValue0)\n        mstore(add(headStart, 192), length)\n        copy_memory_to_memory(add(memberValue0, 32), add(headStart, 224), length)\n        mstore(add(headStart, 64), and(mload(add(value0, 32)), 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        mstore(add(headStart, 128), mload(add(value0, 96)))\n        mstore(add(headStart, 0xa0), mload(add(value0, 128)))\n        tail := add(add(headStart, and(add(length, 31), not(31))), 224)\n    }\n    function abi_encode_tuple_t_stringliteral_3038bb07aef9745904aca89049d06dc861b6414b539cee3bf3df050e26d8eeab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"token address does not match LUS\")\n        mstore(add(headStart, 96), \"D nor LQTY token\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"APPROVE_FAILED\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"TRANSFER_FAILED\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n}",
              "id": 41,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "1603": [
              {
                "length": 32,
                "start": 1656
              },
              {
                "length": 32,
                "start": 1801
              },
              {
                "length": 32,
                "start": 3826
              },
              {
                "length": 32,
                "start": 5560
              },
              {
                "length": 32,
                "start": 6530
              }
            ],
            "1606": [
              {
                "length": 32,
                "start": 4067
              },
              {
                "length": 32,
                "start": 5950
              }
            ],
            "1609": [
              {
                "length": 32,
                "start": 4179
              },
              {
                "length": 32,
                "start": 4315
              },
              {
                "length": 32,
                "start": 4522
              },
              {
                "length": 32,
                "start": 4866
              },
              {
                "length": 32,
                "start": 5006
              }
            ],
            "1612": [
              {
                "length": 32,
                "start": 4667
              }
            ]
          },
          "linkReferences": {},
          "object": "6080604052600436106101835760003560e01c8063817f6481116100d6578063bf7e214f1161007f578063e616916a11610059578063e616916a14610438578063e63a391f1461044e578063f3fef3a31461046557600080fd5b8063bf7e214f146103d2578063c901761d146103f2578063ddc632621461040857600080fd5b80639c769787116100b05780639c7697871461037d578063b6b55f2514610392578063b7e78648146103b257600080fd5b8063817f6481146103275780639501dc8714610347578063987f56ff1461036757600080fd5b806361d027b31161013857806378289ed21161011257806378289ed2146102dd57806378767d05146102f25780637a9e5e4b1461030757600080fd5b806361d027b3146102875780636bd0fd0f146102a7578063739a4a37146102c757600080fd5b806310a18de21161016957806310a18de2146102255780631d2528fc146102455780635a762d641461026557600080fd5b806202fcd3146101c4578063089fe6aa1461020157600080fd5b366101bf5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156101d057600080fd5b506007546101e4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020d57600080fd5b5061021760045481565b6040519081526020016101f8565b34801561023157600080fd5b506005546101e4906001600160a01b031681565b34801561025157600080fd5b506006546101e4906001600160a01b031681565b34801561027157600080fd5b50610285610280366004611c4a565b610485565b005b34801561029357600080fd5b506002546101e4906001600160a01b031681565b3480156102b357600080fd5b506102856102c2366004611c6e565b61055c565b3480156102d357600080fd5b5061021761271081565b3480156102e957600080fd5b50610217610660565b3480156102fe57600080fd5b506102176106f1565b34801561031357600080fd5b50610285610322366004611c4a565b610740565b34801561033357600080fd5b506008546101e4906001600160a01b031681565b34801561035357600080fd5b50610285610362366004611c6e565b610836565b34801561037357600080fd5b50610217600a5481565b34801561038957600080fd5b50610285610943565b34801561039e57600080fd5b506102856103ad366004611c6e565b610c19565b3480156103be57600080fd5b506102856103cd366004611c4a565b610d38565b3480156103de57600080fd5b506001546101e4906001600160a01b031681565b3480156103fe57600080fd5b5061021760095481565b34801561041457600080fd5b50610428610423366004611c6e565b610e06565b60405190151581526020016101f8565b34801561044457600080fd5b5061021760035481565b34801561045a57600080fd5b50610217620f424081565b34801561047157600080fd5b50610285610480366004611c87565b611445565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906105395760405162461bcd60e51b81526004016105309190611cd0565b60405180910390fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611cb3565b6001600160a01b0316336001600160a01b0316146000906106075760405162461bcd60e51b81526004016105309190611cd0565b50620f424081111561065b5760405162461bcd60e51b815260206004820152601f60248201527f56616c7565206d757374206265206265747765656e203020616e6420316536006044820152606401610530565b600355565b60405163389e92a560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063389e92a5906024015b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611d78565b905090565b60405163f5f1595d60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5f1595d906024016106ab565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190611cb3565b6001600160a01b0316336001600160a01b0316146000906107eb5760405162461bcd60e51b81526004016105309190611cd0565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611cb3565b6001600160a01b0316336001600160a01b0316146000906108e15760405162461bcd60e51b81526004016105309190611cd0565b5061271081111561093e5760405162461bcd60e51b815260206004820152602160248201527f56616c7565206d757374206265206265747765656e203020616e6420313030306044820152600360fc1b6064820152608401610530565b600455565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cb3565b6001600160a01b0316336001600160a01b0316146000906109ee5760405162461bcd60e51b81526004016105309190611cd0565b506001546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611cb3565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a205661756c74000000000000000000000000006044820152606401610530565b6002546001546040805163fbfa77cf60e01b815290516001600160a01b03938416939092169163fbfa77cf916004808201926020929091908290030181865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611cb3565b6001600160a01b03161415610b805760405162461bcd60e51b815260206004820152600960248201527f4e6f206368616e676500000000000000000000000000000000000000000000006044820152606401610530565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190611cb3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611cb3565b6001600160a01b0316336001600160a01b031614600090610cc45760405162461bcd60e51b81526004016105309190611cd0565b5060025460075460405162b0eee360e41b81526001600160a01b03918216600482015260248101849052911690630b0eee3090604401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050610d3581611959565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611cb3565b6001600160a01b0316336001600160a01b031614600090610de35760405162461bcd60e51b81526004016105309190611cd0565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611cb3565b6001600160a01b0316336001600160a01b031614600090610ea85760405162461bcd60e51b81526004016105309190611cd0565b506000610eb3610660565b90506000610ebf6106f1565b905081158015610ecd575080155b15610edc575060009392505050565b604051632e54bf9560e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190611d78565b905080156110485760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050505b47600081156112d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d78565b600354909150156112d7576000620f42406003548361116f9190611da7565b6111799190611dc6565b905060006111878a83611da7565b6040805160a0810182526004546005546007546bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b821660c087015260d4860185905292831b811660f4860152610108850193909352901b16610128820152815180820361011c01815261013c820183528152306020820152919250600091908101611226426019611de8565b815260200184815260200183815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59836040518263ffffffff1660e01b81526004016112859190611e30565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611d78565b11156112d357600194505b5050505b505b60035415806112e55750805b156113b9576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190611d78565b905080156113b7576002546113b7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611a07565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190611d78565b905080156114375761143781611959565b506001979650505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906114f05760405162461bcd60e51b81526004016105309190611cd0565b506007546001600160a01b038381169116148061151a57506008546001600160a01b038381169116145b61158c5760405162461bcd60e51b815260206004820152603060248201527f746f6b656e206164647265737320646f6573206e6f74206d61746368204c555360448201527f44206e6f72204c51545920746f6b656e000000000000000000000000000000006064820152608401610530565b6007546001600160a01b038381169116141561172857604051632e54bf9560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611d78565b905060006116958483611b30565b90506116a382826000611bc0565b60025460405163bc157ac160e01b8152600481018490526001600160a01b038681166024830152604482018490529091169063bc157ac1906064016020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190611d78565b5050505050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611d78565b60025490915061182a906001600160a01b03858116911683611a07565b505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908716916118a19190611ea0565b6000604051808303816000865af19150503d80600081146118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b509150915081801561190d57508051158061190d57508080602001905181019061190d9190611ebc565b6117215760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610530565b600654604051635f788d6560e01b8152600481018390526001600160a01b0391821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690635f788d6590604401600060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b5050600754600092506119f991506001600160a01b031683611b30565b905061182c82826001611bc0565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611a789190611ea0565b6000604051808303816000865af19150503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5091509150818015611ae4575080511580611ae4575080806020019051810190611ae49190611ebc565b6117215760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610530565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190611ede565b611b9f90600a611fe5565b611bad83633b9aca00611da7565b611bb79190611dc6565b90505b92915050565b8015611bed5782600a54611bd49190611de8565b600a55600954611be5908390611de8565b60095561182a565b600a54831015611c0d5782600a54611c059190611ff4565b600a55611c13565b6000600a555b600954821015611c2b5781600954611be59190611ff4565b6000600955505050565b6001600160a01b0381168114610d3557600080fd5b600060208284031215611c5c57600080fd5b8135611c6781611c35565b9392505050565b600060208284031215611c8057600080fd5b5035919050565b60008060408385031215611c9a57600080fd5b8235611ca581611c35565b946020939093013593505050565b600060208284031215611cc557600080fd5b8151611c6781611c35565b600060208083526000845481600182811c915080831680611cf257607f831692505b858310811415611d1057634e487b7160e01b85526022600452602485fd5b878601838152602001818015611d2d5760018114611d3e57611d69565b60ff19861682528782019650611d69565b60008b81526020902060005b86811015611d6357815484820152908501908901611d4a565b83019750505b50949998505050505050505050565b600060208284031215611d8a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dc157611dc1611d91565b500290565b600082611de357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611dfb57611dfb611d91565b500190565b60005b83811015611e1b578181015183820152602001611e03565b83811115611e2a576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611e588160e0860160208501611e00565b6001600160a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60008251611eb2818460208701611e00565b9190910192915050565b600060208284031215611ece57600080fd5b81518015158114611c6757600080fd5b600060208284031215611ef057600080fd5b815160ff81168114611c6757600080fd5b600181815b80851115611f3c578160001904821115611f2257611f22611d91565b80851615611f2f57918102915b93841c9390800290611f06565b509250929050565b600082611f5357506001611bba565b81611f6057506000611bba565b8160018114611f765760028114611f8057611f9c565b6001915050611bba565b60ff841115611f9157611f91611d91565b50506001821b611bba565b5060208310610133831016604e8410600b8410161715611fbf575081810a611bba565b611fc98383611f01565b8060001904821115611fdd57611fdd611d91565b029392505050565b6000611bb760ff841683611f44565b60008282101561200657612006611d91565b50039056fea164736f6c634300080a000a",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x183 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x817F6481 GT PUSH2 0xD6 JUMPI DUP1 PUSH4 0xBF7E214F GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xE616916A GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xE616916A EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xE63A391F EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0xF3FEF3A3 EQ PUSH2 0x465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x3D2 JUMPI DUP1 PUSH4 0xC901761D EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0xDDC63262 EQ PUSH2 0x408 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9C769787 GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x9C769787 EQ PUSH2 0x37D JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0xB7E78648 EQ PUSH2 0x3B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x817F6481 EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x9501DC87 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x987F56FF EQ PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61D027B3 GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x78289ED2 GT PUSH2 0x112 JUMPI DUP1 PUSH4 0x78289ED2 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x78767D05 EQ PUSH2 0x2F2 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61D027B3 EQ PUSH2 0x287 JUMPI DUP1 PUSH4 0x6BD0FD0F EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x739A4A37 EQ PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x10A18DE2 GT PUSH2 0x169 JUMPI DUP1 PUSH4 0x10A18DE2 EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0x1D2528FC EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0x5A762D64 EQ PUSH2 0x265 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x2FCD3 EQ PUSH2 0x1C4 JUMPI DUP1 PUSH4 0x89FE6AA EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x1BF JUMPI PUSH1 0x40 MLOAD CALLVALUE DUP2 MSTORE CALLER SWAP1 PUSH32 0xE1FFFCC4923D04B559F4D29A8BFC6CDA04EB5B0D3C460751C2402C5C5CC9109C SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x251 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x6 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x485 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x2C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x660 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH2 0x6F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x322 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0x740 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x353 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x362 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0x836 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x389 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x943 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3AD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0xC19 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x3CD CALLDATASIZE PUSH1 0x4 PUSH2 0x1C4A JUMP JUMPDEST PUSH2 0xD38 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x1E4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x428 PUSH2 0x423 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C6E JUMP JUMPDEST PUSH2 0xE06 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x444 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x217 PUSH3 0xF4240 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x471 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x285 PUSH2 0x480 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C87 JUMP JUMPDEST PUSH2 0x1445 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4FC SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5AF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x607 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH3 0xF4240 DUP2 GT ISZERO PUSH2 0x65B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56616C7565206D757374206265206265747765656E203020616E642031653600 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x389E92A5 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x389E92A5 SWAP1 PUSH1 0x24 ADD JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6C8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF5F1595D PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xF5F1595D SWAP1 PUSH1 0x24 ADD PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x793 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7B7 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x889 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8AD SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x8E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH2 0x2710 DUP2 GT ISZERO PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x56616C7565206D757374206265206265747765656E203020616E642031303030 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x996 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9BA SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x9EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFA77CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0xFBFA77CF SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA5D SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5A65726F20616464726573733A205661756C7400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0xFBFA77CF PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP3 AND SWAP2 PUSH4 0xFBFA77CF SWAP2 PUSH1 0x4 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xB29 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0xB80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4E6F206368616E67650000000000000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBD3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBF7 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC6C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC90 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xCC4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH3 0xB0EEE3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 AND SWAP1 PUSH4 0xB0EEE30 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD28 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD35 DUP2 PUSH2 0x1959 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD8B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAF SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xDE3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2295499 PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x452A9320 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE74 SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0xEA8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xEB3 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xEBF PUSH2 0x6F1 JUMP JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0xECD JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0xEDC JUMPI POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E54BF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E54BF95 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF52 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFA1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFC5 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1048 JUMPI PUSH1 0x40 MLOAD PUSH4 0x534A7E1D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA694FC3A SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x102F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1043 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST SELFBALANCE PUSH1 0x0 DUP2 ISZERO PUSH2 0x12D9 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP4 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 POP PUSH4 0x70A08231 SWAP2 POP PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x112C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1150 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x3 SLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x12D7 JUMPI PUSH1 0x0 PUSH3 0xF4240 PUSH1 0x3 SLOAD DUP4 PUSH2 0x116F SWAP2 SWAP1 PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x1179 SWAP2 SWAP1 PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1187 DUP11 DUP4 PUSH2 0x1DA7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH1 0x7 SLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH32 0x0 PUSH1 0x60 SWAP1 DUP2 SHL DUP3 AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0xD4 DUP7 ADD DUP6 SWAP1 MSTORE SWAP3 DUP4 SHL DUP2 AND PUSH1 0xF4 DUP7 ADD MSTORE PUSH2 0x108 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 SHL AND PUSH2 0x128 DUP3 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB PUSH2 0x11C ADD DUP2 MSTORE PUSH2 0x13C DUP3 ADD DUP4 MSTORE DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 DUP2 ADD PUSH2 0x1226 TIMESTAMP PUSH1 0x19 PUSH2 0x1DE8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE POP SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC04B8D59 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1285 SWAP2 SWAP1 PUSH2 0x1E30 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12C8 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST GT ISZERO PUSH2 0x12D3 JUMPI PUSH1 0x1 SWAP5 POP JUMPDEST POP POP POP JUMPDEST POP JUMPDEST PUSH1 0x3 SLOAD ISZERO DUP1 PUSH2 0x12E5 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x13B9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1375 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x13B7 JUMPI PUSH1 0x2 SLOAD PUSH2 0x13B7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND DUP4 PUSH2 0x1A07 JUMP JUMPDEST POP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1402 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1426 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x1437 JUMPI PUSH2 0x1437 DUP2 PUSH2 0x1959 JUMP JUMPDEST POP PUSH1 0x1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x452A9320 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1498 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14BC SWAP2 SWAP1 PUSH2 0x1CB3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x0 SWAP1 PUSH2 0x14F0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP2 SWAP1 PUSH2 0x1CD0 JUMP JUMPDEST POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 0x151A JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST PUSH2 0x158C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x30 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E206164647265737320646F6573206E6F74206D61746368204C5553 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x44206E6F72204C51545920746F6B656E00000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1728 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E54BF95 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E54BF95 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1618 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1663 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1687 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1695 DUP5 DUP4 PUSH2 0x1B30 JUMP JUMPDEST SWAP1 POP PUSH2 0x16A3 DUP3 DUP3 PUSH1 0x0 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH4 0xBC157AC1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xBC157AC1 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x16FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1721 SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5C2FBCF PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E17DE78 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x178A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x179E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP2 POP PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x180D SWAP2 SWAP1 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH2 0x182A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND DUP4 PUSH2 0x1A07 JUMP JUMPDEST POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x18A1 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x18DE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18E3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x190D JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x190D JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x190D SWAP2 SWAP1 PUSH2 0x1EBC JUMP JUMPDEST PUSH2 0x1721 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x415050524F56455F4641494C4544000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F788D65 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5F788D65 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x19DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x7 SLOAD PUSH1 0x0 SWAP3 POP PUSH2 0x19F9 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH2 0x1B30 JUMP JUMPDEST SWAP1 POP PUSH2 0x182C DUP3 DUP3 PUSH1 0x1 PUSH2 0x1BC0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP2 MLOAD PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP1 DUP8 AND SWAP2 PUSH2 0x1A78 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1AB5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1ABA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1AE4 JUMPI POP DUP1 MLOAD ISZERO DUP1 PUSH2 0x1AE4 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x1EBC JUMP JUMPDEST PUSH2 0x1721 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5452414E534645525F4641494C45440000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x530 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B70 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B94 SWAP2 SWAP1 PUSH2 0x1EDE JUMP JUMPDEST PUSH2 0x1B9F SWAP1 PUSH1 0xA PUSH2 0x1FE5 JUMP JUMPDEST PUSH2 0x1BAD DUP4 PUSH4 0x3B9ACA00 PUSH2 0x1DA7 JUMP JUMPDEST PUSH2 0x1BB7 SWAP2 SWAP1 PUSH2 0x1DC6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1BED JUMPI DUP3 PUSH1 0xA SLOAD PUSH2 0x1BD4 SWAP2 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0xA SSTORE PUSH1 0x9 SLOAD PUSH2 0x1BE5 SWAP1 DUP4 SWAP1 PUSH2 0x1DE8 JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x182A JUMP JUMPDEST PUSH1 0xA SLOAD DUP4 LT ISZERO PUSH2 0x1C0D JUMPI DUP3 PUSH1 0xA SLOAD PUSH2 0x1C05 SWAP2 SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST PUSH1 0xA SSTORE PUSH2 0x1C13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA SSTORE JUMPDEST PUSH1 0x9 SLOAD DUP3 LT ISZERO PUSH2 0x1C2B JUMPI DUP2 PUSH1 0x9 SLOAD PUSH2 0x1BE5 SWAP2 SWAP1 PUSH2 0x1FF4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x9 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1C67 DUP2 PUSH2 0x1C35 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1CA5 DUP2 PUSH2 0x1C35 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1C67 DUP2 PUSH2 0x1C35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x1CF2 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST DUP6 DUP4 LT DUP2 EQ ISZERO PUSH2 0x1D10 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP8 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP2 DUP1 ISZERO PUSH2 0x1D2D JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x1D3E JUMPI PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP3 MSTORE DUP8 DUP3 ADD SWAP7 POP PUSH2 0x1D69 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1D63 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP10 ADD PUSH2 0x1D4A JUMP JUMPDEST DUP4 ADD SWAP8 POP POP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D8A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1DC1 JUMPI PUSH2 0x1DC1 PUSH2 0x1D91 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1DE3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1DFB JUMPI PUSH2 0x1DFB PUSH2 0x1D91 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E1B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E03 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1E2A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE DUP1 MLOAD DUP1 PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x1E58 DUP2 PUSH1 0xE0 DUP7 ADD PUSH1 0x20 DUP6 ADD PUSH2 0x1E00 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP7 ADD MLOAD AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x80 DUP6 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xE0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EB2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1E00 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1ECE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1C67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x1F3C JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1F22 JUMPI PUSH2 0x1F22 PUSH2 0x1D91 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x1F2F JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x1F06 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F53 JUMPI POP PUSH1 0x1 PUSH2 0x1BBA JUMP JUMPDEST DUP2 PUSH2 0x1F60 JUMPI POP PUSH1 0x0 PUSH2 0x1BBA JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x1F76 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x1F80 JUMPI PUSH2 0x1F9C JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x1BBA JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x1F91 JUMPI PUSH2 0x1F91 PUSH2 0x1D91 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x1BBA JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x1FBF JUMPI POP DUP2 DUP2 EXP PUSH2 0x1BBA JUMP JUMPDEST PUSH2 0x1FC9 DUP4 DUP4 PUSH2 0x1F01 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0x1FDD JUMPI PUSH2 0x1FDD PUSH2 0x1D91 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BB7 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x1F44 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x2006 JUMPI PUSH2 0x2006 PUSH2 0x1D91 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD EXP STOP EXP ",
          "sourceMap": "582:12988:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4212:30;;4232:9;160:25:41;;4220:10:2;;4212:30;;148:2:41;133:18;4212:30:2;;;;;;;582:12988;;;;;2192:31;;;;;;;;;;-1:-1:-1;2192:31:2;;;;-1:-1:-1;;;;;2192:31:2;;;;;;-1:-1:-1;;;;;360:55:41;;;342:74;;330:2;315:18;2192:31:2;;;;;;;;1867:29;;;;;;;;;;;;;;;;;;;160:25:41;;;148:2;133:18;1867:29:2;14:177:41;1940:30:2;;;;;;;;;;-1:-1:-1;1940:30:2;;;;-1:-1:-1;;;;;1940:30:2;;;2107;;;;;;;;;;-1:-1:-1;2107:30:2;;;;-1:-1:-1;;;;;2107:30:2;;;4717:127;;;;;;;;;;-1:-1:-1;4717:127:2;;;;;:::i;:::-;;:::i;:::-;;1058:25;;;;;;;;;;-1:-1:-1;1058:25:2;;;;-1:-1:-1;;;;;1058:25:2;;;4321:209;;;;;;;;;;-1:-1:-1;4321:209:2;;;;;:::i;:::-;;:::i;1159:44::-;;;;;;;;;;;;1198:5;1159:44;;13220:131;;;;;;;;;;;;;:::i;13435:133::-;;;;;;;;;;;;;:::i;1124:165:37:-;;;;;;;;;;-1:-1:-1;1124:165:37;;;;;:::i;:::-;;:::i;2290:31:2:-;;;;;;;;;;-1:-1:-1;2290:31:2;;;;-1:-1:-1;;;;;2290:31:2;;;4536:175;;;;;;;;;;-1:-1:-1;4536:175:2;;;;;:::i;:::-;;:::i;2626:34::-;;;;;;;;;;;;;;;;5102:254;;;;;;;;;;;;;:::i;10084:186::-;;;;;;;;;;-1:-1:-1;10084:186:2;;;;;:::i;:::-;;:::i;4969:127::-;;;;;;;;;;-1:-1:-1;4969:127:2;;;;;:::i;:::-;;:::i;373:34:37:-;;;;;;;;;;-1:-1:-1;373:34:37;;;;-1:-1:-1;;;;;373:34:37;;;2547:33:2;;;;;;;;;;;;;;;;6000:3907;;;;;;;;;;-1:-1:-1;6000:3907:2;;;;;:::i;:::-;;:::i;:::-;;;1972:14:41;;1965:22;1947:41;;1935:2;1920:18;6000:3907:2;1807:187:41;1433:38:2;;;;;;;;;;;;;;;;1110:43;;;;;;;;;;;;1150:3;1110:43;;10428:998;;;;;;;;;;-1:-1:-1;10428:998:2;;;;;:::i;:::-;;:::i;4717:127::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;4803:15:2::1;:34:::0;;-1:-1:-1;;;;;;4803:34:2::1;-1:-1:-1::0;;;;;4803:34:2;;;::::1;::::0;;;::::1;::::0;;4717:127::o;4321:209::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;;1150:3:2::1;4413:15;:32;;4405:76;;;::::0;-1:-1:-1;;;4405:76:2;;4249:2:41;4405:76:2::1;::::0;::::1;4231:21:41::0;4288:2;4268:18;;;4261:30;4327:33;4307:18;;;4300:61;4378:18;;4405:76:2::1;4047:355:41::0;4405:76:2::1;4491:14;:32:::0;4321:209::o;13220:131::-;13292:52;;-1:-1:-1;;;13292:52:2;;13338:4;13292:52;;;342:74:41;13266:7:2;;13292:17;-1:-1:-1;;;;;13292:37:2;;;;315:18:41;;13292:52:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13285:59;;13220:131;:::o;13435:133::-;13508:53;;-1:-1:-1;;;13508:53:2;;13555:4;13508:53;;;342:74:41;13482:7:2;;13508:17;-1:-1:-1;;;;;13508:38:2;;;;315:18:41;;13508:53:2;196:226:41;1124:165:37;688:9;;;;;;;;;-1:-1:-1;;;;;688:9:37;-1:-1:-1;;;;;688:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;674:34:37;:10;-1:-1:-1;;;;;674:34:37;;710:12;666:57;;;;;-1:-1:-1;;;666:57:37;;;;;;;;:::i;:::-;-1:-1:-1;1211:9:37::1;:25:::0;;-1:-1:-1;;;;;;1211:25:37::1;-1:-1:-1::0;;;;;1211:25:37;::::1;::::0;;::::1;::::0;;;1251:31:::1;::::0;::::1;::::0;-1:-1:-1;;1251:31:37::1;1124:165:::0;:::o;4536:175:2:-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;;1198:5:2::1;4614:8;:24;;4606:70;;;::::0;-1:-1:-1;;;4606:70:2;;4798:2:41;4606:70:2::1;::::0;::::1;4780:21:41::0;4837:2;4817:18;;;4810:30;4876:34;4856:18;;;4849:62;-1:-1:-1;;;4927:18:41;;;4920:31;4968:19;;4606:70:2::1;4596:397:41::0;4606:70:2::1;4686:7;:18:::0;4536:175::o;5102:254::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;-1:-1:-1;5166:9:2::1;::::0;:17:::1;::::0;;-1:-1:-1;;;5166:17:2;;;;5195:1:::1;::::0;-1:-1:-1;;;;;5166:9:2::1;::::0;:15:::1;::::0;:17:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;:9;:17:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;5166:31:2::1;;;5158:63;;;::::0;-1:-1:-1;;;5158:63:2;;5200:2:41;5158:63:2::1;::::0;::::1;5182:21:41::0;5239:2;5219:18;;;5212:30;5278:21;5258:18;;;5251:49;5317:18;;5158:63:2::1;4998:343:41::0;5158:63:2::1;5277:8;::::0;;5247:9;:17:::1;::::0;;-1:-1:-1;;;5247:17:2;;;;-1:-1:-1;;;;;5277:8:2;;::::1;::::0;5247:9;;::::1;::::0;:15:::1;::::0;:17:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;;:9;:17:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;;;;;5239:47:2::1;;;5231:69;;;::::0;-1:-1:-1;;;5231:69:2;;5548:2:41;5231:69:2::1;::::0;::::1;5530:21:41::0;5587:1;5567:18;;;5560:29;5625:11;5605:18;;;5598:39;5654:18;;5231:69:2::1;5346:332:41::0;5231:69:2::1;5331:9;;;;;;;;;-1:-1:-1::0;;;;;5331:9:2::1;-1:-1:-1::0;;;;;5331:15:2::1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5310:8;:39:::0;;-1:-1:-1;;;;;;5310:39:2::1;-1:-1:-1::0;;;;;5310:39:2;;;::::1;::::0;;;::::1;::::0;;5102:254::o;10084:186::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;-1:-1:-1;10149:8:2::1;::::0;10165:16:::1;::::0;10149:41:::1;::::0;-1:-1:-1;;;10149:41:2;;-1:-1:-1;;;;;10165:16:2;;::::1;10149:41;::::0;::::1;5857:74:41::0;5947:18;;;5940:34;;;10149:8:2;::::1;::::0;:15:::1;::::0;5830:18:41;;10149:41:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;10243:20;10256:6;10243:12;:20::i;:::-;10084:186:::0;:::o;4969:127::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;-1:-1:-1;5055:15:2::1;:34:::0;;-1:-1:-1;;;;;;5055:34:2::1;-1:-1:-1::0;;;;;5055:34:2;;;::::1;::::0;;;::::1;::::0;;4969:127::o;6000:3907::-;803:9:37;;:20;;;-1:-1:-1;;;803:20:37;;;;6070:4:2;;-1:-1:-1;;;;;803:9:37;;:18;;:20;;;;;;;;;;;;;;:9;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;;6086:31:2::1;6120:15;:13;:15::i;:::-;6086:49;;6145:32;6180:16;:14;:16::i;:::-;6145:51:::0;-1:-1:-1;6211:28:2;;:61;::::1;;;-1:-1:-1::0;6243:29:2;;6211:61:::1;6207:104;;;-1:-1:-1::0;6295:5:2::1;::::0;6000:3907;-1:-1:-1;;;6000:3907:2:o;6207:104::-:1;6391:35;::::0;-1:-1:-1;;;6391:35:2;;6424:1:::1;6391:35;::::0;::::1;160:25:41::0;6391:17:2::1;-1:-1:-1::0;;;;;6391:32:2::1;::::0;::::1;::::0;133:18:41;;6391:35:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;6750:16:2::1;::::0;6743:49:::1;::::0;-1:-1:-1;;;6743:49:2;;6786:4:::1;6743:49;::::0;::::1;342:74:41::0;6721:19:2::1;::::0;-1:-1:-1;;;;;;6750:16:2;;::::1;::::0;-1:-1:-1;6743:34:2::1;::::0;315:18:41;;6743:49:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6721:71:::0;-1:-1:-1;6851:15:2;;6847:170:::1;;6902:30;::::0;-1:-1:-1;;;6902:30:2;;::::1;::::0;::::1;160:25:41::0;;;6902:11:2::1;-1:-1:-1::0;;;;;6902:17:2::1;::::0;::::1;::::0;133:18:41;;6902:30:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;6847:170;7194:21;7173:18;7341:14:::0;;7337:1742:::1;;7403:4;-1:-1:-1::0;;;;;7403:12:2::1;;7423:10;7403:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;7473:29:2::1;::::0;-1:-1:-1;;;7473:29:2;;7496:4:::1;7473:29;::::0;::::1;342:74:41::0;7451:19:2::1;::::0;-1:-1:-1;7473:4:2::1;-1:-1:-1::0;;;;;7473:14:2::1;::::0;-1:-1:-1;7473:14:2::1;::::0;-1:-1:-1;315:18:41;;7473:29:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7600:14;::::0;7451:51;;-1:-1:-1;7600:18:2;7596:1473:::1;;7638:24;1150:3;7680:14;;7666:11;:28;;;;:::i;:::-;7665:46;;;;:::i;:::-;7638:73:::0;-1:-1:-1;7730:21:2::1;7754:33;7773:14:::0;7638:73;7754:33:::1;:::i;:::-;8463:426;::::0;;::::1;::::0;::::1;::::0;;8552:7:::1;::::0;8561:15:::1;::::0;8587:16:::1;::::0;-1:-1:-1;;8545:4:2::1;7013:2:41::0;7009:15;;;7005:24;;8520:84:2;;;6993:37:41;7046:12;;;7039:28;;;7101:15;;;;;7083:12;;;7076:46;7138:12;;;7131:28;;;;7194:15;;;7175:13;;;7168:47;8520:84:2;;;;;;;;;7231:13:41;;;8520:84:2;;8463:426;;8645:4:::1;8520:84;8463:426:::0;::::1;::::0;7730:57;;-1:-1:-1;;;8463:426:2;;;8699:20:::1;:15;8717:2;8699:20;:::i;:::-;8463:426;;;;8801:16;8463:426;;;;8857:13;8463:426;;::::0;8418:471:::1;;8981:1;8949:10;-1:-1:-1::0;;;;;8949:21:2::1;;8971:6;8949:29;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:33;8945:110;;;9032:4;9006:30;;8945:110;7620:1449;;;7596:1473;7357:1722;7337:1742;9092:14;::::0;:19;;:46:::1;;;9115:23;9092:46;9088:555;;;9442:29;::::0;-1:-1:-1;;;9442:29:2;;9465:4:::1;9442:29;::::0;::::1;342:74:41::0;9420:19:2::1;::::0;9442:4:::1;-1:-1:-1::0;;;;;9442:14:2::1;::::0;::::1;::::0;315:18:41;;9442:29:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9420:51:::0;-1:-1:-1;9489:15:2;;9485:148:::1;;9595:8;::::0;9569:49:::1;::::0;-1:-1:-1;;;;;9569:4:2::1;:17:::0;::::1;::::0;9595:8:::1;9606:11:::0;9569:17:::1;:49::i;:::-;9140:503;9088:555;9756:16;::::0;9749:49:::1;::::0;-1:-1:-1;;;9749:49:2;;9792:4:::1;9749:49;::::0;::::1;342:74:41::0;9727:19:2::1;::::0;-1:-1:-1;;;;;9756:16:2::1;::::0;9749:34:::1;::::0;315:18:41;;9749:49:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9727:71:::0;-1:-1:-1;9812:15:2;;9808:71:::1;;9843:25;9856:11;9843:12;:25::i;:::-;-1:-1:-1::0;9896:4:2::1;::::0;6000:3907;-1:-1:-1;;;;;;;6000:3907:2:o;10428:998::-;803:9:37;;;;;;;;;-1:-1:-1;;;;;803:9:37;-1:-1:-1;;;;;803:18:37;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;789:34:37;:10;-1:-1:-1;;;;;789:34:37;;825:12;781:57;;;;;-1:-1:-1;;;781:57:37;;;;;;;;:::i;:::-;-1:-1:-1;10539:16:2::1;::::0;-1:-1:-1;;;;;10530:25:2;;::::1;10539:16:::0;::::1;10530:25;::::0;:54:::1;;-1:-1:-1::0;10568:16:2::1;::::0;-1:-1:-1;;;;;10559:25:2;;::::1;10568:16:::0;::::1;10559:25;10530:54;10509:149;;;::::0;-1:-1:-1;;;10509:149:2;;8676:2:41;10509:149:2::1;::::0;::::1;8658:21:41::0;8715:2;8695:18;;;8688:30;8754:34;8734:18;;;8727:62;8825:18;8805;;;8798:46;8861:19;;10509:149:2::1;8474:412:41::0;10509:149:2::1;10682:16;::::0;-1:-1:-1;;;;;10673:25:2;;::::1;10682:16:::0;::::1;10673:25;10669:751;;;10714:40;::::0;-1:-1:-1;;;10714:40:2;;::::1;::::0;::::1;160:25:41::0;;;10714:17:2::1;-1:-1:-1::0;;;;;10714:32:2::1;::::0;::::1;::::0;133:18:41;;10714:40:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;10807:38:2::1;::::0;-1:-1:-1;;;10807:38:2;;10839:4:::1;10807:38;::::0;::::1;342:74:41::0;10789:15:2::1;::::0;-1:-1:-1;;;;;;10807:23:2;::::1;::::0;-1:-1:-1;10807:23:2::1;::::0;315:18:41;;10807:38:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10789:56;;10908:13;10924:27;10936:5;10943:7;10924:11;:27::i;:::-;10908:43;;10993:37;11008:7;11017:5;11024;10993:14;:37::i;:::-;11071:8;::::0;:39:::1;::::0;-1:-1:-1;;;11071:39:2;;::::1;::::0;::::1;9093:25:41::0;;;-1:-1:-1;;;;;9154:55:41;;;9134:18;;;9127:83;9226:18;;;9219:34;;;11071:8:2;;::::1;::::0;:16:::1;::::0;9066:18:41;;11071:39:2::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;10700:474;;10428:998:::0;;:::o;10669:751::-:1;11194:27;::::0;-1:-1:-1;;;11194:27:2;;::::1;::::0;::::1;160:25:41::0;;;11194:11:2::1;-1:-1:-1::0;;;;;11194:19:2::1;::::0;::::1;::::0;133:18:41;;11194:27:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;11254:38:2::1;::::0;-1:-1:-1;;;11254:38:2;;11286:4:::1;11254:38;::::0;::::1;342:74:41::0;11236:15:2::1;::::0;-1:-1:-1;;;;;;11254:23:2;::::1;::::0;-1:-1:-1;11254:23:2::1;::::0;315:18:41;;11254:38:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11390:8;::::0;11236:56;;-1:-1:-1;11355:54:2::1;::::0;-1:-1:-1;;;;;11355:26:2;;::::1;::::0;11390:8:::1;11236:56:::0;11355:26:::1;:54::i;:::-;11180:240;10669:751;10428:998:::0;;:::o;1153:352:31:-;1334:59;;;-1:-1:-1;;;;;5875:55:41;;;1334:59:31;;;5857:74:41;5947:18;;;;5940:34;;;1334:59:31;;;;;;;;;;5830:18:41;;;;1334:59:31;;;;;;;;;-1:-1:-1;;;1334:59:31;;;1301:102;;-1:-1:-1;;;;1301:19:31;;;;:102;;1334:59;1301:102;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1265:138;;;;1422:7;:57;;;;-1:-1:-1;1434:11:31;;:16;;:44;;;1465:4;1454:24;;;;;;;;;;;;:::i;:::-;1414:84;;;;-1:-1:-1;;;1414:84:31;;10027:2:41;1414:84:31;;;10009:21:41;10066:2;10046:18;;;10039:30;10105:16;10085:18;;;10078:44;10139:18;;1414:84:31;9825:338:41;11480:315:2;11575:15;;11537:54;;-1:-1:-1;;;11537:54:2;;;;;10342:25:41;;;-1:-1:-1;;;;;11575:15:2;;;10383:18:41;;;10376:83;11537:17:2;:29;;;;;;10315:18:41;;11537:54:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11668:16:2;;11640:13;;-1:-1:-1;11656:37:2;;-1:-1:-1;;;;;;11668:16:2;11686:6;11656:11;:37::i;:::-;11640:53;;11730:35;11745:6;11753:5;11760:4;11730:14;:35::i;792:355:31:-;974:60;;;-1:-1:-1;;;;;5875:55:41;;;974:60:31;;;5857:74:41;5947:18;;;;5940:34;;;974:60:31;;;;;;;;;;5830:18:41;;;;974:60:31;;;;;;;;;-1:-1:-1;;;974:60:31;;;941:103;;-1:-1:-1;;;;941:19:31;;;;:103;;974:60;941:103;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;905:139;;;;1063:7;:57;;;;-1:-1:-1;1075:11:31;;:16;;:44;;;1106:4;1095:24;;;;;;;;;;;;:::i;:::-;1055:85;;;;-1:-1:-1;;;1055:85:31;;10672:2:41;1055:85:31;;;10654:21:41;10711:2;10691:18;;;10684:30;10750:17;10730:18;;;10723:45;10785:18;;1055:85:31;10470:339:41;12890:203:2;12967:14;13044:6;-1:-1:-1;;;;;13029:31:2;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13025:37;;:2;:37;:::i;:::-;13003:17;:7;13014:5;13003:17;:::i;:::-;13002:61;;;;:::i;:::-;12993:70;;12890:203;;;;;:::o;11955:757::-;12073:3;12069:637;;;12136:6;12114:19;;:28;;;;:::i;:::-;12092:19;:50;12177:18;;:26;;12198:5;;12177:26;:::i;:::-;12156:18;:47;12069:637;;;12343:19;;12334:6;:28;12330:179;;;12426:6;12404:19;;:28;;;;:::i;:::-;12382:19;:50;12330:179;;;12493:1;12471:19;:23;12330:179;12535:18;;12527:5;:26;12523:173;;;12615:5;12594:18;;:26;;;;:::i;12523:173::-;12680:1;12659:18;:22;11955:757;;;:::o;427:154:41:-;-1:-1:-1;;;;;506:5:41;502:54;495:5;492:65;482:93;;571:1;568;561:12;586:247;645:6;698:2;686:9;677:7;673:23;669:32;666:52;;;714:1;711;704:12;666:52;753:9;740:23;772:31;797:5;772:31;:::i;:::-;822:5;586:247;-1:-1:-1;;;586:247:41:o;1087:180::-;1146:6;1199:2;1187:9;1178:7;1174:23;1170:32;1167:52;;;1215:1;1212;1205:12;1167:52;-1:-1:-1;1238:23:41;;1087:180;-1:-1:-1;1087:180:41:o;1999:315::-;2067:6;2075;2128:2;2116:9;2107:7;2103:23;2099:32;2096:52;;;2144:1;2141;2134:12;2096:52;2183:9;2170:23;2202:31;2227:5;2202:31;:::i;:::-;2252:5;2304:2;2289:18;;;;2276:32;;-1:-1:-1;;;1999:315:41:o;2319:251::-;2389:6;2442:2;2430:9;2421:7;2417:23;2413:32;2410:52;;;2458:1;2455;2448:12;2410:52;2490:9;2484:16;2509:31;2534:5;2509:31;:::i;2856:1186::-;2965:4;2994:2;3023;3012:9;3005:21;3046:1;3079:6;3073:13;3109:3;3131:1;3159:9;3155:2;3151:18;3141:28;;3219:2;3208:9;3204:18;3241;3231:61;;3285:4;3277:6;3273:17;3263:27;;3231:61;3338:2;3330:6;3327:14;3307:18;3304:38;3301:165;;;-1:-1:-1;;;3365:33:41;;3421:4;3418:1;3411:15;3451:4;3372:3;3439:17;3301:165;3522:18;;;2662:19;;;2714:4;2705:14;3565:18;3592:100;;;;3706:1;3701:315;;;;3558:458;;3592:100;-1:-1:-1;;3625:24:41;;3613:37;;3670:12;;;;-1:-1:-1;3592:100:41;;3701:315;2803:1;2796:14;;;2840:4;2827:18;;3796:1;3810:165;3824:6;3821:1;3818:13;3810:165;;;3902:14;;3889:11;;;3882:35;3945:16;;;;3839:10;;3810:165;;;3995:11;;;-1:-1:-1;;3558:458:41;-1:-1:-1;4033:3:41;;2856:1186;-1:-1:-1;;;;;;;;;2856:1186:41:o;4407:184::-;4477:6;4530:2;4518:9;4509:7;4505:23;4501:32;4498:52;;;4546:1;4543;4536:12;4498:52;-1:-1:-1;4569:16:41;;4407:184;-1:-1:-1;4407:184:41:o;6175:127::-;6236:10;6231:3;6227:20;6224:1;6217:31;6267:4;6264:1;6257:15;6291:4;6288:1;6281:15;6307:168;6347:7;6413:1;6409;6405:6;6401:14;6398:1;6395:21;6390:1;6383:9;6376:17;6372:45;6369:71;;;6420:18;;:::i;:::-;-1:-1:-1;6460:9:41;;6307:168::o;6480:217::-;6520:1;6546;6536:132;;6590:10;6585:3;6581:20;6578:1;6571:31;6625:4;6622:1;6615:15;6653:4;6650:1;6643:15;6536:132;-1:-1:-1;6682:9:41;;6480:217::o;7255:128::-;7295:3;7326:1;7322:6;7319:1;7316:13;7313:39;;;7332:18;;:::i;:::-;-1:-1:-1;7368:9:41;;7255:128::o;7388:258::-;7460:1;7470:113;7484:6;7481:1;7478:13;7470:113;;;7560:11;;;7554:18;7541:11;;;7534:39;7506:2;7499:10;7470:113;;;7601:6;7598:1;7595:13;7592:48;;;7636:1;7627:6;7622:3;7618:16;7611:27;7592:48;;7388:258;;;:::o;7651:818::-;7848:2;7837:9;7830:21;7811:4;7886:6;7880:13;7929:4;7924:2;7913:9;7909:18;7902:32;7963:12;7957:19;8013:6;8007:3;7996:9;7992:19;7985:35;8029:73;8095:6;8089:3;8078:9;8074:19;8069:2;8055:12;8051:21;8029:73;:::i;:::-;-1:-1:-1;;;;;8160:2:41;8152:6;8148:15;8142:22;8138:71;8133:2;8122:9;8118:18;8111:99;8264:2;8256:6;8252:15;8246:22;8241:2;8230:9;8226:18;8219:50;8324:2;8316:6;8312:15;8306:22;8300:3;8289:9;8285:19;8278:51;8385:3;8377:6;8373:16;8367:23;8360:4;8349:9;8345:20;8338:53;8459:3;8452:2;8448:7;8443:2;8435:6;8431:15;8427:29;8416:9;8412:45;8408:55;8400:63;;;;7651:818;;;;:::o;9264:274::-;9393:3;9431:6;9425:13;9447:53;9493:6;9488:3;9481:4;9473:6;9469:17;9447:53;:::i;:::-;9516:16;;;;;9264:274;-1:-1:-1;;9264:274:41:o;9543:277::-;9610:6;9663:2;9651:9;9642:7;9638:23;9634:32;9631:52;;;9679:1;9676;9669:12;9631:52;9711:9;9705:16;9764:5;9757:13;9750:21;9743:5;9740:32;9730:60;;9786:1;9783;9776:12;10814:273;10882:6;10935:2;10923:9;10914:7;10910:23;10906:32;10903:52;;;10951:1;10948;10941:12;10903:52;10983:9;10977:16;11033:4;11026:5;11022:16;11015:5;11012:27;11002:55;;11053:1;11050;11043:12;11092:422;11181:1;11224:5;11181:1;11238:270;11259:7;11249:8;11246:21;11238:270;;;11318:4;11314:1;11310:6;11306:17;11300:4;11297:27;11294:53;;;11327:18;;:::i;:::-;11377:7;11367:8;11363:22;11360:55;;;11397:16;;;;11360:55;11476:22;;;;11436:15;;;;11238:270;;;11242:3;11092:422;;;;;:::o;11519:806::-;11568:5;11598:8;11588:80;;-1:-1:-1;11639:1:41;11653:5;;11588:80;11687:4;11677:76;;-1:-1:-1;11724:1:41;11738:5;;11677:76;11769:4;11787:1;11782:59;;;;11855:1;11850:130;;;;11762:218;;11782:59;11812:1;11803:10;;11826:5;;;11850:130;11887:3;11877:8;11874:17;11871:43;;;11894:18;;:::i;:::-;-1:-1:-1;;11950:1:41;11936:16;;11965:5;;11762:218;;12064:2;12054:8;12051:16;12045:3;12039:4;12036:13;12032:36;12026:2;12016:8;12013:16;12008:2;12002:4;11999:12;11995:35;11992:77;11989:159;;;-1:-1:-1;12101:19:41;;;12133:5;;11989:159;12180:34;12205:8;12199:4;12180:34;:::i;:::-;12250:6;12246:1;12242:6;12238:19;12229:7;12226:32;12223:58;;;12261:18;;:::i;:::-;12299:20;;11519:806;-1:-1:-1;;;11519:806:41:o;12330:140::-;12388:5;12417:47;12458:4;12448:8;12444:19;12438:4;12417:47;:::i;12475:125::-;12515:4;12543:1;12540;12537:8;12534:34;;;12548:18;;:::i;:::-;-1:-1:-1;12585:9:41;;12475:125::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1643200",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "FEE_PRECISION()": "261",
            "POOL_FEE_MAX()": "285",
            "authority()": "2371",
            "deposit(uint256)": "infinite",
            "ethToLUSDRatio()": "2339",
            "frontEndAddress()": "2394",
            "getETHRewards()": "infinite",
            "getLQTYRewards()": "infinite",
            "harvest(uint256)": "infinite",
            "hopTokenAddress()": "2372",
            "lqtyTokenAddress()": "2372",
            "lusdTokenAddress()": "2373",
            "poolFee()": "2364",
            "setAuthority(address)": "infinite",
            "setEthToLUSDRatio(uint256)": "infinite",
            "setFrontEndAddress(address)": "infinite",
            "setHopTokenAddress(address)": "infinite",
            "setPoolFee(uint256)": "infinite",
            "totalAmountDeployed()": "2385",
            "totalValueDeployed()": "2362",
            "treasury()": "2372",
            "updateTreasury()": "infinite",
            "withdraw(address,uint256)": "infinite"
          },
          "internal": {
            "_accountingFor(uint256,uint256,bool)": "infinite",
            "_depositLUSD(uint256)": "infinite",
            "_tokenValue(address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "FEE_PRECISION()": "e63a391f",
          "POOL_FEE_MAX()": "739a4a37",
          "authority()": "bf7e214f",
          "deposit(uint256)": "b6b55f25",
          "ethToLUSDRatio()": "e616916a",
          "frontEndAddress()": "1d2528fc",
          "getETHRewards()": "78289ed2",
          "getLQTYRewards()": "78767d05",
          "harvest(uint256)": "ddc63262",
          "hopTokenAddress()": "10a18de2",
          "lqtyTokenAddress()": "817f6481",
          "lusdTokenAddress()": "0002fcd3",
          "poolFee()": "089fe6aa",
          "setAuthority(address)": "7a9e5e4b",
          "setEthToLUSDRatio(uint256)": "6bd0fd0f",
          "setFrontEndAddress(address)": "b7e78648",
          "setHopTokenAddress(address)": "5a762d64",
          "setPoolFee(uint256)": "9501dc87",
          "totalAmountDeployed()": "987f56ff",
          "totalValueDeployed()": "c901761d",
          "treasury()": "61d027b3",
          "updateTreasury()": "9c769787",
          "withdraw(address,uint256)": "f3fef3a3"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lusdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lqtyTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lqtyStaking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_frontEndAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hopTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV3Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_FEE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToLUSDRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontEndAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLQTYRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minETHLUSDRate\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hopTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lqtyTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lusdTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethToLUSDRatio\",\"type\":\"uint256\"}],\"name\":\"setEthToLUSDRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_frontEndAddress\",\"type\":\"address\"}],\"name\":\"setFrontEndAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hopTokenAddress\",\"type\":\"address\"}],\"name\":\"setHopTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolFee\",\"type\":\"uint256\"}],\"name\":\"setPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"amount\":\"uint\"}},\"getETHRewards()\":{\"returns\":{\"_0\":\"uint\"}},\"getLQTYRewards()\":{\"returns\":{\"_0\":\"uint\"}},\"setFrontEndAddress(address)\":{\"params\":{\"_frontEndAddress\":\"address\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"uint\",\"token\":\"address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"withdraws asset from treasury, deposits asset into stability pool\"},\"ethToLUSDRatio()\":{\"notice\":\"The target percent of eth to swap to LUSD at uniswap.  divide by 1e6 to get actual value. Examples: 500000 => 500000 / 1e6 = 0.50 = 50% 330000 => 330000 / 1e6 = 0.33 = 33%\"},\"getETHRewards()\":{\"notice\":\"get ETH rewards from SP\"},\"getLQTYRewards()\":{\"notice\":\"get LQTY rewards from SP\"},\"harvest(uint256)\":{\"notice\":\"claims LQTY & ETH Rewards.   minETHLUSDRate minimum rate of when swapping ETH->LUSD.  e.g. 3500 means we swap at a rate of 1 ETH for a minimum 3500 LUSD 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking 3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury 4.  Deposit LUSD from #2 and potentially #3 into StabilityPool\"},\"poolFee()\":{\"notice\":\"poolFee parameter for uniswap swaprouter, divide by 1e6 to get the actual value.  See https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1 Maximum allowed value is 10000 (1%) Examples: poolFee =  3000 =>  3000 / 1e6 = 0.003 = 0.3% poolFee = 10000 => 10000 / 1e6 =  0.01 = 1.0%\"},\"setFrontEndAddress(address)\":{\"notice\":\"setsFrontEndAddress for Stability pool rewards\"},\"withdraw(address,uint256)\":{\"notice\":\"withdraws from stability pool, and deposits asset into treasury\"}},\"notice\":\"Contract deploys reserves from treasury into the liquity stabilty pool, and those rewards  are then paid out to the staking contract.  See harvest() function for more details.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/allocators/LUSDAllocator.sol\":\"LUSDAllocator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/allocators/LUSDAllocator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/LiquityInterfaces.sol\\\";\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\n/**\\n *  Contract deploys reserves from treasury into the liquity stabilty pool, and those rewards\\n *  are then paid out to the staking contract.  See harvest() function for more details.\\n */\\n\\ncontract LUSDAllocator is OlympusAccessControlled {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    event Deposit(address indexed dst, uint256 amount);\\n\\n    /* ======== STATE VARIABLES ======== */\\n    IStabilityPool immutable lusdStabilityPool;\\n    ILQTYStaking immutable lqtyStaking;\\n    IWETH immutable weth; // WETH address (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\\n    ISwapRouter immutable swapRouter;\\n    ITreasury public treasury; // Olympus Treasury\\n\\n    uint256 public constant FEE_PRECISION = 1e6;\\n    uint256 public constant POOL_FEE_MAX = 10000;\\n    /**\\n     * @notice The target percent of eth to swap to LUSD at uniswap.  divide by 1e6 to get actual value.\\n     * Examples:\\n     * 500000 => 500000 / 1e6 = 0.50 = 50%\\n     * 330000 => 330000 / 1e6 = 0.33 = 33%\\n     */\\n    uint256 public ethToLUSDRatio = 330000; // 33% of ETH to LUSD\\n    /**\\n     * @notice poolFee parameter for uniswap swaprouter, divide by 1e6 to get the actual value.  See https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1\\n     * Maximum allowed value is 10000 (1%)\\n     * Examples:\\n     * poolFee =  3000 =>  3000 / 1e6 = 0.003 = 0.3%\\n     * poolFee = 10000 => 10000 / 1e6 =  0.01 = 1.0%\\n     */\\n    uint256 public poolFee = 3000; // Init the uniswap pool fee to 0.3%\\n\\n    address public hopTokenAddress; //Initially DAI, could potentially be USDC\\n\\n    // TODO(zx): I don't think we care about front-end because we're our own frontend.\\n    address public frontEndAddress; // frontEndAddress for potential liquity rewards\\n    address public lusdTokenAddress; // LUSD Address (0x5f98805A4E8be255a32880FDeC7F6728C6568bA0)\\n    address public lqtyTokenAddress; // LQTY Address (0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D)  from https://github.com/liquity/dev/blob/a12f8b737d765bfee6e1bfcf8bf7ef155c814e1e/packages/contracts/mainnetDeployment/realDeploymentOutput/output14.txt#L61\\n\\n    uint256 public totalValueDeployed; // total RFV deployed into lending pool\\n    uint256 public totalAmountDeployed; // Total amount of tokens deployed\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _authority,\\n        address _treasury,\\n        address _lusdTokenAddress,\\n        address _lqtyTokenAddress,\\n        address _stabilityPool,\\n        address _lqtyStaking,\\n        address _frontEndAddress,\\n        address _wethAddress,\\n        address _hopTokenAddress,\\n        address _uniswapV3Router\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        treasury = ITreasury(_treasury);\\n        lusdTokenAddress = _lusdTokenAddress;\\n        lqtyTokenAddress = _lqtyTokenAddress;\\n        lusdStabilityPool = IStabilityPool(_stabilityPool);\\n        lqtyStaking = ILQTYStaking(_lqtyStaking);\\n        frontEndAddress = _frontEndAddress; // address can be 0\\n        weth = IWETH(_wethAddress);\\n        hopTokenAddress = _hopTokenAddress; // address can be 0\\n        swapRouter = ISwapRouter(_uniswapV3Router);\\n\\n        // infinite approve to save gas\\n        weth.safeApprove(address(treasury), type(uint256).max);\\n        weth.safeApprove(address(swapRouter), type(uint256).max);\\n        IERC20(lusdTokenAddress).safeApprove(address(lusdStabilityPool), type(uint256).max);\\n        IERC20(lusdTokenAddress).safeApprove(address(treasury), type(uint256).max);\\n        IERC20(lqtyTokenAddress).safeApprove(address(treasury), type(uint256).max);\\n    }\\n\\n    /**\\n        StabilityPool::withdrawFromSP() and LQTYStaking::stake() will send ETH here, so capture and emit the event\\n     */\\n    receive() external payable {\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /* ======== CONFIGURE FUNCTIONS for Guardian only ======== */\\n    function setEthToLUSDRatio(uint256 _ethToLUSDRatio) external onlyGuardian {\\n        require(_ethToLUSDRatio <= FEE_PRECISION, \\\"Value must be between 0 and 1e6\\\");\\n        ethToLUSDRatio = _ethToLUSDRatio;\\n    }\\n\\n    function setPoolFee(uint256 _poolFee) external onlyGuardian {\\n        require(_poolFee <= POOL_FEE_MAX, \\\"Value must be between 0 and 10000\\\");\\n        poolFee = _poolFee;\\n    }\\n\\n    function setHopTokenAddress(address _hopTokenAddress) external onlyGuardian {\\n        hopTokenAddress = _hopTokenAddress;\\n    }\\n\\n    /**\\n     *  @notice setsFrontEndAddress for Stability pool rewards\\n     *  @param _frontEndAddress address\\n     */\\n    function setFrontEndAddress(address _frontEndAddress) external onlyGuardian {\\n        frontEndAddress = _frontEndAddress;\\n    }\\n\\n    function updateTreasury() public onlyGuardian {\\n        require(authority.vault() != address(0), \\\"Zero address: Vault\\\");\\n        require(address(authority.vault()) != address(treasury), \\\"No change\\\");\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ======== OPEN FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice claims LQTY & ETH Rewards.   minETHLUSDRate minimum rate of when swapping ETH->LUSD.  e.g. 3500 means we swap at a rate of 1 ETH for a minimum 3500 LUSD\\n     \\n        1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury\\n        4.  Deposit LUSD from #2 and potentially #3 into StabilityPool\\n     */\\n    function harvest(uint256 minETHLUSDRate) public onlyGuardian returns (bool) {\\n        uint256 stabilityPoolEthRewards = getETHRewards();\\n        uint256 stabilityPoolLqtyRewards = getLQTYRewards();\\n\\n        if (stabilityPoolEthRewards == 0 && stabilityPoolLqtyRewards == 0) {\\n            return false;\\n        }\\n        // 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        lusdStabilityPool.withdrawFromSP(0); //Passing 0 b/c we don't want to withdraw from the pool but harvest - see https://discord.com/channels/700620821198143498/818895484956835912/908031137010581594\\n\\n        // 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        uint256 balanceLqty = IERC20(lqtyTokenAddress).balanceOf(address(this)); // LQTY balance received from stability pool\\n        if (balanceLqty > 0) {\\n            //Stake\\n            lqtyStaking.stake(balanceLqty); //Stake LQTY, also receives any prior ETH+LUSD rewards from prior staking\\n        }\\n\\n        // 3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury\\n        uint256 ethBalance = address(this).balance; // Use total balance in case we have leftover from a prior failed attempt\\n        bool swappedLUSDSuccessfully;\\n        if (ethBalance > 0) {\\n            // Wrap ETH to WETH\\n            weth.deposit{value: ethBalance}();\\n\\n            uint256 wethBalance = weth.balanceOf(address(this)); //Base off of WETH balance in case we have leftover from a prior failed attempt\\n            if (ethToLUSDRatio > 0) {\\n                uint256 amountWethToSwap = (wethBalance * ethToLUSDRatio) / FEE_PRECISION;\\n\\n                uint256 amountLUSDMin = amountWethToSwap * minETHLUSDRate; //WETH and LUSD is 18 decimals\\n\\n                // From https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1\\n                // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\\n                // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\\n                // Since we are swapping WETH to DAI and then DAI to LUSD the path encoding is (WETH, 0.3%, DAI, 0.3%, LUSD).\\n                ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n                    path: abi.encodePacked(address(weth), poolFee, hopTokenAddress, poolFee, lusdTokenAddress),\\n                    recipient: address(this), //Send LUSD here\\n                    deadline: block.timestamp + 25, //25 blocks, at 12 seconds per block is 5 minutes\\n                    amountIn: amountWethToSwap,\\n                    amountOutMinimum: amountLUSDMin\\n                });\\n\\n                // Executes the swap\\n                if (swapRouter.exactInput(params) > 0) {\\n                    swappedLUSDSuccessfully = true;\\n                }\\n            }\\n        }\\n        if (ethToLUSDRatio == 0 || swappedLUSDSuccessfully) {\\n            // If swap was successful (or if percent to swap is 0), send the remaining WETH to the treasury.  Crucial check otherwise we'd send all our WETH to the treasury and not respect our desired percentage\\n\\n            // Get updated balance, send to treasury\\n            uint256 wethBalance = weth.balanceOf(address(this));\\n            if (wethBalance > 0) {\\n                // transfer WETH to treasury\\n                weth.safeTransfer(address(treasury), wethBalance);\\n            }\\n        }\\n\\n        // 4.  Deposit LUSD from #2 and potentially #3 into StabilityPool\\n        uint256 lusdBalance = IERC20(lusdTokenAddress).balanceOf(address(this));\\n        if (lusdBalance > 0) {\\n            _depositLUSD(lusdBalance);\\n        }\\n\\n        return true;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice withdraws asset from treasury, deposits asset into stability pool\\n     *  @param amount uint\\n     */\\n    function deposit(uint256 amount) external onlyGuardian {\\n        treasury.manage(lusdTokenAddress, amount); // retrieve amount of asset from treasury\\n\\n        _depositLUSD(amount);\\n    }\\n\\n    /**\\n     *  @notice withdraws from stability pool, and deposits asset into treasury\\n     *  @param token address\\n     *  @param amount uint\\n     */\\n    function withdraw(address token, uint256 amount) external onlyGuardian {\\n        require(\\n            token == lusdTokenAddress || token == lqtyTokenAddress,\\n            \\\"token address does not match LUSD nor LQTY token\\\"\\n        );\\n\\n        if (token == lusdTokenAddress) {\\n            lusdStabilityPool.withdrawFromSP(amount); // withdraw from SP\\n\\n            uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset received from stability pool\\n            uint256 value = _tokenValue(token, balance); // treasury RFV calculator\\n\\n            _accountingFor(balance, value, false); // account for withdrawal\\n\\n            treasury.deposit(balance, token, value); // deposit using value as profit so no OHM is minted\\n        } else {\\n            lqtyStaking.unstake(amount);\\n\\n            uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset received from stability pool\\n            IERC20(token).safeTransfer(address(treasury), balance);\\n        }\\n    }\\n\\n    /* ======== INTERNAL FUNCTIONS ======== */\\n\\n    function _depositLUSD(uint256 amount) internal {\\n        lusdStabilityPool.provideToSP(amount, frontEndAddress); //s either a front-end address OR 0x0\\n\\n        uint256 value = _tokenValue(lusdTokenAddress, amount); // treasury RFV calculator\\n        _accountingFor(amount, value, true); // account for deposit\\n    }\\n\\n    /**\\n     *  @notice accounting of deposits/withdrawals of assets\\n     *  @param amount uint\\n     *  @param value uint\\n     *  @param add bool\\n     */\\n    function _accountingFor(\\n        uint256 amount,\\n        uint256 value,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            totalAmountDeployed = totalAmountDeployed + amount;\\n            totalValueDeployed = totalValueDeployed + value; // track total value allocated into pools\\n        } else {\\n            // track total value allocated into pools\\n            if (amount < totalAmountDeployed) {\\n                totalAmountDeployed = totalAmountDeployed - amount;\\n            } else {\\n                totalAmountDeployed = 0;\\n            }\\n\\n            if (value < totalValueDeployed) {\\n                totalValueDeployed = totalValueDeployed - value;\\n            } else {\\n                totalValueDeployed = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    Helper method copying OlympusTreasury::_tokenValue(), whose name was 'valueOf()' in v1 \\n    Implemented here so we don't have to upgrade contract later\\n     */\\n    function _tokenValue(address _token, uint256 _amount) internal view returns (uint256 value_) {\\n        value_ = (_amount * (10**9)) / (10**IERC20Metadata(_token).decimals());\\n        return value_;\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice get ETH rewards from SP\\n     *  @return uint\\n     */\\n    function getETHRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorETHGain(address(this));\\n    }\\n\\n    /**\\n     *  @notice get LQTY rewards from SP\\n     *  @return uint\\n     */\\n    function getLQTYRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorLQTYGain(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9754a2f4826c1a4ca384d5b96bbc86e7ed6c9dde8ebedaa75194fcf6812010af\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/allocators/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xd9d3b788518fe0f0ba8f7d918cddccf96d54400e47a93fa5759db837ba619dd4\",\"license\":\"AGPL-3.0\"},\"contracts/allocators/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x24c48a2c221c395172c70effba7531b97a1455915b880a3201fd1ecf4bfe52b3\",\"license\":\"AGPL-3.0\"},\"contracts/allocators/interfaces/LiquityInterfaces.sol\":{\"content\":\"//https://etherscan.io/address/0x66017D22b0f8556afDd19FC67041899Eb65a21bb\\n/*\\n * The Stability Pool holds LUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its LUSD debt gets offset with\\n * LUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of LUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a LUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total LUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An LQTY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Functions ---\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's LQTY gain to  depositor\\n     * - Sends all tagged front end's LQTY gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n    function registerFrontEnd(uint256 _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint256);\\n\\n    /*\\n     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalLUSDDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorLQTYGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the LQTY gain earned by the front end.\\n     */\\n    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint256);\\n}\\n\\n//\\ninterface ILQTYStaking {\\n    /*\\n        sends _LQTYAmount from the caller to the staking contract, and increases their stake.\\n        If the caller already has a non-zero stake, it pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function stake(uint256 _LQTYamount) external;\\n\\n    /**\\n        reduces the caller\\u2019s stake by _LQTYamount, up to a maximum of their entire stake. \\n        It pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function unstake(uint256 _LQTYamount) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint256);\\n\\n    function getPendingLUSDGain(address _user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5506e0fb593d9f5d68a95203b381d77c14c12a77177a47887d26b26a455cdbd2\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9690aab5d4ff226e2618763ca0eb46853234aba1582ba0392c2cdcb2b3c7274c\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 8894,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "UNAUTHORIZED",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8897,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "authority",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IOlympusAuthority)3925"
          },
          {
            "astId": 1615,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "treasury",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(ITreasury)4114"
          },
          {
            "astId": 1625,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "ethToLUSDRatio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1629,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "poolFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1631,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "hopTokenAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1633,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "frontEndAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 1635,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "lusdTokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 1637,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "lqtyTokenAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 1639,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "totalValueDeployed",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1641,
            "contract": "contracts/allocators/LUSDAllocator.sol:LUSDAllocator",
            "label": "totalAmountDeployed",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_contract(IOlympusAuthority)3925": {
            "encoding": "inplace",
            "label": "contract IOlympusAuthority",
            "numberOfBytes": "20"
          },
          "t_contract(ITreasury)4114": {
            "encoding": "inplace",
            "label": "contract ITreasury",
            "numberOfBytes": "20"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "deposit(uint256)": {
            "notice": "withdraws asset from treasury, deposits asset into stability pool"
          },
          "ethToLUSDRatio()": {
            "notice": "The target percent of eth to swap to LUSD at uniswap.  divide by 1e6 to get actual value. Examples: 500000 => 500000 / 1e6 = 0.50 = 50% 330000 => 330000 / 1e6 = 0.33 = 33%"
          },
          "getETHRewards()": {
            "notice": "get ETH rewards from SP"
          },
          "getLQTYRewards()": {
            "notice": "get LQTY rewards from SP"
          },
          "harvest(uint256)": {
            "notice": "claims LQTY & ETH Rewards.   minETHLUSDRate minimum rate of when swapping ETH->LUSD.  e.g. 3500 means we swap at a rate of 1 ETH for a minimum 3500 LUSD 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking 3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury 4.  Deposit LUSD from #2 and potentially #3 into StabilityPool"
          },
          "poolFee()": {
            "notice": "poolFee parameter for uniswap swaprouter, divide by 1e6 to get the actual value.  See https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1 Maximum allowed value is 10000 (1%) Examples: poolFee =  3000 =>  3000 / 1e6 = 0.003 = 0.3% poolFee = 10000 => 10000 / 1e6 =  0.01 = 1.0%"
          },
          "setFrontEndAddress(address)": {
            "notice": "setsFrontEndAddress for Stability pool rewards"
          },
          "withdraw(address,uint256)": {
            "notice": "withdraws from stability pool, and deposits asset into treasury"
          }
        },
        "notice": "Contract deploys reserves from treasury into the liquity stabilty pool, and those rewards  are then paid out to the staking contract.  See harvest() function for more details.",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/types/OlympusAccessControlled.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IOlympusAuthority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\"\n    },\n    \"contracts/interfaces/ITreasury.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/types/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\nabstract contract Ownable is IOwnable {\\n    address internal _owner;\\n    address internal _newOwner;\\n\\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipPushed(address(0), _owner);\\n    }\\n\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceManagement() public virtual override onlyOwner {\\n        emit OwnershipPulled(_owner, address(0));\\n        _owner = address(0);\\n        _newOwner = address(0);\\n    }\\n\\n    function pushManagement(address newOwner_) public virtual override onlyOwner {\\n        emit OwnershipPushed(_owner, newOwner_);\\n        _newOwner = newOwner_;\\n    }\\n\\n    function pullManagement() public virtual override {\\n        require(msg.sender == _newOwner, \\\"Ownable: must be new owner to pull\\\");\\n        emit OwnershipPulled(_owner, _newOwner);\\n        _owner = _newOwner;\\n        _newOwner = address(0);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IOwnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n\\n    function renounceManagement() external;\\n\\n    function pushManagement(address newOwner_) external;\\n\\n    function pullManagement() external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IStaking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IsOHM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IsOHM is IERC20 {\\n    function rebase(uint256 ohmProfit_, uint256 epoch_) external returns (uint256);\\n\\n    function circulatingSupply() external view returns (uint256);\\n\\n    function gonsForBalance(uint256 amount) external view returns (uint256);\\n\\n    function balanceForGons(uint256 gons) external view returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function toG(uint256 amount) external view returns (uint256);\\n\\n    function fromG(uint256 amount) external view returns (uint256);\\n\\n    function changeDebt(\\n        uint256 amount,\\n        address debtor,\\n        bool add\\n    ) external;\\n\\n    function debtBalances(address _address) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/interfaces/IDistributor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV2ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IBondingCalculator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IBondingCalculator {\\n    function markdown(address _LP) external view returns (uint256);\\n\\n    function valuation(address pair_, uint256 amount_) external view returns (uint256 _value);\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"contracts/BondDepository.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n/// @title Olympus Bond Depository V2\\n/// @author Zeus, Indigo\\n/// Review by: JeffX\\n\\ncontract OlympusBondDepositoryV2 is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(uint256 indexed id, uint256 amount, uint256 price);\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IgOHM _gohm,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _ohm, _gohm, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _ohm.approve(address(_staking), 1e45);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice             deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id          the ID of the market\\n     * @param _amount      the amount of quote token to spend\\n     * @param _maxPrice    the maximum price at which to buy\\n     * @param _user        the recipient of the payout\\n     * @param _referral    the front end operator address\\n     * @return payout_     the amount of gOHM due\\n     * @return expiry_     the timestamp at which payout is redeemable\\n     * @return index_      the user index of the Note (used to redeem or query information)\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        override\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        )\\n    {\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = OHM out\\n         * amount = quote tokens in\\n         * price = quote tokens : ohm (i.e. 42069 DAI : OHM)\\n         *\\n         * 1e18 = OHM decimals (9) + price decimals (9)\\n         */\\n        payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of OHM that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        expiry_ = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much OHM has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        emit Bond(_id, _amount, price);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        index_ = addNote(_user, payout_, uint48(expiry_), uint48(_id), _referral);\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            (uint64 adjustBy, uint48 secondsSince, bool stillActive) = _controlDecay(_id);\\n            terms[_id].controlVariable -= adjustBy;\\n\\n            if (stillActive) {\\n                adjustment.change -= adjustBy;\\n                adjustment.timeToAdjusted -= secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // ohm decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 OHM. max payout would be 1,000 OHM (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * treasury.baseSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in OHM or quote), initial price / OHM (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = ohm decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 OHM, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 OHM.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * treasury.baseSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(ohm), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in OHM decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of OHM to be paid in OHM decimals\\n     *\\n     * @dev 1e18 = ohm decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in OHM decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in OHM decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        (uint64 decay, , ) = _controlDecay(_id);\\n        return terms[_id].controlVariable - decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in OHM decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / treasury.baseSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return decay_           change in control variable\\n     * @return secondsSince_    seconds since last change in control variable\\n     * @return active_          whether or not change remains active\\n     */\\n    function _controlDecay(uint256 _id)\\n        internal\\n        view\\n        returns (\\n            uint64 decay_,\\n            uint48 secondsSince_,\\n            bool active_\\n        )\\n    {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return (0, 0, false);\\n\\n        secondsSince_ = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        active_ = secondsSince_ < info.timeToAdjusted;\\n        decay_ = active_ ? (info.change * secondsSince_) / info.timeToAdjusted : info.change;\\n    }\\n}\\n\"\n    },\n    \"contracts/types/NoteKeeper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\n\\nimport \\\"../interfaces/IgOHM.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgOHM internal immutable gOHM;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IOlympusAuthority _authority,\\n        IERC20 _ohm,\\n        IgOHM _gohm,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _ohm) {\\n        gOHM = _gohm;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice             adds a new Note for a user, stores the front end & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user        the user that owns the Note\\n     * @param _payout      the amount of OHM due to the user\\n     * @param _expiry      the timestamp when the Note is redeemable\\n     * @param _marketID    the ID of the market deposited into\\n     * @return index_      the index of the Note in the user's array\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256 index_) {\\n        // the index of the note is the next in the user's array\\n        index_ = notes[_user].length;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gOHM.balanceTo(_payout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // front end operators can earn rewards by referring users\\n        uint256 rewards = _giveRewards(_payout, _referral);\\n\\n        // mint and stake payout\\n        treasury.mint(address(this), _payout + rewards);\\n\\n        // note that only the payout gets staked (front end rewards are in OHM)\\n        staking.stake(address(this), _payout, false, true);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return payout_     sum of payout sent, in gOHM\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_sendgOHM) {\\n            gOHM.transfer(_user, payout_); // send payout as gOHM\\n        } else {\\n            staking.unwrap(_user, payout_); // unwrap and send payout as sOHM\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _sendgOHM    send payout as gOHM or sOHM\\n     * @return             sum of payout sent, in gOHM\\n     */\\n    function redeemAll(address _user, bool _sendgOHM) external override returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _sendgOHM);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gOHM\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IBondDepository.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in OHM (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in OHM\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return payout_ uint256\\n     * @return expiry_ uint256\\n     * @return index_ uint256\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    )\\n        external\\n        returns (\\n            uint256 payout_,\\n            uint256 expiry_,\\n            uint256 index_\\n        );\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\"\n    },\n    \"contracts/types/FrontEndRewarder.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is OlympusAccessControlled {\\n    /* ========= STATE VARIABLES ========== */\\n\\n    uint256 public daoReward; // % reward for dao (3 decimals: 100 = 1%)\\n    uint256 public refReward; // % reward for referrer (3 decimals: 100 = 1%)\\n    mapping(address => uint256) public rewards; // front end operator rewards\\n    mapping(address => bool) public whitelisted; // whitelisted status for operators\\n\\n    IERC20 internal immutable ohm; // reward token\\n\\n    constructor(IOlympusAuthority _authority, IERC20 _ohm) OlympusAccessControlled(_authority) {\\n        ohm = _ohm;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to front end operator\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        ohm.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice add new market payout to user data\\n     */\\n    function _giveRewards(uint256 _payout, address _referral) internal returns (uint256) {\\n        // first we calculate rewards paid to the DAO and to the front end operator (referrer)\\n        uint256 toDAO = (_payout * daoReward) / 1e4;\\n        uint256 toRef = (_payout * refReward) / 1e4;\\n\\n        // and store them in our rewards mapping\\n        if (whitelisted[_referral]) {\\n            rewards[_referral] += toRef;\\n            rewards[authority.guardian()] += toDAO;\\n        } else {\\n            // the DAO receives both rewards if referrer is not whitelisted\\n            rewards[authority.guardian()] += toDAO + toRef;\\n        }\\n        return toDAO + toRef;\\n    }\\n\\n    /**\\n     * @notice set rewards for front end operators and DAO\\n     */\\n    function setRewards(uint256 _toFrontEnd, uint256 _toDAO) external onlyGovernor {\\n        refReward = _toFrontEnd;\\n        daoReward = _toDAO;\\n    }\\n\\n    /**\\n     * @notice add or remove addresses from the reward whitelist\\n     */\\n    function whitelist(address _operator) external onlyPolicy {\\n        whitelisted[_operator] = !whitelisted[_operator];\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IgOHM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IgOHM is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n\\n    function migrate(address _staking, address _sOHM) external;\\n}\\n\"\n    },\n    \"contracts/interfaces/INoteKeeper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gOHM remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _sendgOHM\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _sendgOHM) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\"\n    },\n    \"contracts/types/YieldSplitter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IgOHM} from \\\"../interfaces/IgOHM.sol\\\";\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\n\\n/**\\n    @title IOHMIndexWrapper\\n    @notice This interface is used to wrap cross-chain oracles to feed an index without needing IsOHM, \\n    while also being able to use sOHM on mainnet.\\n */\\ninterface IOHMIndexWrapper {\\n    function index() external view returns (uint256 index);\\n}\\n\\n/**\\n    @title YieldSplitter\\n    @notice Abstract contract that allows users to create deposits for their gOHM and have\\n            their yield claimable by the specified recipient party. This contract's functions\\n            are designed to be as generic as possible. This contract's responsibility is\\n            the accounting of the yield splitting. All other logic such as error handling,\\n            emergency controls, sending and recieving gOHM is up to the implementation of\\n            this abstract contract to handle.\\n */\\nabstract contract YieldSplitter {\\n    using SafeERC20 for IERC20;\\n\\n    error YieldSplitter_NotYourDeposit();\\n\\n    IOHMIndexWrapper public immutable indexWrapper;\\n\\n    struct DepositInfo {\\n        uint256 id;\\n        address depositor;\\n        uint256 principalAmount; // Total amount of sOhm deposited as principal, 9 decimals.\\n        uint256 agnosticAmount; // Total amount deposited priced in gOhm. 18 decimals.\\n    }\\n\\n    uint256 public idCount;\\n    mapping(uint256 => DepositInfo) public depositInfo; // depositId -> DepositInfo\\n    mapping(address => uint256[]) public depositorIds; // address -> Array of the deposit id's deposited by user\\n\\n    /**\\n        @notice Constructor\\n        @param indexWrapper_ Address of contract that will return the sOHM to gOHM index. \\n                             On mainnet this will be sOHM but on other chains can be an oracle wrapper.\\n    */\\n    constructor(address indexWrapper_) {\\n        indexWrapper = IOHMIndexWrapper(indexWrapper_);\\n    }\\n\\n    /**\\n        @notice Create a deposit.\\n        @param depositor_ Address of depositor\\n        @param amount_ Amount in gOhm. 18 decimals.\\n    */\\n    function _deposit(address depositor_, uint256 amount_) internal returns (uint256 depositId) {\\n        depositorIds[depositor_].push(idCount);\\n\\n        depositInfo[idCount] = DepositInfo({\\n            id: idCount,\\n            depositor: depositor_,\\n            principalAmount: _fromAgnostic(amount_),\\n            agnosticAmount: amount_\\n        });\\n\\n        depositId = idCount;\\n        idCount++;\\n    }\\n\\n    /**\\n        @notice Add more gOhm to the depositor's principal deposit.\\n        @param id_ Id of the deposit.\\n        @param amount_ Amount of gOhm to add. 18 decimals.\\n    */\\n    function _addToDeposit(uint256 id_, uint256 amount_) internal {\\n        DepositInfo storage userDeposit = depositInfo[id_];\\n        userDeposit.principalAmount += _fromAgnostic(amount_);\\n        userDeposit.agnosticAmount += amount_;\\n    }\\n\\n    /**\\n        @notice Withdraw part of the principal amount deposited.\\n        @param id_ Id of the deposit.\\n        @param amount_ Amount of gOHM to withdraw.\\n    */\\n    function _withdrawPrincipal(uint256 id_, uint256 amount_) internal {\\n        if (depositInfo[id_].depositor != msg.sender) revert YieldSplitter_NotYourDeposit();\\n\\n        DepositInfo storage userDeposit = depositInfo[id_];\\n        userDeposit.principalAmount -= _fromAgnostic(amount_); // Reverts if amount > principal due to underflow\\n        userDeposit.agnosticAmount -= amount_;\\n    }\\n\\n    /**\\n        @notice Withdraw all of the principal amount deposited.\\n        @param id_ Id of the deposit.\\n        @return amountWithdrawn : amount of gOHM withdrawn. 18 decimals.\\n    */\\n    function _withdrawAllPrincipal(uint256 id_) internal returns (uint256 amountWithdrawn) {\\n        if (depositInfo[id_].depositor != msg.sender) revert YieldSplitter_NotYourDeposit();\\n\\n        DepositInfo storage userDeposit = depositInfo[id_];\\n        amountWithdrawn = _toAgnostic(userDeposit.principalAmount);\\n        userDeposit.principalAmount = 0;\\n        userDeposit.agnosticAmount -= amountWithdrawn;\\n    }\\n\\n    /**\\n        @notice Redeem excess yield from your deposit in sOHM.\\n        @param id_ Id of the deposit.\\n        @return amountRedeemed : amount of yield redeemed in gOHM. 18 decimals.\\n    */\\n    function _redeemYield(uint256 id_) internal returns (uint256 amountRedeemed) {\\n        DepositInfo storage userDeposit = depositInfo[id_];\\n\\n        amountRedeemed = _getOutstandingYield(userDeposit.principalAmount, userDeposit.agnosticAmount);\\n        userDeposit.agnosticAmount = _toAgnostic(userDeposit.principalAmount);\\n    }\\n\\n    /**\\n        @notice Close a deposit. Remove all information in both the deposit info, depositorIds and recipientIds.\\n        @param id_ Id of the deposit.\\n        @dev Internally for accounting reasons principal amount is stored in 9 decimal OHM terms. \\n        Since most implementations will work will gOHM, principal here is returned externally in 18 decimal gOHM terms.\\n        @return principal : amount of principal that was deleted. in gOHM. 18 decimals.\\n        @return agnosticAmount : total amount of gOHM deleted. Principal + Yield. 18 decimals.\\n    */\\n    function _closeDeposit(uint256 id_) internal returns (uint256 principal, uint256 agnosticAmount) {\\n        principal = _toAgnostic(depositInfo[id_].principalAmount);\\n        agnosticAmount = depositInfo[id_].agnosticAmount;\\n\\n        uint256[] storage depositorIdsArray = depositorIds[depositInfo[id_].depositor];\\n        for (uint256 i = 0; i < depositorIdsArray.length; i++) {\\n            if (depositorIdsArray[i] == id_) {\\n                // Remove id from depositor's ids array\\n                depositorIdsArray[i] = depositorIdsArray[depositorIdsArray.length - 1]; // Delete integer from array by swapping with last element and calling pop()\\n                depositorIdsArray.pop();\\n                break;\\n            }\\n        }\\n\\n        delete depositInfo[id_];\\n    }\\n\\n    /**\\n        @notice Calculate outstanding yield redeemable based on principal and agnosticAmount.\\n        @return uint256 amount of yield in gOHM. 18 decimals.\\n     */\\n    function _getOutstandingYield(uint256 principal_, uint256 agnosticAmount_) internal view returns (uint256) {\\n        return agnosticAmount_ - _toAgnostic(principal_);\\n    }\\n\\n    /**\\n        @notice Convert flat sOHM value to agnostic gOHM value at current index\\n        @dev Agnostic value earns rebases. Agnostic value is amount / rebase_index.\\n             1e18 is because sOHM has 9 decimals, gOHM has 18 and index has 9.\\n     */\\n    function _toAgnostic(uint256 amount_) internal view returns (uint256) {\\n        return (amount_ * 1e18) / (indexWrapper.index());\\n    }\\n\\n    /**\\n        @notice Convert agnostic gOHM value at current index to flat sOHM value\\n        @dev Agnostic value earns rebases. sOHM amount is gOHMamount * rebase_index.\\n             1e18 is because sOHM has 9 decimals, gOHM has 18 and index has 9.\\n     */\\n    function _fromAgnostic(uint256 amount_) internal view returns (uint256) {\\n        return (amount_ * (indexWrapper.index())) / 1e18;\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\n// TODO(zx): replace with OZ implementation.\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n    //     require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    //     return _functionCallWithValue(target, data, value, errorMessage);\\n    // }\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 weiValue,\\n        string memory errorMessage\\n    ) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IAllocator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IAllocator {\\n    // Should have deposit/withdraw methods (interfaces aren't standardized)\\n    function harvest() external;\\n}\\n\"\n    },\n    \"contracts/interfaces/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.5;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"contracts/interfaces/IOHM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IOHM is IERC20 {\\n    function mint(address account_, uint256 amount_) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\"\n    },\n    \"contracts/OlympusAuthority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./interfaces/IOlympusAuthority.sol\\\";\\n\\nimport \\\"./types/OlympusAccessControlled.sol\\\";\\n\\ncontract OlympusAuthority is IOlympusAuthority, OlympusAccessControlled {\\n    /* ========== STATE VARIABLES ========== */\\n\\n    address public override governor;\\n\\n    address public override guardian;\\n\\n    address public override policy;\\n\\n    address public override vault;\\n\\n    address public newGovernor;\\n\\n    address public newGuardian;\\n\\n    address public newPolicy;\\n\\n    address public newVault;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(\\n        address _governor,\\n        address _guardian,\\n        address _policy,\\n        address _vault\\n    ) OlympusAccessControlled(IOlympusAuthority(address(this))) {\\n        governor = _governor;\\n        emit GovernorPushed(address(0), governor, true);\\n        guardian = _guardian;\\n        emit GuardianPushed(address(0), guardian, true);\\n        policy = _policy;\\n        emit PolicyPushed(address(0), policy, true);\\n        vault = _vault;\\n        emit VaultPushed(address(0), vault, true);\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function pushGovernor(address _newGovernor, bool _effectiveImmediately) external onlyGovernor {\\n        if (_effectiveImmediately) governor = _newGovernor;\\n        newGovernor = _newGovernor;\\n        emit GovernorPushed(governor, newGovernor, _effectiveImmediately);\\n    }\\n\\n    function pushGuardian(address _newGuardian, bool _effectiveImmediately) external onlyGovernor {\\n        if (_effectiveImmediately) guardian = _newGuardian;\\n        newGuardian = _newGuardian;\\n        emit GuardianPushed(guardian, newGuardian, _effectiveImmediately);\\n    }\\n\\n    function pushPolicy(address _newPolicy, bool _effectiveImmediately) external onlyGovernor {\\n        if (_effectiveImmediately) policy = _newPolicy;\\n        newPolicy = _newPolicy;\\n        emit PolicyPushed(policy, newPolicy, _effectiveImmediately);\\n    }\\n\\n    function pushVault(address _newVault, bool _effectiveImmediately) external onlyGovernor {\\n        if (_effectiveImmediately) vault = _newVault;\\n        newVault = _newVault;\\n        emit VaultPushed(vault, newVault, _effectiveImmediately);\\n    }\\n\\n    /* ========== PENDING ROLE ONLY ========== */\\n\\n    function pullGovernor() external {\\n        require(msg.sender == newGovernor, \\\"!newGovernor\\\");\\n        emit GovernorPulled(governor, newGovernor);\\n        governor = newGovernor;\\n    }\\n\\n    function pullGuardian() external {\\n        require(msg.sender == newGuardian, \\\"!newGuard\\\");\\n        emit GuardianPulled(guardian, newGuardian);\\n        guardian = newGuardian;\\n    }\\n\\n    function pullPolicy() external {\\n        require(msg.sender == newPolicy, \\\"!newPolicy\\\");\\n        emit PolicyPulled(policy, newPolicy);\\n        policy = newPolicy;\\n    }\\n\\n    function pullVault() external {\\n        require(msg.sender == newVault, \\\"!newVault\\\");\\n        emit VaultPulled(vault, newVault);\\n        vault = newVault;\\n    }\\n}\\n\"\n    },\n    \"contracts/migration/BalancerLiquidityMigrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\ninterface IBalancerVault {\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        address[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n}\\n\\ncontract BalancerLiquidityMigrator is OlympusAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    // Balancer Vault\\n    IBalancerVault internal immutable balancerVault = IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    // Olympus Treasury\\n    ITreasury internal immutable treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\\n\\n    // Sushiswap Router\\n    IUniswapV2Router internal immutable router = IUniswapV2Router(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    // Balancer 50OHM-25DAI-25WETH poolID\\n    bytes32 internal immutable balancerPoolID = 0xc45d42f801105e861e86658648e3678ad7aa70f900010000000000000000011e;\\n\\n    address internal immutable OHMETHSLP = 0x69b81152c5A8d35A67B32A4D3772795d96CaE4da;\\n    address internal immutable OHMDAISLP = 0x055475920a8c93CfFb64d039A8205F7AcC7722d3;\\n    address internal immutable OHM = 0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5;\\n    address internal immutable WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal immutable DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\\n\\n    /**\\n     * @notice Removes liquidity from OHM/ETH SLP and OHM/DAI SLP, then adds liquidty to\\n     * 50OHM-25DAI-25WETH Balancer pool.\\n     */\\n    function moveLiquidity(\\n        uint256 _amountOHMETH,\\n        uint256 _amountOHMDAI,\\n        uint256[2] memory _minOHMETH,\\n        uint256[2] memory _minOHMDAI,\\n        uint256 _deadline,\\n        bytes memory _userData\\n    ) external onlyGuardian {\\n        // Manage LPs from treasury\\n        treasury.manage(OHMETHSLP, _amountOHMETH);\\n        treasury.manage(OHMDAISLP, _amountOHMDAI);\\n\\n        // Approve LPs to be spent by the Sushiswap router\\n        IERC20(OHMETHSLP).approve(address(router), _amountOHMETH);\\n        IERC20(OHMDAISLP).approve(address(router), _amountOHMDAI);\\n\\n        // Remove specified liquidity from OHM/ETH SLP\\n        (uint256 amountETH, uint256 amountOHM1) = router.removeLiquidity(\\n            WETH,\\n            OHM,\\n            _amountOHMETH,\\n            _minOHMETH[0],\\n            _minOHMETH[1],\\n            address(this),\\n            _deadline\\n        );\\n\\n        // Remove specified liquidity from OHM/DAI SLP\\n        (uint256 amountDAI, uint256 amountOHM2) = router.removeLiquidity(\\n            DAI,\\n            OHM,\\n            _amountOHMDAI,\\n            _minOHMDAI[0],\\n            _minOHMDAI[1],\\n            address(this),\\n            _deadline\\n        );\\n\\n        // Amount of OHM removed from liquidity\\n        uint256 amountOHM = amountOHM1 + amountOHM2;\\n\\n        // Approve Balancer vault to spend tokens\\n        IERC20(OHM).approve(address(balancerVault), amountOHM);\\n        IERC20(WETH).approve(address(balancerVault), amountETH);\\n        IERC20(DAI).approve(address(balancerVault), amountDAI);\\n\\n        // Array of tokens that liquidty will be added for\\n        address[] memory tokens = new address[](3);\\n        tokens[0] = OHM;\\n        tokens[1] = DAI;\\n        tokens[2] = WETH;\\n\\n        // Max amount of each token that liquidity will be added for\\n        uint256[] memory amounts = new uint256[](3);\\n        amounts[0] = amountOHM;\\n        amounts[1] = amountDAI;\\n        amounts[2] = amountETH;\\n\\n        // Struct that is passed in when adding to the pool\\n        IBalancerVault.JoinPoolRequest memory poolRequest = IBalancerVault.JoinPoolRequest(\\n            tokens,\\n            amounts,\\n            _userData,\\n            false\\n        );\\n\\n        // Add liquidity to the Balancer pool\\n        balancerVault.joinPool(balancerPoolID, address(this), address(treasury), poolRequest);\\n\\n        // Send any leftover OHM back to guardian and WETH and DAI to treasury\\n        IERC20(OHM).safeTransfer(authority.guardian(), amountOHM);\\n        IERC20(WETH).safeTransfer(address(treasury), amountETH);\\n        IERC20(DAI).safeTransfer(address(treasury), amountDAI);\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\"\n    },\n    \"contracts/interfaces/ITreasuryV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasuryV1 {\\n    function withdraw(uint256 amount, address token) external;\\n\\n    function manage(address token, uint256 amount) external;\\n\\n    function valueOf(address token, uint256 amount) external view returns (uint256);\\n\\n    function excessReserves() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IStakingV1.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStakingV1 {\\n    function unstake(uint256 _amount, bool _trigger) external;\\n\\n    function index() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/IwsOHM.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n// Old wsOHM interface\\ninterface IwsOHM is IERC20 {\\n    function wrap(uint256 _amount) external returns (uint256);\\n\\n    function unwrap(uint256 _amount) external returns (uint256);\\n\\n    function wOHMTosOHM(uint256 _amount) external view returns (uint256);\\n\\n    function sOHMTowOHM(uint256 _amount) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/peripheral/YieldDirectorV2.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IsOHM} from \\\"../interfaces/IsOHM.sol\\\";\\nimport {IStaking} from \\\"../interfaces/IStaking.sol\\\";\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\nimport {YieldSplitter} from \\\"../types/YieldSplitter.sol\\\";\\nimport {OlympusAccessControlled, IOlympusAuthority} from \\\"../types/OlympusAccessControlled.sol\\\";\\n\\n/**\\n    @title  YieldDirectorV2 (codename Tyche) \\n    @notice This contract allows donors to deposit their gOHM and donate their rebases\\n            to any address. Donors will be able to withdraw the sOHM equivalent of their principal\\n            gOHM at any time. Donation recipients can also redeem accrued rebases at any time.\\n    @dev    Any functions dealing with initial deposits will take an address (because no ID has been\\n            assigned). After a user has deposited, all functions dealing with deposits (like\\n            withdraw or redeem functions) will take the ID of the deposit. All functions that return\\n            aggregated data grouped by user will take an address (iterates across all relevant IDs).\\n */\\ncontract YieldDirectorV2 is YieldSplitter, OlympusAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    error YieldDirector_InvalidAddress();\\n    error YieldDirector_InvalidDeposit();\\n    error YieldDirector_InvalidUpdate();\\n    error YieldDirector_InvalidWithdrawal();\\n    error YieldDirector_NotYourDeposit();\\n    error YieldDirector_NoDeposits();\\n    error YieldDirector_NoRedeemableBalance();\\n    error YieldDirector_WithdrawalsDisabled();\\n    error YieldDirector_RedeemsDisabled();\\n\\n    address public immutable sOHM;\\n    address public immutable gOHM;\\n    IStaking public immutable staking;\\n\\n    mapping(address => uint256[]) public recipientIds; // address -> array of deposit id's donating yield to the user\\n    mapping(uint256 => address) public recipientLookup; // depositId -> recipient\\n\\n    bool public depositDisabled;\\n    bool public withdrawDisabled;\\n    bool public redeemDisabled;\\n\\n    event Deposited(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event Withdrawn(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event AllWithdrawn(address indexed donor_, uint256 indexed amount_);\\n    event Donated(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event Redeemed(address indexed recipient_, uint256 amount_);\\n    event EmergencyShutdown(bool active_);\\n\\n    constructor(\\n        address sOhm_,\\n        address gOhm_,\\n        address staking_,\\n        address authority_\\n    ) OlympusAccessControlled(IOlympusAuthority(authority_)) YieldSplitter(sOhm_) {\\n        if (sOhm_ == address(0) || gOhm_ == address(0) || staking_ == address(0) || authority_ == address(0))\\n            revert YieldDirector_InvalidAddress();\\n\\n        sOHM = sOhm_;\\n        gOHM = gOhm_;\\n        staking = IStaking(staking_);\\n    }\\n\\n    /************************\\n     * Modifiers\\n     ************************/\\n    function isInvalidDeposit(uint256 amount_, address recipient_) internal view returns (bool) {\\n        return depositDisabled || amount_ <= 0 || recipient_ == address(0);\\n    }\\n\\n    function isInvalidUpdate(uint256 depositId_, uint256 amount_) internal view returns (bool) {\\n        return depositDisabled || amount_ <= 0 || depositInfo[depositId_].depositor == address(0);\\n    }\\n\\n    function isInvalidWithdrawal(uint256 amount_) internal view returns (bool) {\\n        return withdrawDisabled || amount_ <= 0;\\n    }\\n\\n    /************************\\n     * Donor Functions\\n     ************************/\\n\\n    /**\\n        @notice Deposit gOHM, records sender address and assign rebases to recipient\\n        @param amount_ Amount of gOHM debt issued from donor to recipient\\n        @param recipient_ Address to direct staking yield and vault shares to\\n    */\\n    function deposit(uint256 amount_, address recipient_) external returns (uint256 depositId) {\\n        if (isInvalidDeposit(amount_, recipient_)) revert YieldDirector_InvalidDeposit();\\n\\n        IERC20(gOHM).safeTransferFrom(msg.sender, address(this), amount_);\\n\\n        depositId = _createDeposit(amount_, recipient_);\\n    }\\n\\n    /**\\n        @notice Deposit sOHM, wrap to gOHM, and records sender address and assign rebases to recipeint\\n        @param amount_ Amount of sOHM debt issued from donor to recipient\\n        @param recipient_ Address to direct staking yield and vault shares to\\n    */\\n    function depositSohm(uint256 amount_, address recipient_) external returns (uint256 depositId) {\\n        if (isInvalidDeposit(amount_, recipient_)) revert YieldDirector_InvalidDeposit();\\n\\n        IERC20(sOHM).safeTransferFrom(msg.sender, address(this), amount_);\\n        IERC20(sOHM).approve(address(staking), amount_);\\n        uint256 gohmAmount = staking.wrap(address(this), amount_);\\n\\n        depositId = _createDeposit(gohmAmount, recipient_);\\n    }\\n\\n    /**\\n        @notice Deposit additional gOHM, and update deposit record\\n        @param depositId_ Deposit ID to direct additional gOHM to\\n        @param amount_ Amount of new gOHM debt issued from donor to recipient\\n    */\\n    function addToDeposit(uint256 depositId_, uint256 amount_) external {\\n        if (isInvalidUpdate(depositId_, amount_)) revert YieldDirector_InvalidUpdate();\\n        if (depositInfo[depositId_].depositor != msg.sender) revert YieldDirector_NotYourDeposit();\\n\\n        IERC20(gOHM).safeTransferFrom(msg.sender, address(this), amount_);\\n\\n        _increaseDeposit(depositId_, amount_);\\n    }\\n\\n    /**\\n        @notice Deposit additional sOHM, wrap to gOHM, and update deposit record\\n        @param depositId_ Deposit ID to direct additional gOHM to\\n        @param amount_ Amount of new sOHM debt issued from donor to recipient\\n    */\\n    function addToSohmDeposit(uint256 depositId_, uint256 amount_) external {\\n        if (isInvalidUpdate(depositId_, amount_)) revert YieldDirector_InvalidUpdate();\\n        if (depositInfo[depositId_].depositor != msg.sender) revert YieldDirector_NotYourDeposit();\\n\\n        IERC20(sOHM).safeTransferFrom(msg.sender, address(this), amount_);\\n        IERC20(sOHM).approve(address(staking), amount_);\\n        uint256 gohmAmount = staking.wrap(address(this), amount_);\\n\\n        _increaseDeposit(depositId_, gohmAmount);\\n    }\\n\\n    /**\\n        @notice Withdraw donor's gOHM from vault\\n        @param depositId_ Deposit ID to remove gOHM deposit from\\n        @param amount_ Amount of gOHM deposit to remove and return to donor\\n    */\\n    function withdrawPrincipal(uint256 depositId_, uint256 amount_) external {\\n        uint256 amountWithdrawn = _withdraw(depositId_, amount_);\\n\\n        IERC20(gOHM).safeTransfer(msg.sender, amountWithdrawn);\\n    }\\n\\n    /**\\n        @notice Withdraw donor's gOHM from vault, and return it as sOHM\\n        @param depositId_ Deposit ID to remove gOHM debt from\\n        @param amount_ Amount of gOHM debt to remove and return to donor as sOHM\\n    */\\n    function withdrawPrincipalAsSohm(uint256 depositId_, uint256 amount_) external {\\n        uint256 amountWithdrawn = _withdraw(depositId_, amount_);\\n\\n        IERC20(sOHM).approve(address(staking), amountWithdrawn);\\n        staking.unwrap(msg.sender, amountWithdrawn);\\n    }\\n\\n    /**\\n        @notice Withdraw all gOHM from all donor positions\\n    */\\n    function withdrawAll() external {\\n        if (withdrawDisabled) revert YieldDirector_WithdrawalsDisabled();\\n\\n        uint256[] memory depositIds = depositorIds[msg.sender];\\n\\n        uint256 depositsLength = depositIds.length;\\n        if (depositsLength == 0) revert YieldDirector_NoDeposits();\\n\\n        uint256 principalTotal = 0;\\n\\n        for (uint256 index = 0; index < depositsLength; ++index) {\\n            DepositInfo storage currDeposit = depositInfo[depositIds[index]];\\n\\n            principalTotal += currDeposit.principalAmount;\\n\\n            _withdrawAllPrincipal(depositIds[index]);\\n        }\\n\\n        IERC20(gOHM).safeTransfer(msg.sender, _toAgnostic(principalTotal));\\n\\n        emit AllWithdrawn(msg.sender, _toAgnostic(principalTotal));\\n    }\\n\\n    /**\\n        @notice Get deposited gOHM amounts for specific recipient (updated to current index\\n                based on sOHM equivalent amount deposit)\\n        @param donor_ Address of user donating yield\\n        @param recipient_ Address of user receiving donated yield\\n    */\\n    function depositsTo(address donor_, address recipient_) external view returns (uint256) {\\n        uint256[] storage depositIds = depositorIds[donor_];\\n\\n        for (uint256 index = 0; index < depositIds.length; ++index) {\\n            uint256 id = depositIds[index];\\n\\n            if (recipientLookup[id] == recipient_) {\\n                return _toAgnostic(depositInfo[id].principalAmount);\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice Return total amount of donor's gOHM deposited (updated to current index based\\n                on sOHM equivalent amount deposited)\\n        @param donor_ Address of user donating yield\\n    */\\n    function totalDeposits(address donor_) external view returns (uint256) {\\n        uint256[] storage depositIds = depositorIds[donor_];\\n        uint256 principalTotal = 0;\\n\\n        for (uint256 index = 0; index < depositIds.length; ++index) {\\n            principalTotal += depositInfo[depositIds[index]].principalAmount;\\n        }\\n\\n        return _toAgnostic(principalTotal);\\n    }\\n\\n    /**\\n        @notice Return arrays of donor's recipients and deposit amounts (gOHM value based on\\n                sOHM equivalent deposit), matched by index\\n        @param donor_ Address of user donating yield\\n    */\\n    function getAllDeposits(address donor_) external view returns (address[] memory, uint256[] memory) {\\n        uint256[] storage depositIds = depositorIds[donor_];\\n\\n        uint256 len = depositIds.length == 0 ? 1 : depositIds.length;\\n\\n        address[] memory addresses = new address[](len);\\n        uint256[] memory agnosticDeposits = new uint256[](len);\\n\\n        if (depositIds.length == 0) {\\n            addresses[0] = address(0);\\n            agnosticDeposits[0] = 0;\\n        } else {\\n            for (uint256 index = 0; index < len; ++index) {\\n                addresses[index] = recipientLookup[depositIds[index]];\\n                agnosticDeposits[index] = _toAgnostic(depositInfo[depositIds[index]].principalAmount);\\n            }\\n        }\\n\\n        return (addresses, agnosticDeposits);\\n    }\\n\\n    /**\\n        @notice Return total amount of gOHM donated to recipient since last full redemption\\n        @param donor_ Address of user donating yield\\n        @param recipient_ Address of user recieiving donated yield\\n    */\\n    function donatedTo(address donor_, address recipient_) external view returns (uint256) {\\n        uint256[] storage depositIds = depositorIds[donor_];\\n\\n        for (uint256 index = 0; index < depositIds.length; ++index) {\\n            if (recipientLookup[depositIds[index]] == recipient_) {\\n                return redeemableBalance(depositIds[index]);\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /**\\n        @notice Return total amount of gOHM donated from donor since last full redemption\\n        @param donor_ Address of user donating yield\\n    */\\n    function totalDonated(address donor_) external view returns (uint256) {\\n        uint256[] storage depositIds = depositorIds[donor_];\\n\\n        uint256 principalTotal = 0;\\n        uint256 agnosticTotal = 0;\\n\\n        for (uint256 index = 0; index < depositIds.length; ++index) {\\n            DepositInfo storage currDeposit = depositInfo[depositIds[index]];\\n\\n            principalTotal += currDeposit.principalAmount;\\n            agnosticTotal += currDeposit.agnosticAmount;\\n        }\\n\\n        return _getOutstandingYield(principalTotal, agnosticTotal);\\n    }\\n\\n    /************************\\n     * Recipient Functions\\n     ************************/\\n\\n    /**\\n        @notice Get redeemable gOHM balance of a specific deposit\\n        @param depositId_ Deposit ID for this donation\\n    */\\n    function redeemableBalance(uint256 depositId_) public view returns (uint256) {\\n        DepositInfo storage currDeposit = depositInfo[depositId_];\\n\\n        return _getOutstandingYield(currDeposit.principalAmount, currDeposit.agnosticAmount);\\n    }\\n\\n    /**\\n        @notice Get redeemable gOHM balance of a recipient address\\n        @param recipient_ Address of user receiving donated yield\\n     */\\n    function totalRedeemableBalance(address recipient_) public view returns (uint256) {\\n        uint256[] storage receiptIds = recipientIds[recipient_];\\n\\n        uint256 agnosticRedeemable = 0;\\n\\n        for (uint256 index = 0; index < receiptIds.length; ++index) {\\n            agnosticRedeemable += redeemableBalance(receiptIds[index]);\\n        }\\n\\n        return agnosticRedeemable;\\n    }\\n\\n    /**\\n        @notice Redeem recipient's donated amount of sOHM at current index from one donor as gOHM\\n        @param depositId_ Deposit ID for this donation\\n    */\\n    function redeemYield(uint256 depositId_) external {\\n        uint256 amountRedeemed = _redeem(depositId_);\\n\\n        IERC20(gOHM).safeTransfer(msg.sender, amountRedeemed);\\n    }\\n\\n    /**\\n        @notice Redeem recipient's donated amount of sOHM at current index\\n        @param depositId_ Deposit id for this donation\\n    */\\n    function redeemYieldAsSohm(uint256 depositId_) external {\\n        uint256 amountRedeemed = _redeem(depositId_);\\n\\n        IERC20(sOHM).approve(address(staking), amountRedeemed);\\n        staking.unwrap(msg.sender, amountRedeemed);\\n    }\\n\\n    /**\\n        @notice Redeem recipient's full donated amount of sOHM at current index as gOHM\\n    */\\n    function redeemAllYield() external {\\n        uint256 amountRedeemed = _redeemAll();\\n\\n        IERC20(gOHM).safeTransfer(msg.sender, amountRedeemed);\\n    }\\n\\n    /**\\n        @notice Redeem recipient's full donated amount of sOHM at current index as gOHM\\n    */\\n    function redeemAllYieldAsSohm() external {\\n        uint256 amountRedeemed = _redeemAll();\\n\\n        IERC20(sOHM).approve(address(staking), amountRedeemed);\\n        staking.unwrap(msg.sender, amountRedeemed);\\n    }\\n\\n    /************************\\n     * Internal Functions\\n     ************************/\\n\\n    /**\\n        @notice Creates a new deposit directing the yield from the deposited gOHM amount\\n                to the prescribed recipient\\n        @param amount_ Quantity of gOHM deposited redirecting yield to the recipient\\n        @param recipient_ The address of the user who will be entitled to claim the donated yield\\n    */\\n    function _createDeposit(uint256 amount_, address recipient_) internal returns (uint256 depositId) {\\n        depositId = _deposit(msg.sender, amount_);\\n        recipientIds[recipient_].push(depositId);\\n        recipientLookup[depositId] = recipient_;\\n\\n        emit Deposited(msg.sender, recipient_, amount_);\\n    }\\n\\n    /**\\n        @notice Increases the amount of gOHM directing yield to a recipient\\n        @param depositId_ The global ID number of the deposit to add the additional deposit to\\n        @param amount_ Quantity of new gOHM deposited redirecting yield to the current deposit's recipient\\n    */\\n    function _increaseDeposit(uint256 depositId_, uint256 amount_) internal {\\n        _addToDeposit(depositId_, amount_);\\n\\n        emit Deposited(depositInfo[depositId_].depositor, recipientLookup[depositId_], amount_);\\n    }\\n\\n    /**\\n        @notice Withdraw gOHM deposit from vault\\n        @param depositId_ Deposit ID to remove gOHM deposit from\\n        @param amount_ Amount of gOHM deposit to remove and return to donor \\n    */\\n    function _withdraw(uint256 depositId_, uint256 amount_) internal returns (uint256 amountWithdrawn) {\\n        if (isInvalidWithdrawal(amount_)) revert YieldDirector_InvalidWithdrawal();\\n\\n        if (amount_ >= _toAgnostic(depositInfo[depositId_].principalAmount)) {\\n            amountWithdrawn = _withdrawAllPrincipal(depositId_);\\n        } else {\\n            _withdrawPrincipal(depositId_, amount_);\\n            amountWithdrawn = amount_;\\n        }\\n\\n        emit Withdrawn(msg.sender, recipientLookup[depositId_], amountWithdrawn);\\n    }\\n\\n    /**\\n        @notice Redeem available gOHM yield from a specific deposit\\n        @param depositId_ Deposit ID to withdraw gOHM yield from\\n    */\\n    function _redeem(uint256 depositId_) internal returns (uint256 amountRedeemed) {\\n        if (redeemDisabled) revert YieldDirector_RedeemsDisabled();\\n        if (recipientLookup[depositId_] != msg.sender) revert YieldDirector_NotYourDeposit();\\n\\n        amountRedeemed = _redeemYield(depositId_);\\n        if (amountRedeemed == 0) revert YieldDirector_NoRedeemableBalance();\\n\\n        if (depositInfo[depositId_].principalAmount == 0) {\\n            _closeDeposit(depositId_);\\n\\n            uint256[] storage receiptIds = recipientIds[msg.sender];\\n            for (uint256 i = 0; i < receiptIds.length; ++i) {\\n                if (receiptIds[i] == depositId_) {\\n                    // Remove id from depositor's ids array\\n                    receiptIds[i] = receiptIds[receiptIds.length - 1]; // Delete integer from array by swapping with last element and calling pop()\\n                    receiptIds.pop();\\n                    break;\\n                }\\n            }\\n\\n            delete recipientLookup[depositId_];\\n        }\\n\\n        emit Redeemed(msg.sender, amountRedeemed);\\n        emit Donated(depositInfo[depositId_].depositor, msg.sender, amountRedeemed);\\n    }\\n\\n    /**\\n        @notice Redeem all available gOHM yield from the vault\\n    */\\n    function _redeemAll() internal returns (uint256 amountRedeemed) {\\n        if (redeemDisabled) revert YieldDirector_RedeemsDisabled();\\n\\n        amountRedeemed = 0;\\n\\n        // Have to read the IDs into memory because with each redemption\\n        // an ID is removed from the state array\\n        uint256[] memory receiptIds = recipientIds[msg.sender];\\n\\n        for (uint256 index = 0; index < receiptIds.length; ++index) {\\n            uint256 currRedemption = _redeem(receiptIds[index]);\\n            amountRedeemed += currRedemption;\\n\\n            emit Donated(depositInfo[receiptIds[index]].depositor, msg.sender, currRedemption);\\n        }\\n\\n        emit Redeemed(msg.sender, amountRedeemed);\\n    }\\n\\n    /************************\\n     * Emergency Functions\\n     ************************/\\n\\n    function emergencyShutdown(bool active_) external onlyGovernor {\\n        depositDisabled = active_;\\n        withdrawDisabled = active_;\\n        redeemDisabled = active_;\\n        emit EmergencyShutdown(active_);\\n    }\\n\\n    function disableDeposits(bool active_) external onlyGovernor {\\n        depositDisabled = active_;\\n    }\\n\\n    function disableWithdrawals(bool active_) external onlyGovernor {\\n        withdrawDisabled = active_;\\n    }\\n\\n    function disableRedeems(bool active_) external onlyGovernor {\\n        redeemDisabled = active_;\\n    }\\n}\\n\"\n    },\n    \"contracts/peripheral/YieldDirector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\nimport {IsOHM} from \\\"../interfaces/IsOHM.sol\\\";\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\nimport {IYieldDirector} from \\\"../interfaces/IYieldDirector.sol\\\";\\nimport {OlympusAccessControlled, IOlympusAuthority} from \\\"../types/OlympusAccessControlled.sol\\\";\\n\\n/**\\n    @title YieldDirector (codename Tyche) \\n    @notice This contract allows donors to deposit their sOHM and donate their rebases\\n            to any address. Donors will be able to withdraw their principal\\n            sOHM at any time. Donation recipients can also redeem accrued rebases at any time.\\n */\\ncontract YieldDirector is IYieldDirector, OlympusAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\n\\n    address public immutable sOHM;\\n\\n    bool public depositDisabled;\\n    bool public withdrawDisabled;\\n    bool public redeemDisabled;\\n\\n    struct DonationInfo {\\n        address recipient;\\n        uint256 deposit; // Total non-agnostic amount deposited\\n        uint256 agnosticDeposit; // Total agnostic amount deposited\\n        uint256 carry; // Amount of sOHM accumulated over on deposit/withdraw\\n        uint256 indexAtLastChange; // Index of last deposit/withdraw\\n    }\\n\\n    struct RecipientInfo {\\n        uint256 totalDebt; // Non-agnostic debt\\n        uint256 carry; // Total non-agnostic value donating to recipient\\n        uint256 agnosticDebt; // Total agnostic value of carry + debt\\n        uint256 indexAtLastChange; // Index when agnostic value changed\\n    }\\n\\n    mapping(address => DonationInfo[]) public donationInfo;\\n    mapping(address => RecipientInfo) public recipientInfo;\\n\\n    event Deposited(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event Withdrawn(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event AllWithdrawn(address indexed donor_, uint256 indexed amount_);\\n    event Donated(address indexed donor_, address indexed recipient_, uint256 amount_);\\n    event Redeemed(address indexed recipient_, uint256 amount_);\\n    event EmergencyShutdown(bool active_);\\n\\n    constructor(address sOhm_, address authority_) OlympusAccessControlled(IOlympusAuthority(authority_)) {\\n        require(sOhm_ != address(0), \\\"Invalid address for sOHM\\\");\\n\\n        sOHM = sOhm_;\\n    }\\n\\n    /************************\\n     * Donor Functions\\n     ************************/\\n\\n    /**\\n        @notice Deposit sOHM, records sender address and assign rebases to recipient\\n        @param amount_ Amount of sOHM debt issued from donor to recipient\\n        @param recipient_ Address to direct staking yield and vault shares to\\n    */\\n    function deposit(uint256 amount_, address recipient_) external override {\\n        require(!depositDisabled, \\\"Deposits currently disabled\\\");\\n        require(amount_ > 0, \\\"Invalid deposit amount\\\");\\n        require(recipient_ != address(0), \\\"Invalid recipient address\\\");\\n\\n        IERC20(sOHM).safeTransferFrom(msg.sender, address(this), amount_);\\n\\n        uint256 index = IsOHM(sOHM).index();\\n\\n        // Record donors's issued debt to recipient address\\n        DonationInfo[] storage donations = donationInfo[msg.sender];\\n        uint256 recipientIndex = _getRecipientIndex(msg.sender, recipient_);\\n\\n        if (recipientIndex == MAX_UINT256) {\\n            donations.push(\\n                DonationInfo({\\n                    recipient: recipient_,\\n                    deposit: amount_,\\n                    agnosticDeposit: _toAgnostic(amount_),\\n                    carry: 0,\\n                    indexAtLastChange: index\\n                })\\n            );\\n        } else {\\n            DonationInfo storage donation = donations[recipientIndex];\\n\\n            donation.carry += _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n            donation.deposit += amount_;\\n            donation.agnosticDeposit = _toAgnostic(donation.deposit);\\n            donation.indexAtLastChange = index;\\n        }\\n\\n        RecipientInfo storage recipient = recipientInfo[recipient_];\\n\\n        // Calculate value carried over since last change\\n        recipient.carry += _getAccumulatedValue(recipient.agnosticDebt, recipient.indexAtLastChange);\\n        recipient.totalDebt += amount_;\\n        recipient.agnosticDebt = _toAgnostic(recipient.totalDebt + recipient.carry);\\n        recipient.indexAtLastChange = index;\\n\\n        emit Deposited(msg.sender, recipient_, amount_);\\n    }\\n\\n    /**\\n        @notice Withdraw donor's sOHM from vault and subtracts debt from recipient\\n     */\\n    function withdraw(uint256 amount_, address recipient_) external override {\\n        require(!withdrawDisabled, \\\"Withdraws currently disabled\\\");\\n        require(amount_ > 0, \\\"Invalid withdraw amount\\\");\\n\\n        uint256 index = IsOHM(sOHM).index();\\n\\n        // Donor accounting\\n        uint256 recipientIndex = _getRecipientIndex(msg.sender, recipient_);\\n        require(recipientIndex != MAX_UINT256, \\\"No donations to recipient\\\");\\n\\n        DonationInfo storage donation = donationInfo[msg.sender][recipientIndex];\\n\\n        if (amount_ >= donation.deposit) {\\n            // Report how much was donated then clear donation information\\n            uint256 accumulated = donation.carry +\\n                _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n            emit Donated(msg.sender, recipient_, accumulated);\\n\\n            delete donationInfo[msg.sender][recipientIndex];\\n\\n            // If element was in middle of array, bring last element to deleted index\\n            uint256 lastIndex = donationInfo[msg.sender].length - 1;\\n            if (recipientIndex != lastIndex) {\\n                donationInfo[msg.sender][recipientIndex] = donationInfo[msg.sender][lastIndex];\\n                donationInfo[msg.sender].pop();\\n            }\\n        } else {\\n            donation.carry += _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n            donation.deposit -= amount_;\\n            donation.agnosticDeposit = _toAgnostic(donation.deposit);\\n            donation.indexAtLastChange = index;\\n        }\\n\\n        // Recipient accounting\\n        RecipientInfo storage recipient = recipientInfo[recipient_];\\n        recipient.carry += _getAccumulatedValue(recipient.agnosticDebt, recipient.indexAtLastChange);\\n        recipient.totalDebt -= amount_;\\n        recipient.agnosticDebt = _toAgnostic(recipient.totalDebt + recipient.carry);\\n        recipient.indexAtLastChange = index;\\n\\n        IERC20(sOHM).safeTransfer(msg.sender, amount_);\\n\\n        emit Withdrawn(msg.sender, recipient_, amount_);\\n    }\\n\\n    /**\\n        @notice Withdraw from all donor positions\\n     */\\n    function withdrawAll() external override {\\n        require(!withdrawDisabled, \\\"Withdraws currently disabled\\\");\\n\\n        DonationInfo[] storage donations = donationInfo[msg.sender];\\n\\n        uint256 donationsLength = donations.length;\\n        require(donationsLength != 0, \\\"User not donating to anything\\\");\\n\\n        uint256 sOhmIndex = IsOHM(sOHM).index();\\n        uint256 total = 0;\\n\\n        for (uint256 index = 0; index < donationsLength; index++) {\\n            DonationInfo storage donation = donations[index];\\n\\n            total += donation.deposit;\\n\\n            RecipientInfo storage recipient = recipientInfo[donation.recipient];\\n            recipient.carry += _getAccumulatedValue(recipient.agnosticDebt, recipient.indexAtLastChange);\\n            recipient.totalDebt -= donation.deposit;\\n            recipient.agnosticDebt = _toAgnostic(recipient.totalDebt + recipient.carry);\\n            recipient.indexAtLastChange = sOhmIndex;\\n\\n            // Report amount donated\\n            uint256 accumulated = donation.carry +\\n                _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n            emit Donated(msg.sender, donation.recipient, accumulated);\\n        }\\n\\n        // Delete donor's entire donations array\\n        delete donationInfo[msg.sender];\\n\\n        IERC20(sOHM).safeTransfer(msg.sender, total);\\n\\n        emit AllWithdrawn(msg.sender, total);\\n    }\\n\\n    /**\\n        @notice Get deposited sOHM amount for specific recipient\\n     */\\n    function depositsTo(address donor_, address recipient_) external view override returns (uint256) {\\n        uint256 recipientIndex = _getRecipientIndex(donor_, recipient_);\\n        require(recipientIndex != MAX_UINT256, \\\"No deposits\\\");\\n\\n        return donationInfo[donor_][recipientIndex].deposit;\\n    }\\n\\n    /**\\n        @notice Return total amount of donor's sOHM deposited\\n     */\\n    function totalDeposits(address donor_) external view override returns (uint256) {\\n        DonationInfo[] storage donations = donationInfo[donor_];\\n        require(donations.length != 0, \\\"User is not donating\\\");\\n\\n        uint256 total = 0;\\n        for (uint256 index = 0; index < donations.length; index++) {\\n            total += donations[index].deposit;\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n        @notice Return arrays of donor's recipients and deposit amounts, matched by index\\n     */\\n    function getAllDeposits(address donor_) external view override returns (address[] memory, uint256[] memory) {\\n        DonationInfo[] storage donations = donationInfo[donor_];\\n        require(donations.length != 0, \\\"User is not donating\\\");\\n\\n        uint256 len = donations.length;\\n\\n        address[] memory addresses = new address[](len);\\n        uint256[] memory deposits = new uint256[](len);\\n\\n        for (uint256 index = 0; index < len; index++) {\\n            addresses[index] = donations[index].recipient;\\n            deposits[index] = donations[index].deposit;\\n        }\\n\\n        return (addresses, deposits);\\n    }\\n\\n    /**\\n        @notice Return total amount of sOHM donated to recipient since last full withdrawal\\n     */\\n    function donatedTo(address donor_, address recipient_) external view override returns (uint256) {\\n        uint256 recipientIndex = _getRecipientIndex(donor_, recipient_);\\n        require(recipientIndex != MAX_UINT256, \\\"No donations to recipient\\\");\\n\\n        DonationInfo storage donation = donationInfo[donor_][recipientIndex];\\n        return donation.carry + _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n    }\\n\\n    /**\\n        @notice Return total amount of sOHM donated from donor since last full withdrawal\\n     */\\n    function totalDonated(address donor_) external view override returns (uint256) {\\n        DonationInfo[] storage donations = donationInfo[donor_];\\n        uint256 total = 0;\\n\\n        for (uint256 index = 0; index < donations.length; index++) {\\n            DonationInfo storage donation = donations[index];\\n            total += donation.carry + _getAccumulatedValue(donation.agnosticDeposit, donation.indexAtLastChange);\\n        }\\n\\n        return total;\\n    }\\n\\n    /************************\\n     * Recipient Functions\\n     ************************/\\n\\n    /**\\n        @notice Get redeemable sOHM balance of a recipient address\\n     */\\n    function redeemableBalance(address recipient_) public view override returns (uint256) {\\n        RecipientInfo storage recipient = recipientInfo[recipient_];\\n        return recipient.carry + _getAccumulatedValue(recipient.agnosticDebt, recipient.indexAtLastChange);\\n    }\\n\\n    /**\\n        @notice Redeem recipient's full donated amount of sOHM at current index\\n        @dev Note that a recipient redeeming their vault shares effectively pays back all\\n             sOHM debt to donors at the time of redeem. Any future incurred debt will\\n             be accounted for with a subsequent redeem or a withdrawal by the specific donor.\\n     */\\n    function redeem() external override {\\n        require(!redeemDisabled, \\\"Redeems currently disabled\\\");\\n\\n        uint256 redeemable = redeemableBalance(msg.sender);\\n        require(redeemable > 0, \\\"No redeemable balance\\\");\\n\\n        RecipientInfo storage recipient = recipientInfo[msg.sender];\\n        recipient.agnosticDebt = _toAgnostic(recipient.totalDebt);\\n        recipient.carry = 0;\\n        recipient.indexAtLastChange = IsOHM(sOHM).index();\\n\\n        IERC20(sOHM).safeTransfer(msg.sender, redeemable);\\n\\n        emit Redeemed(msg.sender, redeemable);\\n    }\\n\\n    /************************\\n     * Utility Functions\\n     ************************/\\n\\n    /**\\n        @notice Get accumulated sOHM since last time agnostic value changed.\\n     */\\n    function _getAccumulatedValue(uint256 gAmount_, uint256 indexAtLastChange_) internal view returns (uint256) {\\n        return _fromAgnostic(gAmount_) - _fromAgnosticAtIndex(gAmount_, indexAtLastChange_);\\n    }\\n\\n    /**\\n        @notice Get array index of a particular recipient in a donor's donationInfo array.\\n        @return Array index of recipient address. If recipient not present, returns max uint256 value.\\n     */\\n    function _getRecipientIndex(address donor_, address recipient_) internal view returns (uint256) {\\n        DonationInfo[] storage info = donationInfo[donor_];\\n\\n        uint256 existingIndex = MAX_UINT256;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].recipient == recipient_) {\\n                existingIndex = i;\\n                break;\\n            }\\n        }\\n        return existingIndex;\\n    }\\n\\n    /**\\n        @notice Convert flat sOHM value to agnostic value at current index\\n        @dev Agnostic value earns rebases. Agnostic value is amount / rebase_index.\\n             1e9 is because sOHM has 9 decimals.\\n     */\\n    function _toAgnostic(uint256 amount_) internal view returns (uint256) {\\n        return (amount_ * 1e9) / (IsOHM(sOHM).index());\\n    }\\n\\n    /**\\n        @notice Convert agnostic value at current index to flat sOHM value\\n        @dev Agnostic value earns rebases. Agnostic value is amount / rebase_index.\\n             1e9 is because sOHM has 9 decimals.\\n     */\\n    function _fromAgnostic(uint256 amount_) internal view returns (uint256) {\\n        return (amount_ * (IsOHM(sOHM).index())) / 1e9;\\n    }\\n\\n    /**\\n        @notice Convert flat sOHM value to agnostic value at a given index value\\n        @dev Agnostic value earns rebases. Agnostic value is amount / rebase_index.\\n             1e9 is because sOHM has 9 decimals.\\n     */\\n    function _fromAgnosticAtIndex(uint256 amount_, uint256 index_) internal pure returns (uint256) {\\n        return (amount_ * index_) / 1e9;\\n    }\\n\\n    /************************\\n     * Emergency Functions\\n     ************************/\\n\\n    function emergencyShutdown(bool active_) external onlyGovernor {\\n        depositDisabled = active_;\\n        withdrawDisabled = active_;\\n        redeemDisabled = active_;\\n        emit EmergencyShutdown(active_);\\n    }\\n\\n    function disableDeposits(bool active_) external onlyGovernor {\\n        depositDisabled = active_;\\n    }\\n\\n    function disableWithdrawals(bool active_) external onlyGovernor {\\n        withdrawDisabled = active_;\\n    }\\n\\n    function disableRedeems(bool active_) external onlyGovernor {\\n        redeemDisabled = active_;\\n    }\\n}\\n\"\n    },\n    \"contracts/interfaces/IYieldDirector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\ninterface IYieldDirector {\\n    function deposit(uint256 amount_, address recipient_) external;\\n\\n    function withdraw(uint256 amount_, address recipient_) external;\\n\\n    function withdrawAll() external;\\n\\n    function depositsTo(address donor_, address recipient_) external view returns (uint256);\\n\\n    function getAllDeposits(address donor_) external view returns (address[] memory, uint256[] memory);\\n\\n    function totalDeposits(address donor_) external view returns (uint256);\\n\\n    function donatedTo(address donor_, address recipient_) external view returns (uint256);\\n\\n    function totalDonated(address donor_) external view returns (uint256);\\n\\n    function redeem() external;\\n\\n    function redeemableBalance(address recipient_) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/allocators/MetaGovernanceAllocator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\n\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\ninterface IStaking {\\n    function stake(uint256 _amount, address _recipient) external returns (bool);\\n\\n    function unstake(uint256 _amount, bool _trigger) external;\\n\\n    function claim(address _recipient) external;\\n}\\n\\n/// @title   Meta Governance Allocator\\n/// @author  Olympus\\n/// @notice  Manages BTRFLY or LOBI from treasury to stake back to treasury\\ncontract MetaGovernanceAllocator is OlympusAccessControlled {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Olympus Treasury\\n    ITreasury internal treasury = ITreasury(0x9A315BdF513367C0377FB36545857d12e85813Ef);\\n    /// @notice BTRFLY token address\\n    address internal immutable BTRFLY = 0xC0d4Ceb216B3BA9C3701B291766fDCbA977ceC3A;\\n    /// @notice Staked BTRFLY token address\\n    address internal immutable xBTRFLY = 0xCC94Faf235cC5D3Bf4bEd3a30db5984306c86aBC;\\n    /// @notice Redacted staking contract\\n    address internal immutable redactedStaking = 0xBdE4Dfb0dbb0Dd8833eFb6C5BD0Ce048C852C487;\\n    /// @notice LOBI token address\\n    address internal immutable LOBI = 0xDEc41Db0c33F3F6f3cb615449C311ba22D418A8d;\\n    /// @notice Staked LOBI token address\\n    address internal immutable sLOBI = 0x8Ab17e2cd4F894F8641A31f99F673a5762F53c8e;\\n    /// @notice LOBI Staking contract\\n    address internal immutable lobiStaking = 0x3818eff63418e0a0BA3980ABA5fF388b029b6d90;\\n\\n    /// CONSTRUCTOR ///\\n\\n    ///  @param _authority  Address of the Olympus Authority contract\\n    constructor(IOlympusAuthority _authority) OlympusAccessControlled(_authority) {}\\n\\n    /// POLICY FUNCTIONS ///\\n\\n    /// @notice  If vault has been updated through authority contract update treasury address\\n    function updateTreasury() external onlyGuardian {\\n        require(authority.vault() != address(0), \\\"Zero address: Vault\\\");\\n        require(address(authority.vault()) != address(treasury), \\\"No change\\\");\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /// @notice           Stakes either BTRFLY or LOBI from treasury\\n    /// @param _redacted  Bool if staking to redacted or lobi\\n    /// @param _amount    Amount of token that will be withdrawn from treasury and staked\\n    function stake(bool _redacted, uint256 _amount) external onlyGuardian {\\n        (address staking, address token, ) = _redactedOrLobi(_redacted);\\n\\n        // retrieve amount of token from treasury\\n        treasury.manage(token, _amount);\\n\\n        // approve token to be spent by staking\\n        IERC20(token).approve(staking, _amount);\\n\\n        // stake token to treasury\\n        IStaking(staking).stake(_amount, address(treasury));\\n\\n        // claim stake for treasury\\n        IStaking(staking).claim(address(treasury));\\n    }\\n\\n    /// @notice           Unstakes either BTRFLY or LOBI from treasury\\n    /// @param _redacted  Bool if unstakiung to redacted or lobi\\n    /// @param _amount    Amount of token that will be withdrawn from treasury and unstaked\\n    function unstake(bool _redacted, uint256 _amount) external onlyGuardian {\\n        (address staking, address token, address stakedToken) = _redactedOrLobi(_redacted);\\n\\n        // retrieve amount of staked token from treasury\\n        treasury.manage(stakedToken, _amount);\\n\\n        // approve staked token to be spent by staking contract\\n        IERC20(stakedToken).approve(staking, _amount);\\n\\n        // unstake token\\n        IStaking(staking).unstake(_amount, false);\\n\\n        // send token back to treasury\\n        IERC20(token).safeTransfer(address(treasury), _amount);\\n    }\\n\\n    /// INTERNAL VIEW FUNCTIONS ///\\n\\n    /// @notice              Returns addresses depending on wanting to interact with redacted or lobi\\n    /// @param _redacted     Bool if address for redacted or lobi\\n    /// @return staking      Address of staking contract\\n    /// @return token        Address of native token\\n    /// @return stakedToken  Address of staked token\\n    function _redactedOrLobi(bool _redacted)\\n        internal\\n        view\\n        returns (\\n            address staking,\\n            address token,\\n            address stakedToken\\n        )\\n    {\\n        if (_redacted) {\\n            staking = redactedStaking;\\n            token = BTRFLY;\\n            stakedToken = xBTRFLY;\\n        } else {\\n            staking = lobiStaking;\\n            token = LOBI;\\n            stakedToken = sLOBI;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/allocators/LUSDAllocator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.10;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/ISwapRouter.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/LiquityInterfaces.sol\\\";\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\n/**\\n *  Contract deploys reserves from treasury into the liquity stabilty pool, and those rewards\\n *  are then paid out to the staking contract.  See harvest() function for more details.\\n */\\n\\ncontract LUSDAllocator is OlympusAccessControlled {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    event Deposit(address indexed dst, uint256 amount);\\n\\n    /* ======== STATE VARIABLES ======== */\\n    IStabilityPool immutable lusdStabilityPool;\\n    ILQTYStaking immutable lqtyStaking;\\n    IWETH immutable weth; // WETH address (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2)\\n    ISwapRouter immutable swapRouter;\\n    ITreasury public treasury; // Olympus Treasury\\n\\n    uint256 public constant FEE_PRECISION = 1e6;\\n    uint256 public constant POOL_FEE_MAX = 10000;\\n    /**\\n     * @notice The target percent of eth to swap to LUSD at uniswap.  divide by 1e6 to get actual value.\\n     * Examples:\\n     * 500000 => 500000 / 1e6 = 0.50 = 50%\\n     * 330000 => 330000 / 1e6 = 0.33 = 33%\\n     */\\n    uint256 public ethToLUSDRatio = 330000; // 33% of ETH to LUSD\\n    /**\\n     * @notice poolFee parameter for uniswap swaprouter, divide by 1e6 to get the actual value.  See https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1\\n     * Maximum allowed value is 10000 (1%)\\n     * Examples:\\n     * poolFee =  3000 =>  3000 / 1e6 = 0.003 = 0.3%\\n     * poolFee = 10000 => 10000 / 1e6 =  0.01 = 1.0%\\n     */\\n    uint256 public poolFee = 3000; // Init the uniswap pool fee to 0.3%\\n\\n    address public hopTokenAddress; //Initially DAI, could potentially be USDC\\n\\n    // TODO(zx): I don't think we care about front-end because we're our own frontend.\\n    address public frontEndAddress; // frontEndAddress for potential liquity rewards\\n    address public lusdTokenAddress; // LUSD Address (0x5f98805A4E8be255a32880FDeC7F6728C6568bA0)\\n    address public lqtyTokenAddress; // LQTY Address (0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D)  from https://github.com/liquity/dev/blob/a12f8b737d765bfee6e1bfcf8bf7ef155c814e1e/packages/contracts/mainnetDeployment/realDeploymentOutput/output14.txt#L61\\n\\n    uint256 public totalValueDeployed; // total RFV deployed into lending pool\\n    uint256 public totalAmountDeployed; // Total amount of tokens deployed\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _authority,\\n        address _treasury,\\n        address _lusdTokenAddress,\\n        address _lqtyTokenAddress,\\n        address _stabilityPool,\\n        address _lqtyStaking,\\n        address _frontEndAddress,\\n        address _wethAddress,\\n        address _hopTokenAddress,\\n        address _uniswapV3Router\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        treasury = ITreasury(_treasury);\\n        lusdTokenAddress = _lusdTokenAddress;\\n        lqtyTokenAddress = _lqtyTokenAddress;\\n        lusdStabilityPool = IStabilityPool(_stabilityPool);\\n        lqtyStaking = ILQTYStaking(_lqtyStaking);\\n        frontEndAddress = _frontEndAddress; // address can be 0\\n        weth = IWETH(_wethAddress);\\n        hopTokenAddress = _hopTokenAddress; // address can be 0\\n        swapRouter = ISwapRouter(_uniswapV3Router);\\n\\n        // infinite approve to save gas\\n        weth.safeApprove(address(treasury), type(uint256).max);\\n        weth.safeApprove(address(swapRouter), type(uint256).max);\\n        IERC20(lusdTokenAddress).safeApprove(address(lusdStabilityPool), type(uint256).max);\\n        IERC20(lusdTokenAddress).safeApprove(address(treasury), type(uint256).max);\\n        IERC20(lqtyTokenAddress).safeApprove(address(treasury), type(uint256).max);\\n    }\\n\\n    /**\\n        StabilityPool::withdrawFromSP() and LQTYStaking::stake() will send ETH here, so capture and emit the event\\n     */\\n    receive() external payable {\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /* ======== CONFIGURE FUNCTIONS for Guardian only ======== */\\n    function setEthToLUSDRatio(uint256 _ethToLUSDRatio) external onlyGuardian {\\n        require(_ethToLUSDRatio <= FEE_PRECISION, \\\"Value must be between 0 and 1e6\\\");\\n        ethToLUSDRatio = _ethToLUSDRatio;\\n    }\\n\\n    function setPoolFee(uint256 _poolFee) external onlyGuardian {\\n        require(_poolFee <= POOL_FEE_MAX, \\\"Value must be between 0 and 10000\\\");\\n        poolFee = _poolFee;\\n    }\\n\\n    function setHopTokenAddress(address _hopTokenAddress) external onlyGuardian {\\n        hopTokenAddress = _hopTokenAddress;\\n    }\\n\\n    /**\\n     *  @notice setsFrontEndAddress for Stability pool rewards\\n     *  @param _frontEndAddress address\\n     */\\n    function setFrontEndAddress(address _frontEndAddress) external onlyGuardian {\\n        frontEndAddress = _frontEndAddress;\\n    }\\n\\n    function updateTreasury() public onlyGuardian {\\n        require(authority.vault() != address(0), \\\"Zero address: Vault\\\");\\n        require(address(authority.vault()) != address(treasury), \\\"No change\\\");\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ======== OPEN FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice claims LQTY & ETH Rewards.   minETHLUSDRate minimum rate of when swapping ETH->LUSD.  e.g. 3500 means we swap at a rate of 1 ETH for a minimum 3500 LUSD\\n     \\n        1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury\\n        4.  Deposit LUSD from #2 and potentially #3 into StabilityPool\\n     */\\n    function harvest(uint256 minETHLUSDRate) public onlyGuardian returns (bool) {\\n        uint256 stabilityPoolEthRewards = getETHRewards();\\n        uint256 stabilityPoolLqtyRewards = getLQTYRewards();\\n\\n        if (stabilityPoolEthRewards == 0 && stabilityPoolLqtyRewards == 0) {\\n            return false;\\n        }\\n        // 1.  Harvest from LUSD StabilityPool to get ETH+LQTY rewards\\n        lusdStabilityPool.withdrawFromSP(0); //Passing 0 b/c we don't want to withdraw from the pool but harvest - see https://discord.com/channels/700620821198143498/818895484956835912/908031137010581594\\n\\n        // 2.  Stake LQTY rewards from #1.  This txn will also give out any outstanding ETH+LUSD rewards from prior staking\\n        uint256 balanceLqty = IERC20(lqtyTokenAddress).balanceOf(address(this)); // LQTY balance received from stability pool\\n        if (balanceLqty > 0) {\\n            //Stake\\n            lqtyStaking.stake(balanceLqty); //Stake LQTY, also receives any prior ETH+LUSD rewards from prior staking\\n        }\\n\\n        // 3.  If we have eth, convert to weth, then swap a percentage of it to LUSD.  If swap successul then send all remaining WETH to treasury\\n        uint256 ethBalance = address(this).balance; // Use total balance in case we have leftover from a prior failed attempt\\n        bool swappedLUSDSuccessfully;\\n        if (ethBalance > 0) {\\n            // Wrap ETH to WETH\\n            weth.deposit{value: ethBalance}();\\n\\n            uint256 wethBalance = weth.balanceOf(address(this)); //Base off of WETH balance in case we have leftover from a prior failed attempt\\n            if (ethToLUSDRatio > 0) {\\n                uint256 amountWethToSwap = (wethBalance * ethToLUSDRatio) / FEE_PRECISION;\\n\\n                uint256 amountLUSDMin = amountWethToSwap * minETHLUSDRate; //WETH and LUSD is 18 decimals\\n\\n                // From https://docs.uniswap.org/protocol/guides/swaps/multihop-swaps#calling-the-function-1\\n                // Multiple pool swaps are encoded through bytes called a `path`. A path is a sequence of token addresses and poolFees that define the pools used in the swaps.\\n                // The format for pool encoding is (tokenIn, fee, tokenOut/tokenIn, fee, tokenOut) where tokenIn/tokenOut parameter is the shared token across the pools.\\n                // Since we are swapping WETH to DAI and then DAI to LUSD the path encoding is (WETH, 0.3%, DAI, 0.3%, LUSD).\\n                ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n                    path: abi.encodePacked(address(weth), poolFee, hopTokenAddress, poolFee, lusdTokenAddress),\\n                    recipient: address(this), //Send LUSD here\\n                    deadline: block.timestamp + 25, //25 blocks, at 12 seconds per block is 5 minutes\\n                    amountIn: amountWethToSwap,\\n                    amountOutMinimum: amountLUSDMin\\n                });\\n\\n                // Executes the swap\\n                if (swapRouter.exactInput(params) > 0) {\\n                    swappedLUSDSuccessfully = true;\\n                }\\n            }\\n        }\\n        if (ethToLUSDRatio == 0 || swappedLUSDSuccessfully) {\\n            // If swap was successful (or if percent to swap is 0), send the remaining WETH to the treasury.  Crucial check otherwise we'd send all our WETH to the treasury and not respect our desired percentage\\n\\n            // Get updated balance, send to treasury\\n            uint256 wethBalance = weth.balanceOf(address(this));\\n            if (wethBalance > 0) {\\n                // transfer WETH to treasury\\n                weth.safeTransfer(address(treasury), wethBalance);\\n            }\\n        }\\n\\n        // 4.  Deposit LUSD from #2 and potentially #3 into StabilityPool\\n        uint256 lusdBalance = IERC20(lusdTokenAddress).balanceOf(address(this));\\n        if (lusdBalance > 0) {\\n            _depositLUSD(lusdBalance);\\n        }\\n\\n        return true;\\n    }\\n\\n    /* ======== POLICY FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice withdraws asset from treasury, deposits asset into stability pool\\n     *  @param amount uint\\n     */\\n    function deposit(uint256 amount) external onlyGuardian {\\n        treasury.manage(lusdTokenAddress, amount); // retrieve amount of asset from treasury\\n\\n        _depositLUSD(amount);\\n    }\\n\\n    /**\\n     *  @notice withdraws from stability pool, and deposits asset into treasury\\n     *  @param token address\\n     *  @param amount uint\\n     */\\n    function withdraw(address token, uint256 amount) external onlyGuardian {\\n        require(\\n            token == lusdTokenAddress || token == lqtyTokenAddress,\\n            \\\"token address does not match LUSD nor LQTY token\\\"\\n        );\\n\\n        if (token == lusdTokenAddress) {\\n            lusdStabilityPool.withdrawFromSP(amount); // withdraw from SP\\n\\n            uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset received from stability pool\\n            uint256 value = _tokenValue(token, balance); // treasury RFV calculator\\n\\n            _accountingFor(balance, value, false); // account for withdrawal\\n\\n            treasury.deposit(balance, token, value); // deposit using value as profit so no OHM is minted\\n        } else {\\n            lqtyStaking.unstake(amount);\\n\\n            uint256 balance = IERC20(token).balanceOf(address(this)); // balance of asset received from stability pool\\n            IERC20(token).safeTransfer(address(treasury), balance);\\n        }\\n    }\\n\\n    /* ======== INTERNAL FUNCTIONS ======== */\\n\\n    function _depositLUSD(uint256 amount) internal {\\n        lusdStabilityPool.provideToSP(amount, frontEndAddress); //s either a front-end address OR 0x0\\n\\n        uint256 value = _tokenValue(lusdTokenAddress, amount); // treasury RFV calculator\\n        _accountingFor(amount, value, true); // account for deposit\\n    }\\n\\n    /**\\n     *  @notice accounting of deposits/withdrawals of assets\\n     *  @param amount uint\\n     *  @param value uint\\n     *  @param add bool\\n     */\\n    function _accountingFor(\\n        uint256 amount,\\n        uint256 value,\\n        bool add\\n    ) internal {\\n        if (add) {\\n            totalAmountDeployed = totalAmountDeployed + amount;\\n            totalValueDeployed = totalValueDeployed + value; // track total value allocated into pools\\n        } else {\\n            // track total value allocated into pools\\n            if (amount < totalAmountDeployed) {\\n                totalAmountDeployed = totalAmountDeployed - amount;\\n            } else {\\n                totalAmountDeployed = 0;\\n            }\\n\\n            if (value < totalValueDeployed) {\\n                totalValueDeployed = totalValueDeployed - value;\\n            } else {\\n                totalValueDeployed = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n    Helper method copying OlympusTreasury::_tokenValue(), whose name was 'valueOf()' in v1 \\n    Implemented here so we don't have to upgrade contract later\\n     */\\n    function _tokenValue(address _token, uint256 _amount) internal view returns (uint256 value_) {\\n        value_ = (_amount * (10**9)) / (10**IERC20Metadata(_token).decimals());\\n        return value_;\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice get ETH rewards from SP\\n     *  @return uint\\n     */\\n    function getETHRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorETHGain(address(this));\\n    }\\n\\n    /**\\n     *  @notice get LQTY rewards from SP\\n     *  @return uint\\n     */\\n    function getLQTYRewards() public view returns (uint256) {\\n        return lusdStabilityPool.getDepositorLQTYGain(address(this));\\n    }\\n}\\n\"\n    },\n    \"contracts/allocators/interfaces/ISwapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\n    },\n    \"contracts/allocators/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\nimport \\\"../../interfaces/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\n    },\n    \"contracts/allocators/interfaces/LiquityInterfaces.sol\": {\n      \"content\": \"//https://etherscan.io/address/0x66017D22b0f8556afDd19FC67041899Eb65a21bb\\n/*\\n * The Stability Pool holds LUSD tokens deposited by Stability Pool depositors.\\n *\\n * When a trove is liquidated, then depending on system conditions, some of its LUSD debt gets offset with\\n * LUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of LUSD tokens in the Stability Pool is burned.\\n *\\n * Thus, a liquidation causes each depositor to receive a LUSD loss, in proportion to their deposit as a share of total deposits.\\n * They also receive an ETH gain, as the ETH collateral of the liquidated trove is distributed among Stability depositors,\\n * in the same proportion.\\n *\\n * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%\\n * of the total LUSD in the Stability Pool, depletes 40% of each deposit.\\n *\\n * A deposit that has experienced a series of liquidations is termed a \\\"compounded deposit\\\": each liquidation depletes the deposit,\\n * multiplying it by some factor in range ]0,1[\\n *\\n * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / ETH gain derivations:\\n * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf\\n *\\n * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---\\n *\\n * An LQTY issuance event occurs at every deposit operation, and every liquidation.\\n *\\n * Each deposit is tagged with the address of the front end through which it was made.\\n *\\n * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned\\n * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.\\n *\\n * Please see the system Readme for an overview:\\n * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers\\n */\\ninterface IStabilityPool {\\n    // --- Functions ---\\n    /*\\n     * Initial checks:\\n     * - Frontend is registered or zero address\\n     * - Sender is not a registered frontend\\n     * - _amount is not zero\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n     */\\n    function provideToSP(uint256 _amount, address _frontEndTag) external;\\n\\n    /*\\n     * Initial checks:\\n     * - _amount is zero or there are no under collateralized troves left in the system\\n     * - User has a non zero deposit\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Removes the deposit's front end tag if it is a full withdrawal\\n     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\\n     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\\n     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n     *\\n     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n     */\\n    function withdrawFromSP(uint256 _amount) external;\\n\\n    /*\\n     * Initial checks:\\n     * - User has a non zero deposit\\n     * - User has an open trove\\n     * - User has some ETH gain\\n     * ---\\n     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\\n     * - Sends all depositor's LQTY gain to  depositor\\n     * - Sends all tagged front end's LQTY gain to the tagged front end\\n     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n     * - Leaves their compounded deposit in the Stability Pool\\n     * - Updates snapshots for deposit and tagged front end stake\\n     */\\n    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Frontend (sender) not already registered\\n     * - User (sender) has no deposit\\n     * - _kickbackRate is in the range [0, 100%]\\n     * ---\\n     * Front end makes a one-time selection of kickback rate upon registering\\n     */\\n    function registerFrontEnd(uint256 _kickbackRate) external;\\n\\n    /*\\n     * Initial checks:\\n     * - Caller is TroveManager\\n     * ---\\n     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\\n     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n     * Only called by liquidation functions in the TroveManager.\\n     */\\n    function offset(uint256 _debt, uint256 _coll) external;\\n\\n    /*\\n     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n     * to exclude edge cases like ETH received from a self-destruct.\\n     */\\n    function getETH() external view returns (uint256);\\n\\n    /*\\n     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n     */\\n    function getTotalLUSDDeposits() external view returns (uint256);\\n\\n    /*\\n     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n     */\\n    function getDepositorETHGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\\n     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n     * which they made their deposit.\\n     */\\n    function getDepositorLQTYGain(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the LQTY gain earned by the front end.\\n     */\\n    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint256);\\n\\n    /*\\n     * Return the user's compounded deposit.\\n     */\\n    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint256);\\n\\n    /*\\n     * Return the front end's compounded stake.\\n     *\\n     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n     */\\n    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint256);\\n}\\n\\n//\\ninterface ILQTYStaking {\\n    /*\\n        sends _LQTYAmount from the caller to the staking contract, and increases their stake.\\n        If the caller already has a non-zero stake, it pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function stake(uint256 _LQTYamount) external;\\n\\n    /**\\n        reduces the caller’s stake by _LQTYamount, up to a maximum of their entire stake. \\n        It pays out their accumulated ETH and LUSD gains from staking.\\n    */\\n    function unstake(uint256 _LQTYamount) external;\\n\\n    function getPendingETHGain(address _user) external view returns (uint256);\\n\\n    function getPendingLUSDGain(address _user) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/allocators/alchemixAllocator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../types/OlympusAccessControlled.sol\\\";\\n\\ninterface ITokemakManager {\\n    function currentCycleIndex() external view returns (uint256);\\n}\\n\\ninterface ITokemaktALCX {\\n    function deposit(uint256 amount) external;\\n\\n    function requestedWithdrawals(address addr) external view returns (uint256, uint256);\\n\\n    function withdraw(uint256 requestedAmount) external;\\n\\n    function requestWithdrawal(uint256 amount) external;\\n}\\n\\ninterface IStakingPools {\\n    function claim(uint256 _poolId) external;\\n\\n    function exit(uint256 _poolId) external;\\n\\n    function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256);\\n\\n    function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256);\\n\\n    function deposit(uint256 _poolId, uint256 _depositAmount) external;\\n\\n    function withdraw(uint256 _poolId, uint256 _withdrawAmount) external;\\n}\\n\\n/**\\n *  Contract deploys Alchemix from treasury into the Tokemak tALCX pool,\\n *  tALCX contract gives tALCX token in ratio 1:1 of Alchemix token deposited,\\n *  Contract stake tALCX token on Alchemix staking pool and earn ALCX as reward,\\n *  Contract claims reward and compound it,\\n *  Contract withdraw funds from Alchemix staking pool and Tokemak tALCX pool,\\n *  Sends back Alchemix token with accured reward to treasury.\\n */\\n\\ncontract AlchemixAllocator is OlympusAccessControlled {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    address public immutable alchemix;\\n    address public immutable tokemakManager = 0xA86e412109f77c45a3BC1c5870b880492Fb86A14;\\n\\n    ITokemaktALCX public immutable tALCX; // Tokemak tALCX deposit contract\\n    IStakingPools public immutable pool; // Alchemix staking contract\\n    ITreasury public treasury; // Olympus Treasury\\n\\n    uint256 public totalAlchemixDeposited;\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        address _treasury,\\n        address _alchemix,\\n        address _tALCX,\\n        address _pool,\\n        address _olympusAuthority\\n    ) OlympusAccessControlled(IOlympusAuthority(_olympusAuthority)) {\\n        require(_treasury != address(0));\\n        treasury = ITreasury(_treasury);\\n\\n        require(_tALCX != address(0));\\n        tALCX = ITokemaktALCX(_tALCX);\\n\\n        require(_pool != address(0));\\n        pool = IStakingPools(_pool);\\n\\n        alchemix = _alchemix;\\n    }\\n\\n    /* ======== GUARDIAN FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice compound reward by claiming pending rewards and\\n     *      calling the deposit function\\n     *  @param _poolId pool id of tALCX on Alchemix staking pool\\n     */\\n    function compoundReward(uint256 _poolId) external onlyGuardian {\\n        pool.claim(_poolId);\\n        uint256 alchemixBalance = IERC20(alchemix).balanceOf(address(this));\\n\\n        require(alchemixBalance > 0, \\\"contract has no alchemix token\\\");\\n        deposit(alchemixBalance, _poolId, true);\\n    }\\n\\n    /**\\n     *  @notice withdraws asset from treasury, deposits asset into Tokemak tALCX,\\n     *      then deposits tALCX into Alchemix staking pool\\n     *  @param _amount amount to deposit\\n     *  @param _poolId pool id of tALCX on Alchemix staking pool\\n     *  @param _isCompounding used to indicate if the contract is compounding pending rewards\\n     */\\n    function deposit(\\n        uint256 _amount,\\n        uint256 _poolId,\\n        bool _isCompounding\\n    ) public onlyGuardian {\\n        if (!_isCompounding) {\\n            treasury.manage(alchemix, _amount); // retrieve amount of asset from treasury\\n        }\\n\\n        IERC20(alchemix).approve(address(tALCX), _amount); // approve tALCX pool to spend tokens\\n        tALCX.deposit(_amount);\\n\\n        totalAlchemixDeposited = totalAlchemixDeposited + _amount;\\n        uint256 tALCX_balance = IERC20(address(tALCX)).balanceOf(address(this));\\n\\n        IERC20(address(tALCX)).approve(address(pool), tALCX_balance); // approve to deposit to Alchemix staking pool\\n        pool.deposit(_poolId, tALCX_balance); // deposit into Alchemix staking pool\\n    }\\n\\n    /**\\n     *  @notice as structured by Tokemak before one withdraws you must first request withdrawal,\\n            unstake tALCX from Alchemix staking pool and make a request on Tokemak tALCX pool.\\n     *  @param _poolId pool id of tALCX on Alchemix staking pool\\n     *  @param _amount amount to withdraw if _isEntireFunds is false\\n     *  @param _isEntireFunds used to indicate if amount to with is the entire funds deposited\\n     */\\n    function requestWithdraw(\\n        uint256 _poolId,\\n        uint256 _amount,\\n        bool _isEntireFunds\\n    ) external onlyGuardian {\\n        if (_isEntireFunds) {\\n            pool.exit(_poolId);\\n        } else {\\n            pool.withdraw(_poolId, _amount);\\n        }\\n\\n        uint256 balance = IERC20(address(tALCX)).balanceOf(address(this));\\n        tALCX.requestWithdrawal(balance);\\n    }\\n\\n    /**\\n     *  @notice withdraws ALCX from Tokemak tALCX pool then deposits asset into treasury,\\n            ensures cycle for withdraw has been reached.\\n     */\\n    function withdraw() external onlyGuardian {\\n        (uint256 minCycle, ) = tALCX.requestedWithdrawals(address(this));\\n        uint256 currentCycle = ITokemakManager(tokemakManager).currentCycleIndex();\\n\\n        require(minCycle <= currentCycle, \\\"requested withdraw cycle not reached yet\\\");\\n\\n        (, uint256 requestedAmountToWithdraw) = getRequestedWithdrawalInfo();\\n        tALCX.withdraw(requestedAmountToWithdraw);\\n        uint256 balance = IERC20(alchemix).balanceOf(address(this)); // balance of asset withdrawn\\n\\n        totalAlchemixDeposited = totalAlchemixDeposited - requestedAmountToWithdraw;\\n        IERC20(alchemix).safeTransfer(address(treasury), balance);\\n    }\\n\\n    function updateTreasury() external onlyGuardian {\\n        require(authority.vault() != address(0), \\\"Zero address: Vault\\\");\\n        require(address(authority.vault()) != address(treasury), \\\"No change\\\");\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ======== VIEW FUNCTIONS ======== */\\n\\n    /**\\n     *  @notice query all pending rewards\\n     *  @param _poolId pool id of tALCX on Alchemix staking pool\\n     *  @return uint\\n     */\\n    function alchemixToClaim(uint256 _poolId) external view returns (uint256) {\\n        return pool.getStakeTotalUnclaimed(address(this), _poolId);\\n    }\\n\\n    /**\\n     *  @notice query all deposited tALCX in Alchemix staking pool\\n     *  @param _poolId pool id of tALCX on Alchemix staking pool\\n     *  @return uint\\n     */\\n    function totaltAlcxDeposited(uint256 _poolId) external view returns (uint256) {\\n        return pool.getStakeTotalDeposited(address(this), _poolId);\\n    }\\n\\n    /**\\n     *  @notice query requested withdrawal info\\n     *  @return cycle eligible for withdrawal and amount\\n     */\\n    function getRequestedWithdrawalInfo() public view returns (uint256 cycle, uint256 amount) {\\n        (cycle, amount) = tALCX.requestedWithdrawals(address(this));\\n    }\\n}\\n\"\n    },\n    \"contracts/types/VaultOwned.sol\": {\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.7.5;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract VaultOwned is Ownable {\\n    address internal _vault;\\n\\n    function setVault(address vault_) external onlyOwner returns (bool) {\\n        _vault = vault_;\\n\\n        return true;\\n    }\\n\\n    function vault() public view returns (address) {\\n        return _vault;\\n    }\\n\\n    modifier onlyVault() {\\n        require(_vault == msg.sender, \\\"VaultOwned: caller is not the Vault\\\");\\n        _;\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"metadata\": {\n      \"bytecodeHash\": \"none\",\n      \"useLiteralContent\": true\n    },\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 800\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    }\n  }\n}",
      "solcInputHash": "0d34c8b5cee79f00a8e1b7002c917e07",
      "transactionHash": "0xf0f5f57a1a7ccae7968e10c93478896565661123d57d809f96a56fd65ce27d27",
      "args": [
        "0x4208befD8f546282aB43A30085774513227B656C",
        "0x0b28Da6b497c984ed48b0d69f1DF4010071fC78e",
        "0xaf844BBaD90fB27ae949376338F7c9DA1251acFf",
        "0xf8A1aA1c34970aCE24041ef038A442732d942b89",
        "0xFd0dB2BA8BEaC72d45f12A76f40c345BBf5f6F8d",
        "0x35D3293EA6dD210b8Ca25668ae266ca4C834Ea1b",
        "0x0000000000000000000000000000000000000000",
        "0xc778417E063141139Fce010982780140Aa0cD5Ab",
        "0x6b175474e89094c44da98b954eedeac495271d0f",
        "0x0000000000000000000000000000000000000000"
      ]
    },
    "decoded": {
      "from": "0x8A8b5a97978dB4a54367D7DCF6a50980990F2373",
      "gasPrice": "2500190151",
      "maxFeePerGas": "2500190151",
      "maxPriorityFeePerGas": "2500000000",
      "gasLimit": "2164706",
      "to": null,
      "value": "0",
      "nonce": 375,
      "data": "0x610140604052600c6101008190526b15539055551213d49256915160a21b6101209081526200003291600091906200031c565b5062050910600355610bb86004553480156200004d57600080fd5b50604051620025e5380380620025e58339810160408190526200007091620003df565b600180546001600160a01b0319166001600160a01b038c169081179091556040518b91907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250600280546001600160a01b03199081166001600160a01b038c81169182179093556007805483168c85161790556008805483168b851617905588831660805287831660a05260068054831688851617905585831660c0819052600580549093168685161790925591831660e052620001429160001962000203602090811b6200183017901c565b6200016d60e05160001960c0516001600160a01b03166200020360201b62001830179092919060201c565b60805160075462000199916001600160a01b039091169060001962000203602090811b6200183017901c565b600254600754620001c6916001600160a01b03918216911660001962000203602090811b6200183017901c565b600254600854620001f3916001600160a01b03918216911660001962000203602090811b6200183017901c565b5050505050505050505062000554565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691620002619190620004ae565b6000604051808303816000865af19150503d8060008114620002a0576040519150601f19603f3d011682016040523d82523d6000602084013e620002a5565b606091505b5091509150818015620002d3575080511580620002d3575080806020019051810190620002d39190620004ec565b620003155760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b5050505050565b8280546200032a9062000517565b90600052602060002090601f0160209004810192826200034e576000855562000399565b82601f106200036957805160ff191683800117855562000399565b8280016001018555821562000399579182015b82811115620003995782518255916020019190600101906200037c565b50620003a7929150620003ab565b5090565b5b80821115620003a75760008155600101620003ac565b80516001600160a01b0381168114620003da57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200040057600080fd5b6200040b8b620003c2565b99506200041b60208c01620003c2565b98506200042b60408c01620003c2565b97506200043b60608c01620003c2565b96506200044b60808c01620003c2565b95506200045b60a08c01620003c2565b94506200046b60c08c01620003c2565b93506200047b60e08c01620003c2565b92506200048c6101008c01620003c2565b91506200049d6101208c01620003c2565b90509295989b9194979a5092959850565b6000825160005b81811015620004d15760208186018101518583015201620004b5565b81811115620004e1576000828501525b509190910192915050565b600060208284031215620004ff57600080fd5b815180151581146200051057600080fd5b9392505050565b600181811c908216806200052c57607f821691505b602082108114156200054e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051612018620005cd600039600061123b015260008181611053015281816110db015281816111aa01528181611302015261138e015260008181610fe3015261173e0152600081816106780152818161070901528181610ef2015281816115b8015261198201526120186000f3fe6080604052600436106101835760003560e01c8063817f6481116100d6578063bf7e214f1161007f578063e616916a11610059578063e616916a14610438578063e63a391f1461044e578063f3fef3a31461046557600080fd5b8063bf7e214f146103d2578063c901761d146103f2578063ddc632621461040857600080fd5b80639c769787116100b05780639c7697871461037d578063b6b55f2514610392578063b7e78648146103b257600080fd5b8063817f6481146103275780639501dc8714610347578063987f56ff1461036757600080fd5b806361d027b31161013857806378289ed21161011257806378289ed2146102dd57806378767d05146102f25780637a9e5e4b1461030757600080fd5b806361d027b3146102875780636bd0fd0f146102a7578063739a4a37146102c757600080fd5b806310a18de21161016957806310a18de2146102255780631d2528fc146102455780635a762d641461026557600080fd5b806202fcd3146101c4578063089fe6aa1461020157600080fd5b366101bf5760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2005b600080fd5b3480156101d057600080fd5b506007546101e4906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020d57600080fd5b5061021760045481565b6040519081526020016101f8565b34801561023157600080fd5b506005546101e4906001600160a01b031681565b34801561025157600080fd5b506006546101e4906001600160a01b031681565b34801561027157600080fd5b50610285610280366004611c4a565b610485565b005b34801561029357600080fd5b506002546101e4906001600160a01b031681565b3480156102b357600080fd5b506102856102c2366004611c6e565b61055c565b3480156102d357600080fd5b5061021761271081565b3480156102e957600080fd5b50610217610660565b3480156102fe57600080fd5b506102176106f1565b34801561031357600080fd5b50610285610322366004611c4a565b610740565b34801561033357600080fd5b506008546101e4906001600160a01b031681565b34801561035357600080fd5b50610285610362366004611c6e565b610836565b34801561037357600080fd5b50610217600a5481565b34801561038957600080fd5b50610285610943565b34801561039e57600080fd5b506102856103ad366004611c6e565b610c19565b3480156103be57600080fd5b506102856103cd366004611c4a565b610d38565b3480156103de57600080fd5b506001546101e4906001600160a01b031681565b3480156103fe57600080fd5b5061021760095481565b34801561041457600080fd5b50610428610423366004611c6e565b610e06565b60405190151581526020016101f8565b34801561044457600080fd5b5061021760035481565b34801561045a57600080fd5b50610217620f424081565b34801561047157600080fd5b50610285610480366004611c87565b611445565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906105395760405162461bcd60e51b81526004016105309190611cd0565b60405180910390fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d39190611cb3565b6001600160a01b0316336001600160a01b0316146000906106075760405162461bcd60e51b81526004016105309190611cd0565b50620f424081111561065b5760405162461bcd60e51b815260206004820152601f60248201527f56616c7565206d757374206265206265747765656e203020616e6420316536006044820152606401610530565b600355565b60405163389e92a560e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063389e92a5906024015b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611d78565b905090565b60405163f5f1595d60e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5f1595d906024016106ab565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190611cb3565b6001600160a01b0316336001600160a01b0316146000906107eb5760405162461bcd60e51b81526004016105309190611cd0565b50600180546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611cb3565b6001600160a01b0316336001600160a01b0316146000906108e15760405162461bcd60e51b81526004016105309190611cd0565b5061271081111561093e5760405162461bcd60e51b815260206004820152602160248201527f56616c7565206d757374206265206265747765656e203020616e6420313030306044820152600360fc1b6064820152608401610530565b600455565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190611cb3565b6001600160a01b0316336001600160a01b0316146000906109ee5760405162461bcd60e51b81526004016105309190611cd0565b506001546040805163fbfa77cf60e01b815290516000926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190611cb3565b6001600160a01b03161415610ab45760405162461bcd60e51b815260206004820152601360248201527f5a65726f20616464726573733a205661756c74000000000000000000000000006044820152606401610530565b6002546001546040805163fbfa77cf60e01b815290516001600160a01b03938416939092169163fbfa77cf916004808201926020929091908290030181865afa158015610b05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b299190611cb3565b6001600160a01b03161415610b805760405162461bcd60e51b815260206004820152600960248201527f4e6f206368616e676500000000000000000000000000000000000000000000006044820152606401610530565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf79190611cb3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c909190611cb3565b6001600160a01b0316336001600160a01b031614600090610cc45760405162461bcd60e51b81526004016105309190611cd0565b5060025460075460405162b0eee360e41b81526001600160a01b03918216600482015260248101849052911690630b0eee3090604401600060405180830381600087803b158015610d1457600080fd5b505af1158015610d28573d6000803e3d6000fd5b50505050610d3581611959565b50565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610daf9190611cb3565b6001600160a01b0316336001600160a01b031614600090610de35760405162461bcd60e51b81526004016105309190611cd0565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b60015460408051630229549960e51b815290516000926001600160a01b03169163452a93209160048083019260209291908290030181865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e749190611cb3565b6001600160a01b0316336001600160a01b031614600090610ea85760405162461bcd60e51b81526004016105309190611cd0565b506000610eb3610660565b90506000610ebf6106f1565b905081158015610ecd575080155b15610edc575060009392505050565b604051632e54bf9560e01b8152600060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b158015610f3e57600080fd5b505af1158015610f52573d6000803e3d6000fd5b50506008546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc59190611d78565b905080156110485760405163534a7e1d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a694fc3a90602401600060405180830381600087803b15801561102f57600080fd5b505af1158015611043573d6000803e3d6000fd5b505050505b47600081156112d9577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506370a082319150602401602060405180830381865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190611d78565b600354909150156112d7576000620f42406003548361116f9190611da7565b6111799190611dc6565b905060006111878a83611da7565b6040805160a0810182526004546005546007546bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b821660c087015260d4860185905292831b811660f4860152610108850193909352901b16610128820152815180820361011c01815261013c820183528152306020820152919250600091908101611226426019611de8565b815260200184815260200183815250905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59836040518263ffffffff1660e01b81526004016112859190611e30565b6020604051808303816000875af11580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611d78565b11156112d357600194505b5050505b505b60035415806112e55750805b156113b9576040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113759190611d78565b905080156113b7576002546113b7906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683611a07565b505b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114269190611d78565b905080156114375761143781611959565b506001979650505050505050565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bc9190611cb3565b6001600160a01b0316336001600160a01b0316146000906114f05760405162461bcd60e51b81526004016105309190611cd0565b506007546001600160a01b038381169116148061151a57506008546001600160a01b038381169116145b61158c5760405162461bcd60e51b815260206004820152603060248201527f746f6b656e206164647265737320646f6573206e6f74206d61746368204c555360448201527f44206e6f72204c51545920746f6b656e000000000000000000000000000000006064820152608401610530565b6007546001600160a01b038381169116141561172857604051632e54bf9560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e54bf9590602401600060405180830381600087803b15801561160457600080fd5b505af1158015611618573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa158015611663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116879190611d78565b905060006116958483611b30565b90506116a382826000611bc0565b60025460405163bc157ac160e01b8152600481018490526001600160a01b038681166024830152604482018490529091169063bc157ac1906064016020604051808303816000875af11580156116fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117219190611d78565b5050505050565b6040516305c2fbcf60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e17de7890602401600060405180830381600087803b15801561178a57600080fd5b505af115801561179e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611d78565b60025490915061182a906001600160a01b03858116911683611a07565b505b5050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905291516000928392908716916118a19190611ea0565b6000604051808303816000865af19150503d80600081146118de576040519150601f19603f3d011682016040523d82523d6000602084013e6118e3565b606091505b509150915081801561190d57508051158061190d57508080602001905181019061190d9190611ebc565b6117215760405162461bcd60e51b815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610530565b600654604051635f788d6560e01b8152600481018390526001600160a01b0391821660248201527f000000000000000000000000000000000000000000000000000000000000000090911690635f788d6590604401600060405180830381600087803b1580156119c857600080fd5b505af11580156119dc573d6000803e3d6000fd5b5050600754600092506119f991506001600160a01b031683611b30565b905061182c82826001611bc0565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790529151600092839290871691611a789190611ea0565b6000604051808303816000865af19150503d8060008114611ab5576040519150601f19603f3d011682016040523d82523d6000602084013e611aba565b606091505b5091509150818015611ae4575080511580611ae4575080806020019051810190611ae49190611ebc565b6117215760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610530565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b949190611ede565b611b9f90600a611fe5565b611bad83633b9aca00611da7565b611bb79190611dc6565b90505b92915050565b8015611bed5782600a54611bd49190611de8565b600a55600954611be5908390611de8565b60095561182a565b600a54831015611c0d5782600a54611c059190611ff4565b600a55611c13565b6000600a555b600954821015611c2b5781600954611be59190611ff4565b6000600955505050565b6001600160a01b0381168114610d3557600080fd5b600060208284031215611c5c57600080fd5b8135611c6781611c35565b9392505050565b600060208284031215611c8057600080fd5b5035919050565b60008060408385031215611c9a57600080fd5b8235611ca581611c35565b946020939093013593505050565b600060208284031215611cc557600080fd5b8151611c6781611c35565b600060208083526000845481600182811c915080831680611cf257607f831692505b858310811415611d1057634e487b7160e01b85526022600452602485fd5b878601838152602001818015611d2d5760018114611d3e57611d69565b60ff19861682528782019650611d69565b60008b81526020902060005b86811015611d6357815484820152908501908901611d4a565b83019750505b50949998505050505050505050565b600060208284031215611d8a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dc157611dc1611d91565b500290565b600082611de357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611dfb57611dfb611d91565b500190565b60005b83811015611e1b578181015183820152602001611e03565b83811115611e2a576000848401525b50505050565b602081526000825160a0602084015280518060c0850152611e588160e0860160208501611e00565b6001600160a01b0360208601511660408501526040850151606085015260608501516080850152608085015160a085015260e0601f19601f8301168501019250505092915050565b60008251611eb2818460208701611e00565b9190910192915050565b600060208284031215611ece57600080fd5b81518015158114611c6757600080fd5b600060208284031215611ef057600080fd5b815160ff81168114611c6757600080fd5b600181815b80851115611f3c578160001904821115611f2257611f22611d91565b80851615611f2f57918102915b93841c9390800290611f06565b509250929050565b600082611f5357506001611bba565b81611f6057506000611bba565b8160018114611f765760028114611f8057611f9c565b6001915050611bba565b60ff841115611f9157611f91611d91565b50506001821b611bba565b5060208310610133831016604e8410600b8410161715611fbf575081810a611bba565b611fc98383611f01565b8060001904821115611fdd57611fdd611d91565b029392505050565b6000611bb760ff841683611f44565b60008282101561200657612006611d91565b50039056fea164736f6c634300080a000a0000000000000000000000004208befd8f546282ab43a30085774513227b656c0000000000000000000000000b28da6b497c984ed48b0d69f1df4010071fc78e000000000000000000000000af844bbad90fb27ae949376338f7c9da1251acff000000000000000000000000f8a1aa1c34970ace24041ef038a442732d942b89000000000000000000000000fd0db2ba8beac72d45f12a76f40c345bbf5f6f8d00000000000000000000000035d3293ea6dd210b8ca25668ae266ca4c834ea1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c778417e063141139fce010982780140aa0cd5ab0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000",
      "r": "0x6001978d9dce14f4baedcd5c0f0e919e1a523afb14bbecad8065b554f341c4dc",
      "s": "0x0229fc994b8d79b0ec5b075c4ad8f796a663e4d7afc30c6e0115b423fab6bba3",
      "v": 1,
      "chainId": 4
    }
  }
}
{
  "address": "0x623164A9Ee2556D524b08f34F1d2389d7B4e1A1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ohm",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IOlympusAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "info",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "nextRewardAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        }
      ],
      "name": "nextRewardFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_add",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "setAdjustment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOlympusAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bounty",
          "type": "uint256"
        }
      ],
      "name": "setBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ea715e68ad7b0a44a7833c94407fe0f5f7943ebfcb45c41826a2a810d1fd754",
  "receipt": {
    "to": null,
    "from": "0x1A5309F208f161a393E8b5A253de8Ab894A67188",
    "contractAddress": "0x623164A9Ee2556D524b08f34F1d2389d7B4e1A1C",
    "transactionIndex": 68,
    "gasUsed": "1567126",
    "logsBloom": "0x
    "blockHash": "0x4db74e2360578bbdebbabfe1742e763adc596b5b71ac5f884e0e681d636b9710",
    "transactionHash": "0x7ea715e68ad7b0a44a7833c94407fe0f5f7943ebfcb45c41826a2a810d1fd754",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 14118426,
        "transactionHash": "0x7ea715e68ad7b0a44a7833c94407fe0f5f7943ebfcb45c41826a2a810d1fd754",
        "address": "0x623164A9Ee2556D524b08f34F1d2389d7B4e1A1C",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000e699d386bf26464975f18e5dd4dbb9c886dcb995"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x4db74e2360578bbdebbabfe1742e763adc596b5b71ac5f884e0e681d636b9710"
      }
    ],
    "blockNumber": 14118426,
    "cumulativeGasUsed": "6129377",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a315bdf513367c0377fb36545857d12e85813ef",
    "0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5",
    "0xB63cac384247597756545b500253ff8E607a8020",
    "0xe699d386BF26464975f18e5dd4dbB9C886DCB995"
  ],
  "solcInputHash": "c90f9ef6b5afc2b13f0331ff10ef4701",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ohm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IOlympusAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"nextRewardAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"nextRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"setAdjustment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOlympusAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bounty\",\"type\":\"uint256\"}],\"name\":\"setBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRecipient(address,uint256)\":{\"params\":{\"_recipient\":\"address\",\"_rewardRate\":\"uint\"}},\"nextRewardAt(uint256)\":{\"params\":{\"_rate\":\"uint\"},\"returns\":{\"_0\":\"uint\"}},\"nextRewardFor(address)\":{\"params\":{\"_recipient\":\"address\"},\"returns\":{\"_0\":\"uint\"}},\"removeRecipient(uint256)\":{\"params\":{\"_index\":\"uint\"}},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"params\":{\"_add\":\"bool\",\"_index\":\"uint\",\"_rate\":\"uint\",\"_target\":\"uint\"}},\"setBounty(uint256)\":{\"params\":{\"_bounty\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRecipient(address,uint256)\":{\"notice\":\"adds recipient for distributions\"},\"distribute()\":{\"notice\":\"send epoch reward to staking contract\"},\"nextRewardAt(uint256)\":{\"notice\":\"view function for next reward at given rate\"},\"nextRewardFor(address)\":{\"notice\":\"view function for next reward for specified address\"},\"removeRecipient(uint256)\":{\"notice\":\"removes recipient for distributions\"},\"setAdjustment(uint256,bool,uint256,uint256)\":{\"notice\":\"set adjustment info for a collector's reward rate\"},\"setBounty(uint256)\":{\"notice\":\"set bounty to incentivize keepers\"},\"triggerRebase()\":{\"notice\":\"Patch to trigger rebases via distributor. There is an error in the staking's `stake` function which, if it triggers a rebase, pulls forward part of the rebase for the next epoch. This patch triggers a rebase by calling unstake (which does not have the issue). The patch also restricts `distribute` to only be able to be called from a tx originating this function. Unfortunately this is the _only_ way to resolve this bug without a migrate.\"}},\"notice\":\"Patched distributor for fixing rebase miscalculation error\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingDistributor.sol\":\"Distributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/StakingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./libraries/SafeERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/ITreasury.sol\\\";\\nimport \\\"./interfaces/IDistributor.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\n\\nimport \\\"./types/OlympusAccessControlled.sol\\\";\\n\\ninterface IEpoch {\\n    struct Epoch {\\n        uint256 length; // in seconds\\n        uint256 number; // since inception\\n        uint256 end; // timestamp\\n        uint256 distribute; // amount\\n    }\\n\\n    function epoch() external returns (Epoch memory);\\n}\\n\\n/// @notice Patched distributor for fixing rebase miscalculation error\\ncontract Distributor is IDistributor, OlympusAccessControlled {\\n    /* ========== DEPENDENCIES ========== */\\n\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ====== VARIABLES ====== */\\n\\n    IERC20 private immutable ohm;\\n    ITreasury private immutable treasury;\\n    address private immutable staking;\\n\\n    mapping(uint256 => Adjust) public adjustments;\\n    uint256 public override bounty;\\n\\n    uint256 private immutable rateDenominator = 1_000_000;\\n\\n    // Used as patch for staking inconsistency bug. Restricts `rebase` logic to\\n    // only be called from here.\\n    bool private unlockRebase;\\n\\n    /* ====== STRUCTS ====== */\\n\\n    struct Info {\\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\\n        address recipient;\\n    }\\n    Info[] public info;\\n\\n    struct Adjust {\\n        bool add;\\n        uint256 rate;\\n        uint256 target;\\n    }\\n\\n    /* ====== CONSTRUCTOR ====== */\\n\\n    constructor(\\n        address _treasury,\\n        address _ohm,\\n        address _staking,\\n        address _authority\\n    ) OlympusAccessControlled(IOlympusAuthority(_authority)) {\\n        require(_treasury != address(0), \\\"Zero address: Treasury\\\");\\n        treasury = ITreasury(_treasury);\\n        require(_ohm != address(0), \\\"Zero address: OHM\\\");\\n        ohm = IERC20(_ohm);\\n        require(_staking != address(0), \\\"Zero address: Staking\\\");\\n        staking = _staking;\\n    }\\n\\n    /* ====== PUBLIC FUNCTIONS ====== */\\n\\n    /**\\n        @notice Patch to trigger rebases via distributor. There is an error in the staking's\\n                `stake` function which, if it triggers a rebase, pulls forward part of the\\n                rebase for the next epoch. This patch triggers a rebase by calling unstake\\n                (which does not have the issue). The patch also restricts `distribute` to\\n                only be able to be called from a tx originating this function.\\n\\n                Unfortunately this is the _only_ way to resolve this bug without a migrate.\\n     */\\n    function triggerRebase() external {\\n        require(IEpoch(staking).epoch().end <= block.timestamp, \\\"Epoch has not ended yet\\\");\\n        unlockRebase = true;\\n        IStaking(staking).unstake(msg.sender, 0, true, true); // Give the caller the bounty ohm.\\n        unlockRebase = false;\\n    }\\n\\n    /**\\n        @notice send epoch reward to staking contract\\n     */\\n    function distribute() external override {\\n        require(msg.sender == staking, \\\"Only staking\\\");\\n        require(unlockRebase, \\\"Rebase locked. Must call from `triggerRebase`.\\\");\\n\\n        // distribute rewards to each recipient\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].rate > 0) {\\n                treasury.mint(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send tokens\\n                adjust(i); // check for adjustment\\n            }\\n        }\\n    }\\n\\n    function retrieveBounty() external override returns (uint256) {\\n        require(msg.sender == staking, \\\"Only staking\\\");\\n        // If the distributor bounty is > 0, mint it for the staking contract.\\n        if (bounty > 0) {\\n            treasury.mint(address(staking), bounty);\\n        }\\n\\n        return bounty;\\n    }\\n\\n    /* ====== INTERNAL FUNCTIONS ====== */\\n\\n    /**\\n        @notice increment reward rate for collector\\n     */\\n    function adjust(uint256 _index) internal {\\n        Adjust memory adjustment = adjustments[_index];\\n        if (adjustment.rate != 0) {\\n            if (adjustment.add) {\\n                // if rate should increase\\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\\n                if (info[_index].rate >= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                    info[_index].rate = adjustment.target; // set to target\\n                }\\n            } else {\\n                // if rate should decrease\\n                if (info[_index].rate > adjustment.rate) {\\n                    // protect from underflow\\n                    info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\\n                } else {\\n                    info[_index].rate = 0;\\n                }\\n\\n                if (info[_index].rate <= adjustment.target) {\\n                    // if target met\\n                    adjustments[_index].rate = 0; // turn off adjustment\\n                    info[_index].rate = adjustment.target; // set to target\\n                }\\n            }\\n        }\\n    }\\n\\n    /* ====== VIEW FUNCTIONS ====== */\\n\\n    /**\\n        @notice view function for next reward at given rate\\n        @param _rate uint\\n        @return uint\\n     */\\n    function nextRewardAt(uint256 _rate) public view override returns (uint256) {\\n        return treasury.baseSupply().mul(_rate).div(rateDenominator);\\n    }\\n\\n    /**\\n        @notice view function for next reward for specified address\\n        @param _recipient address\\n        @return uint\\n     */\\n    function nextRewardFor(address _recipient) public view override returns (uint256) {\\n        uint256 reward;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].recipient == _recipient) {\\n                reward = reward.add(nextRewardAt(info[i].rate));\\n            }\\n        }\\n        return reward;\\n    }\\n\\n    /* ====== POLICY FUNCTIONS ====== */\\n\\n    /**\\n     * @notice set bounty to incentivize keepers\\n     * @param _bounty uint256\\n     */\\n    function setBounty(uint256 _bounty) external override onlyGovernor {\\n        require(_bounty <= 2e9, \\\"Too much\\\");\\n        bounty = _bounty;\\n    }\\n\\n    /**\\n        @notice adds recipient for distributions\\n        @param _recipient address\\n        @param _rewardRate uint\\n     */\\n    function addRecipient(address _recipient, uint256 _rewardRate) external override onlyGovernor {\\n        require(_recipient != address(0), \\\"Zero address: Recipient\\\");\\n        require(_rewardRate <= rateDenominator, \\\"Rate cannot exceed denominator\\\");\\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\\n    }\\n\\n    /**\\n        @notice removes recipient for distributions\\n        @param _index uint\\n     */\\n    function removeRecipient(uint256 _index) external override {\\n        require(\\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\\n            \\\"Caller is not governor or guardian\\\"\\n        );\\n        require(info[_index].recipient != address(0), \\\"Recipient does not exist\\\");\\n        info[_index].recipient = address(0);\\n        info[_index].rate = 0;\\n    }\\n\\n    /**\\n        @notice set adjustment info for a collector's reward rate\\n        @param _index uint\\n        @param _add bool\\n        @param _rate uint\\n        @param _target uint\\n     */\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external override {\\n        require(\\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\\n            \\\"Caller is not governor or guardian\\\"\\n        );\\n        require(info[_index].recipient != address(0), \\\"Recipient does not exist\\\");\\n\\n        if (msg.sender == authority.guardian()) {\\n            require(_rate <= info[_index].rate.mul(25).div(1000), \\\"Limiter: cannot adjust by >2.5%\\\");\\n        }\\n\\n        if (!_add) {\\n            require(_rate <= info[_index].rate, \\\"Cannot decrease rate by more than it already is\\\");\\n        }\\n\\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\\n    }\\n}\\n\",\"keccak256\":\"0x6d999d99c99017910fbf47845971d69be67ad1c062bdd7c4cbbc162e736df087\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IDistributor {\\n    function distribute() external;\\n\\n    function bounty() external view returns (uint256);\\n\\n    function retrieveBounty() external returns (uint256);\\n\\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\\n\\n    function nextRewardFor(address _recipient) external view returns (uint256);\\n\\n    function setBounty(uint256 _bounty) external;\\n\\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\\n\\n    function removeRecipient(uint256 _index) external;\\n\\n    function setAdjustment(\\n        uint256 _index,\\n        bool _add,\\n        uint256 _rate,\\n        uint256 _target\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd6fc7153d8030366c99d408843ea948ba7b79c269f809ddbd31b78d7d71751c8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc379ec1f3a741cc00948003e24687516b8fdb71914cd3b90b10589d74fe1d49f\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOlympusAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IOlympusAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0x93c02d36be0a6876183f67e72acf64e0206d0e1e48fb3b9c9ed5614200d9c934\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _rebasing,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger,\\n        bool _rebasing\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc5481248b924479a867d252882a1be9573e4aefe3c7816045e1c0c25daacca70\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface ITreasury {\\n    function deposit(\\n        uint256 _amount,\\n        address _token,\\n        uint256 _profit\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount, address _token) external;\\n\\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function manage(address _token, uint256 _amount) external;\\n\\n    function incurDebt(uint256 amount_, address token_) external;\\n\\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\\n\\n    function excessReserves() external view returns (uint256);\\n\\n    function baseSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a7e171916da6bf9b28904c2adc6ede32896a841e7f7ede0ad60da6804659c56\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport {IERC20} from \\\"../interfaces/IERC20.sol\\\";\\n\\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\\n/// Taken from Solmate\\nlibrary SafeERC20 {\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\\n        );\\n\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"APPROVE_FAILED\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        (bool success, ) = to.call{value: amount}(new bytes(0));\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x778abe92595c692abcf3bec8b72f4491746626d1a057c76b97c8d1a7d759f7b0\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\\n        if (a > 3) {\\n            c = a;\\n            uint256 b = add(div(a, 2), 1);\\n            while (b < c) {\\n                c = b;\\n                b = div(add(div(a, b), b), 2);\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf2edfc9cacbecb4aa48c6e5752a2d87939b450b64c18e77ad1098430d0772005\",\"license\":\"AGPL-3.0\"},\"contracts/types/OlympusAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.7.5;\\n\\nimport \\\"../interfaces/IOlympusAuthority.sol\\\";\\n\\nabstract contract OlympusAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IOlympusAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IOlympusAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IOlympusAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IOlympusAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x23457dbe4e9afae578313d2c73ea3880ca58c16d461fdc6ae83eb98e03ea43f7\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610140604052600c6101008190526b15539055551213d49256915160a21b61012090815262000032916000919062000177565b50620f424060e0523480156200004757600080fd5b5060405162001df238038062001df28339810160408190526200006a9162000240565b600180546001600160a01b0319166001600160a01b0383169081179091556040518291907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b038416620000e75760405162461bcd60e51b8152600401620000de90620002fe565b60405180910390fd5b6001600160601b0319606085901b1660a0526001600160a01b038316620001225760405162461bcd60e51b8152600401620000de906200029c565b6001600160601b0319606084901b166080526001600160a01b0382166200015d5760405162461bcd60e51b8152600401620000de90620002c7565b5060601b6001600160601b03191660c05250620003359050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001af5760008555620001fa565b82601f10620001ca57805160ff1916838001178555620001fa565b82800160010185558215620001fa579182015b82811115620001fa578251825591602001919060010190620001dd565b50620002089291506200020c565b5090565b5b808211156200020857600081556001016200020d565b80516001600160a01b03811681146200023b57600080fd5b919050565b6000806000806080858703121562000256578384fd5b620002618562000223565b9350620002716020860162000223565b9250620002816040860162000223565b9150620002916060860162000223565b905092959194509250565b6020808252601190820152705a65726f20616464726573733a204f484d60781b604082015260600190565b60208082526015908201527f5a65726f20616464726573733a205374616b696e670000000000000000000000604082015260600190565b60208082526016908201527f5a65726f20616464726573733a20547265617375727900000000000000000000604082015260600190565b60805160601c60a05160601c60c05160601c60e051611a606200039260003980610c4f528061109052508061020752806102e95280610d1a5280610e8e5280610f1a525080610c745280610daf5280610eed525050611a606000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063943dfef11161008c578063c9fa8b2a11610066578063c9fa8b2a146101ce578063e4fc6b6d146101e1578063e7187e8a146101e9578063f7982243146101f1576100ea565b8063943dfef11461018f578063bc3b2b1214610197578063bf7e214f146101b9576100ea565b80635d87d363116100c85780635d87d363146101435780635db854b0146101565780637a9e5e4b146101695780638e69e2551461017c576100ea565b80630c7d3931146100ef5780632e340599146100f957806336d33f4414610123575b600080fd5b6100f7610204565b005b61010c6101073660046116a1565b610381565b60405161011a929190611a06565b60405180910390f35b6101366101313660046115df565b6103b8565b60405161011a91906119fd565b6100f76101513660046116a1565b610445565b6100f76101643660046116d1565b610594565b6100f76101773660046115df565b6108b9565b6100f761018a3660046116a1565b6109fc565b610136610c0d565b6101aa6101a53660046116a1565b610c13565b60405161011a93929190611754565b6101c1610c39565b60405161011a919061176c565b6101366101dc3660046116a1565b610c48565b6100f7610d0f565b610136610e81565b6100f76101ff366004611617565b610f7c565b427f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663900cf0cf6040518163ffffffff1660e01b8152600401608060405180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102989190611642565b6040015111156102c35760405162461bcd60e51b81526004016102ba90611825565b60405180910390fd5b6004805460ff19166001908117825560405163990966d560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263990966d59261032292339260009291829101611711565b602060405180830381600087803b15801561033c57600080fd5b505af1158015610350573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037491906116b9565b506004805460ff19169055565b6005818154811061039157600080fd5b6000918252602090912060029091020180546001909101549091506001600160a01b031682565b60008060005b60055481101561043e57836001600160a01b0316600582815481106103df57fe5b60009182526020909120600160029092020101546001600160a01b031614156104365761043361042c6005838154811061041557fe5b906000526020600020906002020160000154610c48565b8390611170565b91505b6001016103be565b5092915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561049357600080fd5b505afa1580156104a7573d6000803e3d6000fd5b505050506040513d60208110156104bd57600080fd5b50516000906001600160a01b0316331461056a5760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561055b5780601f106105305761010080835404028352916020019161055b565b820191906000526020600020905b81548152906001019060200180831161053e57829003601f168201915b50509250505060405180910390fd5b50637735940081111561058f5760405162461bcd60e51b81526004016102ba90611780565b600355565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a91906115fb565b6001600160a01b0316336001600160a01b031614806106cf5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561068257600080fd5b505afa158015610696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ba91906115fb565b6001600160a01b0316336001600160a01b0316145b6106eb5760405162461bcd60e51b81526004016102ba9061185c565b60006001600160a01b03166005858154811061070357fe5b60009182526020909120600160029092020101546001600160a01b0316141561073e5760405162461bcd60e51b81526004016102ba906119c6565b600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b15801561078c57600080fd5b505afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c491906115fb565b6001600160a01b0316336001600160a01b03161415610831576108126103e861080c6019600588815481106107f557fe5b6000918252602090912060029091020154906111d1565b9061122a565b8211156108315760405162461bcd60e51b81526004016102ba906117b7565b82610874576005848154811061084357fe5b9060005260206000209060020201600001548211156108745760405162461bcd60e51b81526004016102ba9061190c565b6040805160608101825293151584526020808501938452848201928352600095865260029081905294209251835460ff19169015151783559051600183015551910155565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d602081101561093157600080fd5b50516000906001600160a01b031633146109a45760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561055b5780601f106105305761010080835404028352916020019161055b565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4a57600080fd5b505afa158015610a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8291906115fb565b6001600160a01b0316336001600160a01b03161480610b375750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b815260040160206040518083038186803b158015610aea57600080fd5b505afa158015610afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2291906115fb565b6001600160a01b0316336001600160a01b0316145b610b535760405162461bcd60e51b81526004016102ba9061185c565b60006001600160a01b031660058281548110610b6b57fe5b60009182526020909120600160029092020101546001600160a01b03161415610ba65760405162461bcd60e51b81526004016102ba906119c6565b600060058281548110610bb557fe5b906000526020600020906002020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060058281548110610bf957fe5b600091825260209091206002909102015550565b60035481565b600260208190526000918252604090912080546001820154919092015460ff9092169183565b6001546001600160a01b031681565b6000610d097f000000000000000000000000000000000000000000000000000000000000000061080c847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663860f50486040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906116b9565b906111d1565b92915050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d575760405162461bcd60e51b81526004016102ba906117ee565b60045460ff16610d795760405162461bcd60e51b81526004016102ba90611969565b60005b600554811015610e7e57600060058281548110610d9557fe5b9060005260206000209060020201600001541115610e76577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f1960058381548110610de957fe5b906000526020600020906002020160010160009054906101000a90046001600160a01b0316610e1e6005858154811061041557fe5b6040518363ffffffff1660e01b8152600401610e3b92919061173b565b600060405180830381600087803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b50505050610e768161126c565b600101610d7c565b50565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ecb5760405162461bcd60e51b81526004016102ba906117ee565b60035415610f75576003546040516340c10f1960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916340c10f1991610f42917f00000000000000000000000000000000000000000000000000000000000000009160040161173b565b600060405180830381600087803b158015610f5c57600080fd5b505af1158015610f70573d6000803e3d6000fd5b505050505b5060035490565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b815260040160206040518083038186803b158015610fca57600080fd5b505afa158015610fde573d6000803e3d6000fd5b505050506040513d6020811015610ff457600080fd5b50516000906001600160a01b031633146110675760405162461bcd60e51b815260206004820190815282546002600019610100600184161502019091160460248301819052909182916044909101908490801561055b5780601f106105305761010080835404028352916020019161055b565b506001600160a01b03821661108e5760405162461bcd60e51b81526004016102ba906118d5565b7f00000000000000000000000000000000000000000000000000000000000000008111156110ce5760405162461bcd60e51b81526004016102ba9061189e565b604080518082019091529081526001600160a01b03918216602082019081526005805460018101825560009190915291517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600290930292830155517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1909101805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6000828201838110156111ca576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000826111e057506000610d09565b828202828482816111ed57fe5b04146111ca5760405162461bcd60e51b8152600401808060200182810382526021815260200180611a336021913960400191505060405180910390fd5b60006111ca83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061146c565b6112746115bc565b506000818152600260208181526040928390208351606081018552815460ff161515815260018201549281018390529201549282019290925290156114685780511561136c576112e68160200151600584815481106112cf57fe5b600091825260209091206002909102015490611170565b600583815481106112f357fe5b60009182526020909120600290910201556040810151600580548490811061131757fe5b906000526020600020906002020160000154106113675760008281526002602052604080822060010191909155810151600580548490811061135557fe5b60009182526020909120600290910201555b611468565b80602001516005838154811061137e57fe5b90600052602060002090600202016000015411156113e5576113c28160200151600584815481106113ab57fe5b600091825260209091206002909102015490611525565b600583815481106113cf57fe5b6000918252602090912060029091020155611406565b6000600583815481106113f457fe5b60009182526020909120600290910201555b80604001516005838154811061141857fe5b906000526020600020906002020160000154116114685760008281526002602052604080822060010191909155810151600580548490811061145657fe5b60009182526020909120600290910201555b5050565b600081836114f85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156114bd5781810151838201526020016114a5565b50505050905090810190601f1680156114ea5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161150457fe5b04905083858161151057fe5b0681850201851461151d57fe5b949350505050565b60006111ca83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156115b45760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156114bd5781810151838201526020016114a5565b505050900390565b604051806060016040528060001515815260200160008152602001600081525090565b6000602082840312156115f0578081fd5b81356111ca81611a1d565b60006020828403121561160c578081fd5b81516111ca81611a1d565b60008060408385031215611629578081fd5b823561163481611a1d565b946020939093013593505050565b600060808284031215611653578081fd5b6040516080810181811067ffffffffffffffff8211171561167057fe5b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b6000602082840312156116b2578081fd5b5035919050565b6000602082840312156116ca578081fd5b5051919050565b600080600080608085870312156116e6578182fd5b84359350602085013580151581146116fc578283fd5b93969395505050506040820135916060013590565b6001600160a01b039490941684526020840192909252151560408301521515606082015260800190565b6001600160a01b03929092168252602082015260400190565b92151583526020830191909152604082015260600190565b6001600160a01b0391909116815260200190565b60208082526008908201527f546f6f206d756368000000000000000000000000000000000000000000000000604082015260600190565b6020808252601f908201527f4c696d697465723a2063616e6e6f742061646a757374206279203e322e352500604082015260600190565b6020808252600c908201527f4f6e6c79207374616b696e670000000000000000000000000000000000000000604082015260600190565b60208082526017908201527f45706f636820686173206e6f7420656e64656420796574000000000000000000604082015260600190565b60208082526022908201527f43616c6c6572206973206e6f7420676f7665726e6f72206f722067756172646960408201526130b760f11b606082015260800190565b6020808252601e908201527f526174652063616e6e6f74206578636565642064656e6f6d696e61746f720000604082015260600190565b60208082526017908201527f5a65726f20616464726573733a20526563697069656e74000000000000000000604082015260600190565b6020808252602f908201527f43616e6e6f742064656372656173652072617465206279206d6f72652074686160408201527f6e20697420616c72656164792069730000000000000000000000000000000000606082015260800190565b6020808252602e908201527f526562617365206c6f636b65642e204d7573742063616c6c2066726f6d20607460408201527f726967676572526562617365602e000000000000000000000000000000000000606082015260800190565b60208082526018908201527f526563697069656e7420646f6573206e6f742065786973740000000000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b0381168114610e7e57600080fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a164736f6c6343000705000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRecipient(address,uint256)": {
        "params": {
          "_recipient": "address",
          "_rewardRate": "uint"
        }
      },
      "nextRewardAt(uint256)": {
        "params": {
          "_rate": "uint"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "nextRewardFor(address)": {
        "params": {
          "_recipient": "address"
        },
        "returns": {
          "_0": "uint"
        }
      },
      "removeRecipient(uint256)": {
        "params": {
          "_index": "uint"
        }
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "params": {
          "_add": "bool",
          "_index": "uint",
          "_rate": "uint",
          "_target": "uint"
        }
      },
      "setBounty(uint256)": {
        "params": {
          "_bounty": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRecipient(address,uint256)": {
        "notice": "adds recipient for distributions"
      },
      "distribute()": {
        "notice": "send epoch reward to staking contract"
      },
      "nextRewardAt(uint256)": {
        "notice": "view function for next reward at given rate"
      },
      "nextRewardFor(address)": {
        "notice": "view function for next reward for specified address"
      },
      "removeRecipient(uint256)": {
        "notice": "removes recipient for distributions"
      },
      "setAdjustment(uint256,bool,uint256,uint256)": {
        "notice": "set adjustment info for a collector's reward rate"
      },
      "setBounty(uint256)": {
        "notice": "set bounty to incentivize keepers"
      },
      "triggerRebase()": {
        "notice": "Patch to trigger rebases via distributor. There is an error in the staking's `stake` function which, if it triggers a rebase, pulls forward part of the rebase for the next epoch. This patch triggers a rebase by calling unstake (which does not have the issue). The patch also restricts `distribute` to only be able to be called from a tx originating this function. Unfortunately this is the _only_ way to resolve this bug without a migrate."
      }
    },
    "notice": "Patched distributor for fixing rebase miscalculation error",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15935,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 15937,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOlympusAuthority)10374"
      },
      {
        "astId": 3309,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "adjustments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Adjust)3332_storage)"
      },
      {
        "astId": 3312,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "bounty",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3317,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "unlockRebase",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3325,
        "contract": "contracts/StakingDistributor.sol:Distributor",
        "label": "info",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(Info)3322_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Info)3322_storage)dyn_storage": {
        "base": "t_struct(Info)3322_storage",
        "encoding": "dynamic_array",
        "label": "struct Distributor.Info[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOlympusAuthority)10374": {
        "encoding": "inplace",
        "label": "contract IOlympusAuthority",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Adjust)3332_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Distributor.Adjust)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjust)3332_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjust)3332_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Adjust",
        "members": [
          {
            "astId": 3327,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "add",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3329,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3331,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Info)3322_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.Info",
        "members": [
          {
            "astId": 3319,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3321,
            "contract": "contracts/StakingDistributor.sol:Distributor",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}